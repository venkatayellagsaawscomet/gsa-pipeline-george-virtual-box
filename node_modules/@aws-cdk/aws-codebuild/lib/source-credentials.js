"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitBucketSourceCredentials = exports.GitHubEnterpriseSourceCredentials = exports.GitHubSourceCredentials = void 0;
const core_1 = require("@aws-cdk/core");
const codebuild_generated_1 = require("./codebuild.generated");
/**
 * The source credentials used when contacting the GitHub API.
 *
 * **Note**: CodeBuild only allows a single credential for GitHub
 * to be saved in a given AWS account in a given region -
 * any attempt to add more than one will result in an error.
 *
 * @resource AWS::CodeBuild::SourceCredential
 */
class GitHubSourceCredentials extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        new codebuild_generated_1.CfnSourceCredential(this, 'Resource', {
            serverType: 'GITHUB',
            authType: 'PERSONAL_ACCESS_TOKEN',
            token: props.accessToken.toString(),
        });
    }
}
exports.GitHubSourceCredentials = GitHubSourceCredentials;
/**
 * The source credentials used when contacting the GitHub Enterprise API.
 *
 * **Note**: CodeBuild only allows a single credential for GitHub Enterprise
 * to be saved in a given AWS account in a given region -
 * any attempt to add more than one will result in an error.
 *
 * @resource AWS::CodeBuild::SourceCredential
 */
class GitHubEnterpriseSourceCredentials extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        new codebuild_generated_1.CfnSourceCredential(this, 'Resource', {
            serverType: 'GITHUB_ENTERPRISE',
            authType: 'PERSONAL_ACCESS_TOKEN',
            token: props.accessToken.toString(),
        });
    }
}
exports.GitHubEnterpriseSourceCredentials = GitHubEnterpriseSourceCredentials;
/**
 * The source credentials used when contacting the BitBucket API.
 *
 * **Note**: CodeBuild only allows a single credential for BitBucket
 * to be saved in a given AWS account in a given region -
 * any attempt to add more than one will result in an error.
 *
 * @resource AWS::CodeBuild::SourceCredential
 */
class BitBucketSourceCredentials extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        new codebuild_generated_1.CfnSourceCredential(this, 'Resource', {
            serverType: 'BITBUCKET',
            authType: 'BASIC_AUTH',
            username: props.username.toString(),
            token: props.password.toString(),
        });
    }
}
exports.BitBucketSourceCredentials = BitBucketSourceCredentials;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLWNyZWRlbnRpYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic291cmNlLWNyZWRlbnRpYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdDQUFpRTtBQUNqRSwrREFBNEQ7QUFZNUQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFhLHVCQUF3QixTQUFRLGVBQVE7SUFDbkQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFtQztRQUMzRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLElBQUkseUNBQW1CLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUN4QyxVQUFVLEVBQUUsUUFBUTtZQUNwQixRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLEtBQUssRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRTtTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFWRCwwREFVQztBQWFEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBYSxpQ0FBa0MsU0FBUSxlQUFRO0lBQzdELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBNkM7UUFDckYsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixJQUFJLHlDQUFtQixDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDeEMsVUFBVSxFQUFFLG1CQUFtQjtZQUMvQixRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLEtBQUssRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRTtTQUNwQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFWRCw4RUFVQztBQWFEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBYSwwQkFBMkIsU0FBUSxlQUFRO0lBQ3RELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBc0M7UUFDOUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixJQUFJLHlDQUFtQixDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDeEMsVUFBVSxFQUFFLFdBQVc7WUFDdkIsUUFBUSxFQUFFLFlBQVk7WUFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQ25DLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTtTQUNqQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFYRCxnRUFXQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCwgUmVzb3VyY2UsIFNlY3JldFZhbHVlIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBDZm5Tb3VyY2VDcmVkZW50aWFsIH0gZnJvbSAnLi9jb2RlYnVpbGQuZ2VuZXJhdGVkJztcblxuLyoqXG4gKiBDcmVhdGlvbiBwcm9wZXJ0aWVzIGZvciB7QGxpbmsgR2l0SHViU291cmNlQ3JlZGVudGlhbHN9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEdpdEh1YlNvdXJjZUNyZWRlbnRpYWxzUHJvcHMge1xuICAvKipcbiAgICogVGhlIHBlcnNvbmFsIGFjY2VzcyB0b2tlbiB0byB1c2Ugd2hlbiBjb250YWN0aW5nIHRoZSBHaXRIdWIgQVBJLlxuICAgKi9cbiAgcmVhZG9ubHkgYWNjZXNzVG9rZW46IFNlY3JldFZhbHVlO1xufVxuXG4vKipcbiAqIFRoZSBzb3VyY2UgY3JlZGVudGlhbHMgdXNlZCB3aGVuIGNvbnRhY3RpbmcgdGhlIEdpdEh1YiBBUEkuXG4gKlxuICogKipOb3RlKio6IENvZGVCdWlsZCBvbmx5IGFsbG93cyBhIHNpbmdsZSBjcmVkZW50aWFsIGZvciBHaXRIdWJcbiAqIHRvIGJlIHNhdmVkIGluIGEgZ2l2ZW4gQVdTIGFjY291bnQgaW4gYSBnaXZlbiByZWdpb24gLVxuICogYW55IGF0dGVtcHQgdG8gYWRkIG1vcmUgdGhhbiBvbmUgd2lsbCByZXN1bHQgaW4gYW4gZXJyb3IuXG4gKlxuICogQHJlc291cmNlIEFXUzo6Q29kZUJ1aWxkOjpTb3VyY2VDcmVkZW50aWFsXG4gKi9cbmV4cG9ydCBjbGFzcyBHaXRIdWJTb3VyY2VDcmVkZW50aWFscyBleHRlbmRzIFJlc291cmNlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEdpdEh1YlNvdXJjZUNyZWRlbnRpYWxzUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgbmV3IENmblNvdXJjZUNyZWRlbnRpYWwodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgc2VydmVyVHlwZTogJ0dJVEhVQicsXG4gICAgICBhdXRoVHlwZTogJ1BFUlNPTkFMX0FDQ0VTU19UT0tFTicsXG4gICAgICB0b2tlbjogcHJvcHMuYWNjZXNzVG9rZW4udG9TdHJpbmcoKSxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0aW9uIHByb3BlcnRpZXMgZm9yIHtAbGluayBHaXRIdWJFbnRlcnByaXNlU291cmNlQ3JlZGVudGlhbHN9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEdpdEh1YkVudGVycHJpc2VTb3VyY2VDcmVkZW50aWFsc1Byb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBwZXJzb25hbCBhY2Nlc3MgdG9rZW4gdG8gdXNlIHdoZW4gY29udGFjdGluZyB0aGVcbiAgICogaW5zdGFuY2Ugb2YgdGhlIEdpdEh1YiBFbnRlcnByaXNlIEFQSS5cbiAgICovXG4gIHJlYWRvbmx5IGFjY2Vzc1Rva2VuOiBTZWNyZXRWYWx1ZTtcbn1cblxuLyoqXG4gKiBUaGUgc291cmNlIGNyZWRlbnRpYWxzIHVzZWQgd2hlbiBjb250YWN0aW5nIHRoZSBHaXRIdWIgRW50ZXJwcmlzZSBBUEkuXG4gKlxuICogKipOb3RlKio6IENvZGVCdWlsZCBvbmx5IGFsbG93cyBhIHNpbmdsZSBjcmVkZW50aWFsIGZvciBHaXRIdWIgRW50ZXJwcmlzZVxuICogdG8gYmUgc2F2ZWQgaW4gYSBnaXZlbiBBV1MgYWNjb3VudCBpbiBhIGdpdmVuIHJlZ2lvbiAtXG4gKiBhbnkgYXR0ZW1wdCB0byBhZGQgbW9yZSB0aGFuIG9uZSB3aWxsIHJlc3VsdCBpbiBhbiBlcnJvci5cbiAqXG4gKiBAcmVzb3VyY2UgQVdTOjpDb2RlQnVpbGQ6OlNvdXJjZUNyZWRlbnRpYWxcbiAqL1xuZXhwb3J0IGNsYXNzIEdpdEh1YkVudGVycHJpc2VTb3VyY2VDcmVkZW50aWFscyBleHRlbmRzIFJlc291cmNlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEdpdEh1YkVudGVycHJpc2VTb3VyY2VDcmVkZW50aWFsc1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIG5ldyBDZm5Tb3VyY2VDcmVkZW50aWFsKHRoaXMsICdSZXNvdXJjZScsIHtcbiAgICAgIHNlcnZlclR5cGU6ICdHSVRIVUJfRU5URVJQUklTRScsXG4gICAgICBhdXRoVHlwZTogJ1BFUlNPTkFMX0FDQ0VTU19UT0tFTicsXG4gICAgICB0b2tlbjogcHJvcHMuYWNjZXNzVG9rZW4udG9TdHJpbmcoKSxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnN0cnVjdGlvbiBwcm9wZXJ0aWVzIG9mIHtAbGluayBCaXRCdWNrZXRTb3VyY2VDcmVkZW50aWFsc30uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQml0QnVja2V0U291cmNlQ3JlZGVudGlhbHNQcm9wcyB7XG4gIC8qKiBZb3VyIEJpdEJ1Y2tldCB1c2VybmFtZS4gKi9cbiAgcmVhZG9ubHkgdXNlcm5hbWU6IFNlY3JldFZhbHVlO1xuXG4gIC8qKiBZb3VyIEJpdEJ1Y2tldCBhcHBsaWNhdGlvbiBwYXNzd29yZC4gKi9cbiAgcmVhZG9ubHkgcGFzc3dvcmQ6IFNlY3JldFZhbHVlO1xufVxuXG4vKipcbiAqIFRoZSBzb3VyY2UgY3JlZGVudGlhbHMgdXNlZCB3aGVuIGNvbnRhY3RpbmcgdGhlIEJpdEJ1Y2tldCBBUEkuXG4gKlxuICogKipOb3RlKio6IENvZGVCdWlsZCBvbmx5IGFsbG93cyBhIHNpbmdsZSBjcmVkZW50aWFsIGZvciBCaXRCdWNrZXRcbiAqIHRvIGJlIHNhdmVkIGluIGEgZ2l2ZW4gQVdTIGFjY291bnQgaW4gYSBnaXZlbiByZWdpb24gLVxuICogYW55IGF0dGVtcHQgdG8gYWRkIG1vcmUgdGhhbiBvbmUgd2lsbCByZXN1bHQgaW4gYW4gZXJyb3IuXG4gKlxuICogQHJlc291cmNlIEFXUzo6Q29kZUJ1aWxkOjpTb3VyY2VDcmVkZW50aWFsXG4gKi9cbmV4cG9ydCBjbGFzcyBCaXRCdWNrZXRTb3VyY2VDcmVkZW50aWFscyBleHRlbmRzIFJlc291cmNlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEJpdEJ1Y2tldFNvdXJjZUNyZWRlbnRpYWxzUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgbmV3IENmblNvdXJjZUNyZWRlbnRpYWwodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgc2VydmVyVHlwZTogJ0JJVEJVQ0tFVCcsXG4gICAgICBhdXRoVHlwZTogJ0JBU0lDX0FVVEgnLFxuICAgICAgdXNlcm5hbWU6IHByb3BzLnVzZXJuYW1lLnRvU3RyaW5nKCksXG4gICAgICB0b2tlbjogcHJvcHMucGFzc3dvcmQudG9TdHJpbmcoKSxcbiAgICB9KTtcbiAgfVxufVxuIl19