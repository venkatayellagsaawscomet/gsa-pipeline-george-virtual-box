"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeBuildSpecs = exports.BuildSpec = void 0;
const core_1 = require("@aws-cdk/core");
/**
 * BuildSpec for CodeBuild projects
 */
class BuildSpec {
    constructor() {
    }
    static fromObject(value) {
        return new ObjectBuildSpec(value);
    }
    /**
     * Use a file from the source as buildspec
     *
     * Use this if you want to use a file different from 'buildspec.yml'`
     */
    static fromSourceFilename(filename) {
        return new FilenameBuildSpec(filename);
    }
}
exports.BuildSpec = BuildSpec;
/**
 * BuildSpec that just returns the input unchanged
 */
class FilenameBuildSpec extends BuildSpec {
    constructor(filename) {
        super();
        this.filename = filename;
        this.isImmediate = false;
    }
    toBuildSpec() {
        return this.filename;
    }
    toString() {
        return `<buildspec file: ${this.filename}>`;
    }
}
/**
 * BuildSpec that understands about structure
 */
class ObjectBuildSpec extends BuildSpec {
    constructor(spec) {
        super();
        this.spec = spec;
        this.isImmediate = true;
    }
    toBuildSpec() {
        // We have to pretty-print the buildspec, otherwise
        // CodeBuild will not recognize it as an inline buildspec.
        return core_1.Lazy.stringValue({
            produce: (ctx) => core_1.Stack.of(ctx.scope).toJsonString(this.spec, 2),
        });
    }
}
/**
 * Merge two buildspecs into a new BuildSpec
 *
 * NOTE: will currently only merge commands, not artifact
 * declarations, environment variables, secrets, or any
 * other configuration elements.
 *
 * Internal for now because it's not complete/good enough
 * to expose on the objects directly, but we need to it to
 * keep feature-parity for Project.
 *
 * @internal
 */
function mergeBuildSpecs(lhs, rhs) {
    if (!(lhs instanceof ObjectBuildSpec) || !(rhs instanceof ObjectBuildSpec)) {
        throw new Error('Can only merge buildspecs created using BuildSpec.fromObject()');
    }
    return new ObjectBuildSpec(copyCommands(lhs.spec, rhs.spec));
}
exports.mergeBuildSpecs = mergeBuildSpecs;
/**
 * Extend buildSpec phases with the contents of another one
 */
function copyCommands(buildSpec, extend) {
    if (buildSpec.version === '0.1') {
        throw new Error('Cannot extend buildspec at version "0.1". Set the version to "0.2" or higher instead.');
    }
    const ret = Object.assign({}, buildSpec); // Return a copy
    ret.phases = Object.assign({}, ret.phases);
    for (const phaseName of Object.keys(extend.phases)) {
        const phase = ret.phases[phaseName] = Object.assign({}, ret.phases[phaseName]);
        phase.commands = [...phase.commands || [], ...extend.phases[phaseName].commands];
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJ1aWxkLXNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0NBQTZEO0FBRTdEOztHQUVHO0FBQ0gsTUFBc0IsU0FBUztJQW1CN0I7SUFDQSxDQUFDO0lBbkJNLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBMkI7UUFDbEQsT0FBTyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxRQUFnQjtRQUMvQyxPQUFPLElBQUksaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQztDQWNGO0FBMUJELDhCQTBCQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxpQkFBa0IsU0FBUSxTQUFTO0lBR3ZDLFlBQTZCLFFBQWdCO1FBQzNDLEtBQUssRUFBRSxDQUFDO1FBRG1CLGFBQVEsR0FBUixRQUFRLENBQVE7UUFGN0IsZ0JBQVcsR0FBWSxLQUFLLENBQUM7SUFJN0MsQ0FBQztJQUVNLFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxRQUFRO1FBQ2IsT0FBTyxvQkFBb0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDO0lBQzlDLENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxlQUFnQixTQUFRLFNBQVM7SUFHckMsWUFBNEIsSUFBMEI7UUFDcEQsS0FBSyxFQUFFLENBQUM7UUFEa0IsU0FBSSxHQUFKLElBQUksQ0FBc0I7UUFGdEMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7SUFJNUMsQ0FBQztJQUVNLFdBQVc7UUFDaEIsbURBQW1EO1FBQ25ELDBEQUEwRDtRQUMxRCxPQUFPLFdBQUksQ0FBQyxXQUFXLENBQUM7WUFDdEIsT0FBTyxFQUFFLENBQUMsR0FBb0IsRUFBRSxFQUFFLENBQ2hDLFlBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNqRCxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRDs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxTQUFnQixlQUFlLENBQUMsR0FBYyxFQUFFLEdBQWM7SUFDNUQsSUFBSSxDQUFDLENBQUMsR0FBRyxZQUFZLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksZUFBZSxDQUFDLEVBQUU7UUFDMUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDO0tBQ25GO0lBRUQsT0FBTyxJQUFJLGVBQWUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBTkQsMENBTUM7QUFFRDs7R0FFRztBQUNILFNBQVMsWUFBWSxDQUFDLFNBQWMsRUFBRSxNQUFXO0lBQy9DLElBQUksU0FBUyxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUU7UUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyx1RkFBdUYsQ0FBQyxDQUFDO0tBQzFHO0lBRUQsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7SUFDMUQsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFM0MsS0FBSyxNQUFNLFNBQVMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNsRCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUMvRSxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbEY7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUmVzb2x2ZUNvbnRleHQsIExhenksIFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5cbi8qKlxuICogQnVpbGRTcGVjIGZvciBDb2RlQnVpbGQgcHJvamVjdHNcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJ1aWxkU3BlYyB7XG4gIHB1YmxpYyBzdGF0aWMgZnJvbU9iamVjdCh2YWx1ZToge1trZXk6IHN0cmluZ106IGFueX0pOiBCdWlsZFNwZWMge1xuICAgIHJldHVybiBuZXcgT2JqZWN0QnVpbGRTcGVjKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgYSBmaWxlIGZyb20gdGhlIHNvdXJjZSBhcyBidWlsZHNwZWNcbiAgICpcbiAgICogVXNlIHRoaXMgaWYgeW91IHdhbnQgdG8gdXNlIGEgZmlsZSBkaWZmZXJlbnQgZnJvbSAnYnVpbGRzcGVjLnltbCdgXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21Tb3VyY2VGaWxlbmFtZShmaWxlbmFtZTogc3RyaW5nKTogQnVpbGRTcGVjIHtcbiAgICByZXR1cm4gbmV3IEZpbGVuYW1lQnVpbGRTcGVjKGZpbGVuYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBidWlsZHNwZWMgaXMgZGlyZWN0bHkgYXZhaWxhYmxlIG9yIGRlZmVycmVkIHVudGlsIGJ1aWxkLXRpbWVcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBpc0ltbWVkaWF0ZTogYm9vbGVhbjtcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIHRoZSByZXByZXNlbnRlZCBCdWlsZFNwZWNcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCB0b0J1aWxkU3BlYygpOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQnVpbGRTcGVjIHRoYXQganVzdCByZXR1cm5zIHRoZSBpbnB1dCB1bmNoYW5nZWRcbiAqL1xuY2xhc3MgRmlsZW5hbWVCdWlsZFNwZWMgZXh0ZW5kcyBCdWlsZFNwZWMge1xuICBwdWJsaWMgcmVhZG9ubHkgaXNJbW1lZGlhdGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZpbGVuYW1lOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHRvQnVpbGRTcGVjKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZW5hbWU7XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGA8YnVpbGRzcGVjIGZpbGU6ICR7dGhpcy5maWxlbmFtZX0+YDtcbiAgfVxufVxuXG4vKipcbiAqIEJ1aWxkU3BlYyB0aGF0IHVuZGVyc3RhbmRzIGFib3V0IHN0cnVjdHVyZVxuICovXG5jbGFzcyBPYmplY3RCdWlsZFNwZWMgZXh0ZW5kcyBCdWlsZFNwZWMge1xuICBwdWJsaWMgcmVhZG9ubHkgaXNJbW1lZGlhdGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBzcGVjOiB7W2tleTogc3RyaW5nXTogYW55fSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgdG9CdWlsZFNwZWMoKTogc3RyaW5nIHtcbiAgICAvLyBXZSBoYXZlIHRvIHByZXR0eS1wcmludCB0aGUgYnVpbGRzcGVjLCBvdGhlcndpc2VcbiAgICAvLyBDb2RlQnVpbGQgd2lsbCBub3QgcmVjb2duaXplIGl0IGFzIGFuIGlubGluZSBidWlsZHNwZWMuXG4gICAgcmV0dXJuIExhenkuc3RyaW5nVmFsdWUoe1xuICAgICAgcHJvZHVjZTogKGN0eDogSVJlc29sdmVDb250ZXh0KSA9PlxuICAgICAgICBTdGFjay5vZihjdHguc2NvcGUpLnRvSnNvblN0cmluZyh0aGlzLnNwZWMsIDIpLFxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIGJ1aWxkc3BlY3MgaW50byBhIG5ldyBCdWlsZFNwZWNcbiAqXG4gKiBOT1RFOiB3aWxsIGN1cnJlbnRseSBvbmx5IG1lcmdlIGNvbW1hbmRzLCBub3QgYXJ0aWZhY3RcbiAqIGRlY2xhcmF0aW9ucywgZW52aXJvbm1lbnQgdmFyaWFibGVzLCBzZWNyZXRzLCBvciBhbnlcbiAqIG90aGVyIGNvbmZpZ3VyYXRpb24gZWxlbWVudHMuXG4gKlxuICogSW50ZXJuYWwgZm9yIG5vdyBiZWNhdXNlIGl0J3Mgbm90IGNvbXBsZXRlL2dvb2QgZW5vdWdoXG4gKiB0byBleHBvc2Ugb24gdGhlIG9iamVjdHMgZGlyZWN0bHksIGJ1dCB3ZSBuZWVkIHRvIGl0IHRvXG4gKiBrZWVwIGZlYXR1cmUtcGFyaXR5IGZvciBQcm9qZWN0LlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VCdWlsZFNwZWNzKGxoczogQnVpbGRTcGVjLCByaHM6IEJ1aWxkU3BlYyk6IEJ1aWxkU3BlYyB7XG4gIGlmICghKGxocyBpbnN0YW5jZW9mIE9iamVjdEJ1aWxkU3BlYykgfHwgIShyaHMgaW5zdGFuY2VvZiBPYmplY3RCdWlsZFNwZWMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBtZXJnZSBidWlsZHNwZWNzIGNyZWF0ZWQgdXNpbmcgQnVpbGRTcGVjLmZyb21PYmplY3QoKScpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBPYmplY3RCdWlsZFNwZWMoY29weUNvbW1hbmRzKGxocy5zcGVjLCByaHMuc3BlYykpO1xufVxuXG4vKipcbiAqIEV4dGVuZCBidWlsZFNwZWMgcGhhc2VzIHdpdGggdGhlIGNvbnRlbnRzIG9mIGFub3RoZXIgb25lXG4gKi9cbmZ1bmN0aW9uIGNvcHlDb21tYW5kcyhidWlsZFNwZWM6IGFueSwgZXh0ZW5kOiBhbnkpOiBhbnkge1xuICBpZiAoYnVpbGRTcGVjLnZlcnNpb24gPT09ICcwLjEnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZXh0ZW5kIGJ1aWxkc3BlYyBhdCB2ZXJzaW9uIFwiMC4xXCIuIFNldCB0aGUgdmVyc2lvbiB0byBcIjAuMlwiIG9yIGhpZ2hlciBpbnN0ZWFkLicpO1xuICB9XG5cbiAgY29uc3QgcmV0ID0gT2JqZWN0LmFzc2lnbih7fSwgYnVpbGRTcGVjKTsgLy8gUmV0dXJuIGEgY29weVxuICByZXQucGhhc2VzID0gT2JqZWN0LmFzc2lnbih7fSwgcmV0LnBoYXNlcyk7XG5cbiAgZm9yIChjb25zdCBwaGFzZU5hbWUgb2YgT2JqZWN0LmtleXMoZXh0ZW5kLnBoYXNlcykpIHtcbiAgICBjb25zdCBwaGFzZSA9IHJldC5waGFzZXNbcGhhc2VOYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIHJldC5waGFzZXNbcGhhc2VOYW1lXSk7XG4gICAgcGhhc2UuY29tbWFuZHMgPSBbLi4ucGhhc2UuY29tbWFuZHMgfHwgW10sIC4uLmV4dGVuZC5waGFzZXNbcGhhc2VOYW1lXS5jb21tYW5kc107XG4gIH1cblxuICByZXR1cm4gcmV0O1xufSJdfQ==