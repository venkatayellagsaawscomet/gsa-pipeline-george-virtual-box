"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const codebuild = require("../lib");
module.exports = {
    'Linux GPU build image': {
        'AWS Deep Learning Container images': {
            'allows passing the account that the repository of the image is hosted in'(test) {
                const stack = new cdk.Stack();
                new codebuild.Project(stack, 'Project', {
                    buildSpec: codebuild.BuildSpec.fromObject({
                        version: '0.2',
                        phases: {
                            build: { commands: ['ls'] },
                        },
                    }),
                    environment: {
                        buildImage: codebuild.LinuxGpuBuildImage.awsDeepLearningContainersImage('my-repo', 'my-tag', '123456789012'),
                    },
                });
                assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodeBuild::Project', {
                    Environment: {
                        ComputeType: 'BUILD_GENERAL1_LARGE',
                        Image: {
                            'Fn::Join': ['', [
                                    '123456789012.dkr.ecr.',
                                    { Ref: 'AWS::Region' },
                                    '.',
                                    { Ref: 'AWS::URLSuffix' },
                                    '/my-repo:my-tag',
                                ]],
                        },
                    },
                }));
                assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::IAM::Policy', {
                    PolicyDocument: {
                        Statement: assert_1.arrayWith(assert_1.objectLike({
                            Action: [
                                'ecr:BatchCheckLayerAvailability',
                                'ecr:GetDownloadUrlForLayer',
                                'ecr:BatchGetImage',
                            ],
                            Resource: {
                                'Fn::Join': ['', [
                                        'arn:',
                                        { Ref: 'AWS::Partition' },
                                        ':ecr:',
                                        { Ref: 'AWS::Region' },
                                        ':123456789012:repository/my-repo',
                                    ]],
                            },
                        })),
                    },
                }));
                test.done();
            },
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5saW51eC1ncHUtYnVpbGQtaW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LmxpbnV4LWdwdS1idWlsZC1pbWFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNENBQWtGO0FBQ2xGLHFDQUFxQztBQUVyQyxvQ0FBb0M7QUFFcEMsaUJBQVM7SUFDUCx1QkFBdUIsRUFBRTtRQUN2QixvQ0FBb0MsRUFBRTtZQUNwQywwRUFBMEUsQ0FBQyxJQUFVO2dCQUNuRixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFFOUIsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7b0JBQ3RDLFNBQVMsRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQzt3QkFDeEMsT0FBTyxFQUFFLEtBQUs7d0JBQ2QsTUFBTSxFQUFFOzRCQUNOLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO3lCQUM1QjtxQkFDRixDQUFDO29CQUNGLFdBQVcsRUFBRTt3QkFDWCxVQUFVLEVBQUUsU0FBUyxDQUFDLGtCQUFrQixDQUFDLDhCQUE4QixDQUNyRSxTQUFTLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQztxQkFDdkM7aUJBQ0YsQ0FBQyxDQUFDO2dCQUVILGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMseUJBQWdCLENBQUMseUJBQXlCLEVBQUU7b0JBQzNELFdBQVcsRUFBRTt3QkFDWCxXQUFXLEVBQUUsc0JBQXNCO3dCQUNuQyxLQUFLLEVBQUU7NEJBQ0wsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO29DQUNmLHVCQUF1QjtvQ0FDdkIsRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFO29DQUN0QixHQUFHO29DQUNILEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFO29DQUN6QixpQkFBaUI7aUNBQ2xCLENBQUM7eUJBQ0g7cUJBQ0Y7aUJBQ0YsQ0FBQyxDQUFDLENBQUM7Z0JBRUosZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyx5QkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRTtvQkFDcEQsY0FBYyxFQUFFO3dCQUNkLFNBQVMsRUFBRSxrQkFBUyxDQUFDLG1CQUFVLENBQUM7NEJBQzlCLE1BQU0sRUFBRTtnQ0FDTixpQ0FBaUM7Z0NBQ2pDLDRCQUE0QjtnQ0FDNUIsbUJBQW1COzZCQUNwQjs0QkFDRCxRQUFRLEVBQUU7Z0NBQ1IsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO3dDQUNmLE1BQU07d0NBQ04sRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUU7d0NBQ3pCLE9BQU87d0NBQ1AsRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFO3dDQUN0QixrQ0FBa0M7cUNBQ25DLENBQUM7NkJBQ0g7eUJBQ0YsQ0FBQyxDQUFDO3FCQUNKO2lCQUNGLENBQUMsQ0FBQyxDQUFDO2dCQUVKLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNkLENBQUM7U0FDRjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFycmF5V2l0aCwgZXhwZWN0LCBoYXZlUmVzb3VyY2VMaWtlLCBvYmplY3RMaWtlIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgKiBhcyBjb2RlYnVpbGQgZnJvbSAnLi4vbGliJztcblxuZXhwb3J0ID0ge1xuICAnTGludXggR1BVIGJ1aWxkIGltYWdlJzoge1xuICAgICdBV1MgRGVlcCBMZWFybmluZyBDb250YWluZXIgaW1hZ2VzJzoge1xuICAgICAgJ2FsbG93cyBwYXNzaW5nIHRoZSBhY2NvdW50IHRoYXQgdGhlIHJlcG9zaXRvcnkgb2YgdGhlIGltYWdlIGlzIGhvc3RlZCBpbicodGVzdDogVGVzdCkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgICAgICBuZXcgY29kZWJ1aWxkLlByb2plY3Qoc3RhY2ssICdQcm9qZWN0Jywge1xuICAgICAgICAgIGJ1aWxkU3BlYzogY29kZWJ1aWxkLkJ1aWxkU3BlYy5mcm9tT2JqZWN0KHtcbiAgICAgICAgICAgIHZlcnNpb246ICcwLjInLFxuICAgICAgICAgICAgcGhhc2VzOiB7XG4gICAgICAgICAgICAgIGJ1aWxkOiB7IGNvbW1hbmRzOiBbJ2xzJ10gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgIGJ1aWxkSW1hZ2U6IGNvZGVidWlsZC5MaW51eEdwdUJ1aWxkSW1hZ2UuYXdzRGVlcExlYXJuaW5nQ29udGFpbmVyc0ltYWdlKFxuICAgICAgICAgICAgICAnbXktcmVwbycsICdteS10YWcnLCAnMTIzNDU2Nzg5MDEyJyksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2VMaWtlKCdBV1M6OkNvZGVCdWlsZDo6UHJvamVjdCcsIHtcbiAgICAgICAgICBFbnZpcm9ubWVudDoge1xuICAgICAgICAgICAgQ29tcHV0ZVR5cGU6ICdCVUlMRF9HRU5FUkFMMV9MQVJHRScsXG4gICAgICAgICAgICBJbWFnZToge1xuICAgICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgICAgICAgICAnMTIzNDU2Nzg5MDEyLmRrci5lY3IuJyxcbiAgICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6UmVnaW9uJyB9LFxuICAgICAgICAgICAgICAgICcuJyxcbiAgICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6VVJMU3VmZml4JyB9LFxuICAgICAgICAgICAgICAgICcvbXktcmVwbzpteS10YWcnLFxuICAgICAgICAgICAgICBdXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlTGlrZSgnQVdTOjpJQU06OlBvbGljeScsIHtcbiAgICAgICAgICBQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICAgICAgU3RhdGVtZW50OiBhcnJheVdpdGgob2JqZWN0TGlrZSh7XG4gICAgICAgICAgICAgIEFjdGlvbjogW1xuICAgICAgICAgICAgICAgICdlY3I6QmF0Y2hDaGVja0xheWVyQXZhaWxhYmlsaXR5JyxcbiAgICAgICAgICAgICAgICAnZWNyOkdldERvd25sb2FkVXJsRm9yTGF5ZXInLFxuICAgICAgICAgICAgICAgICdlY3I6QmF0Y2hHZXRJbWFnZScsXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFJlc291cmNlOiB7XG4gICAgICAgICAgICAgICAgJ0ZuOjpKb2luJzogWycnLCBbXG4gICAgICAgICAgICAgICAgICAnYXJuOicsXG4gICAgICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6UGFydGl0aW9uJyB9LFxuICAgICAgICAgICAgICAgICAgJzplY3I6JyxcbiAgICAgICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpSZWdpb24nIH0sXG4gICAgICAgICAgICAgICAgICAnOjEyMzQ1Njc4OTAxMjpyZXBvc2l0b3J5L215LXJlcG8nLFxuICAgICAgICAgICAgICAgIF1dLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0ZXN0LmRvbmUoKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbn07XG4iXX0=