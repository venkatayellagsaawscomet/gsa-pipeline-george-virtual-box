"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const index_1 = require("../lib/index");
test('support resource with no properties', () => {
    const synthStack = mkStack({
        Resources: {
            SomeResource: {
                Type: 'Some::Resource',
            },
        },
    });
    expect(() => index_1.expect(synthStack).to(index_1.haveResource('Some::Resource'))).not.toThrowError();
});
test('haveResource tells you about mismatched fields', () => {
    const synthStack = mkStack({
        Resources: {
            SomeResource: {
                Type: 'Some::Resource',
                Properties: {
                    PropA: 'somevalue',
                },
            },
        },
    });
    expect(() => {
        index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
            PropA: 'othervalue',
        }));
    }).toThrowError(/PropA/);
});
test('haveResource value matching is strict by default', () => {
    const synthStack = mkStack({
        Resources: {
            SomeResource: {
                Type: 'Some::Resource',
                Properties: {
                    PropA: {
                        foo: 'somevalue',
                        bar: 'This is unexpected, so the value of PropA doesn\'t strictly match - it shouldn\'t pass',
                    },
                    PropB: 'This property is unexpected, but it\'s allowed',
                },
            },
        },
    });
    expect(() => {
        index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
            PropA: {
                foo: 'somevalue',
            },
        }));
    }).toThrowError(/PropA/);
});
test('haveResource allows to opt in value extension', () => {
    const synthStack = mkStack({
        Resources: {
            SomeResource: {
                Type: 'Some::Resource',
                Properties: {
                    PropA: {
                        foo: 'somevalue',
                        bar: 'Additional value is permitted, as we opted in',
                    },
                    PropB: 'Additional properties is always okay!',
                },
            },
        },
    });
    expect(() => index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
        PropA: {
            foo: 'somevalue',
        },
    }, undefined, true))).not.toThrowError();
});
describe('property absence', () => {
    test('pass on absence', () => {
        const synthStack = mkSomeResource({
            Prop: 'somevalue',
        });
        index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
            PropA: index_1.ABSENT,
        }));
    });
    test('fail on presence', () => {
        const synthStack = mkSomeResource({
            PropA: 3,
        });
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
                PropA: index_1.ABSENT,
            }));
        }).toThrowError(/PropA/);
    });
    test('pass on deep absence', () => {
        const synthStack = mkSomeResource({
            Deep: {
                Prop: 'somevalue',
            },
        });
        index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
            Deep: {
                Prop: 'somevalue',
                PropA: index_1.ABSENT,
            },
        }));
    });
    test('fail on deep presence', () => {
        const synthStack = mkSomeResource({
            Deep: {
                Prop: 'somevalue',
            },
        });
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
                Deep: {
                    Prop: index_1.ABSENT,
                },
            }));
        }).toThrowError(/Prop/);
    });
    test('can use matcher to test for list element', () => {
        const synthStack = mkSomeResource({
            List: [
                { Prop: 'distraction' },
                { Prop: 'goal' },
            ],
        });
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
                List: index_1.arrayWith({ Prop: 'goal' }),
            }));
        }).not.toThrowError();
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
                List: index_1.arrayWith({ Prop: 'missme' }),
            }));
        }).toThrowError(/Array did not contain expected element/);
    });
    test('arrayContaining must match all elements in any order', () => {
        const synthStack = mkSomeResource({
            List: ['a', 'b'],
        });
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
                List: index_1.arrayWith('b', 'a'),
            }));
        }).not.toThrowError();
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResource('Some::Resource', {
                List: index_1.arrayWith('a', 'c'),
            }));
        }).toThrowError(/Array did not contain expected element/);
    });
    test('exactValue escapes from deep fuzzy matching', () => {
        const synthStack = mkSomeResource({
            Deep: {
                PropA: 'A',
                PropB: 'B',
            },
        });
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResourceLike('Some::Resource', {
                Deep: {
                    PropA: 'A',
                },
            }));
        }).not.toThrowError();
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResourceLike('Some::Resource', {
                Deep: index_1.exactValue({
                    PropA: 'A',
                }),
            }));
        }).toThrowError(/Unexpected keys present in object/);
    });
    /**
     * Backwards compatibility test
     *
     * If we had designed this with a matcher library from the start, we probably wouldn't
     * have had this behavior, but here we are.
     *
     * Historically, when we do `haveResourceLike` (which maps to `objectContainingDeep`) with
     * a pattern containing lists of objects, the objects inside the list are also matched
     * as 'containing' keys (instead of having to completely 'match' the pattern objects).
     *
     * People will have written assertions depending on this behavior, so we have to maintain
     * it.
     */
    test('objectContainingDeep has deep effect through lists', () => {
        const synthStack = mkSomeResource({
            List: [
                {
                    PropA: 'A',
                    PropB: 'B',
                },
                {
                    PropA: 'A',
                    PropB: 'B',
                },
            ],
        });
        expect(() => {
            index_1.expect(synthStack).to(index_1.haveResourceLike('Some::Resource', {
                List: [
                    { PropA: 'A' },
                    { PropB: 'B' },
                ],
            }));
        }).not.toThrowError();
    });
});
function mkStack(template) {
    const assembly = new cxapi.CloudAssemblyBuilder();
    assembly.addArtifact('test', {
        type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format('123456789', 'us-west-2'),
        properties: {
            templateFile: 'template.json',
        },
    });
    fs_1.writeFileSync(path_1.join(assembly.outdir, 'template.json'), JSON.stringify(template));
    return assembly.buildAssembly().getStackByName('test');
}
function mkSomeResource(props) {
    return mkStack({
        Resources: {
            SomeResource: {
                Type: 'Some::Resource',
                Properties: props,
            },
        },
    });
}
//# sourceMappingURL=data:application/json;base64,