"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const route53 = require("@aws-cdk/aws-route53");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
test('apex domain selection by default', () => {
    const stack = new core_1.Stack();
    new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
    });
    expect(stack).toHaveResource('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        DomainValidationOptions: [{
                DomainName: 'test.example.com',
                ValidationDomain: 'example.com',
            }],
    });
});
test('validation domain can be overridden', () => {
    const stack = new core_1.Stack();
    new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        validationDomains: {
            'test.example.com': 'test.example.com',
        },
    });
    expect(stack).toHaveResource('AWS::CertificateManager::Certificate', {
        DomainValidationOptions: [{
                DomainName: 'test.example.com',
                ValidationDomain: 'test.example.com',
            }],
    });
});
test('export and import', () => {
    // GIVEN
    const stack = new core_1.Stack();
    // WHEN
    const c = lib_1.Certificate.fromCertificateArn(stack, 'Imported', 'cert-arn');
    // THEN
    expect(c.certificateArn).toBe('cert-arn');
});
test('can configure validation method', () => {
    const stack = new core_1.Stack();
    new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        validationMethod: lib_1.ValidationMethod.DNS,
    });
    expect(stack).toHaveResource('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        ValidationMethod: 'DNS',
    });
});
test('needs validation domain supplied if domain contains a token', () => {
    const stack = new core_1.Stack();
    expect(() => {
        const domainName = core_1.Lazy.stringValue({ produce: () => 'example.com' });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName,
        });
    }).toThrow(/'validationDomains' needs to be supplied/);
});
test('validationdomains can be given for a Token', () => {
    const stack = new core_1.Stack();
    const domainName = core_1.Lazy.stringValue({ produce: () => 'my.example.com' });
    new lib_1.Certificate(stack, 'Certificate', {
        domainName,
        validationDomains: {
            [domainName]: 'example.com',
        },
    });
    expect(stack).toHaveResource('AWS::CertificateManager::Certificate', {
        DomainName: 'my.example.com',
        DomainValidationOptions: [{
                DomainName: 'my.example.com',
                ValidationDomain: 'example.com',
            }],
    });
});
test('CertificateValidation.fromEmail', () => {
    const stack = new core_1.Stack();
    new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        subjectAlternativeNames: ['extra.example.com'],
        validation: lib_1.CertificateValidation.fromEmail({
            'test.example.com': 'example.com',
        }),
    });
    expect(stack).toHaveResource('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        SubjectAlternativeNames: ['extra.example.com'],
        DomainValidationOptions: [
            {
                DomainName: 'test.example.com',
                ValidationDomain: 'example.com',
            },
            {
                DomainName: 'extra.example.com',
                ValidationDomain: 'example.com',
            },
        ],
        ValidationMethod: 'EMAIL',
    });
});
describe('CertificateValidation.fromDns', () => {
    test('without a hosted zone', () => {
        const stack = new core_1.Stack();
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            subjectAlternativeNames: ['extra.example.com'],
            validation: lib_1.CertificateValidation.fromDns(),
        });
        expect(stack).toHaveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            SubjectAlternativeNames: ['extra.example.com'],
            ValidationMethod: 'DNS',
        });
    });
    test('with a hosted zone', () => {
        const stack = new core_1.Stack();
        const exampleCom = new route53.HostedZone(stack, 'ExampleCom', {
            zoneName: 'example.com',
        });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            validation: lib_1.CertificateValidation.fromDns(exampleCom),
        });
        expect(stack).toHaveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            DomainValidationOptions: [
                {
                    DomainName: 'test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
            ],
            ValidationMethod: 'DNS',
        });
    });
    test('with hosted zone and a wildcard name', () => {
        const stack = new core_1.Stack();
        const exampleCom = new route53.HostedZone(stack, 'ExampleCom', {
            zoneName: 'example.com',
        });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            validation: lib_1.CertificateValidation.fromDns(exampleCom),
            subjectAlternativeNames: ['*.test.example.com'],
        });
        //Wildcard domain names are de-duped.
        expect(stack).toHaveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            DomainValidationOptions: [
                {
                    DomainName: 'test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
            ],
            ValidationMethod: 'DNS',
        });
    });
    test('with hosted zone and multiple wildcard names', () => {
        const stack = new core_1.Stack();
        const exampleCom = new route53.HostedZone(stack, 'ExampleCom', {
            zoneName: 'example.com',
        });
        new lib_1.Certificate(stack, 'Certificate', {
            domainName: 'test.example.com',
            validation: lib_1.CertificateValidation.fromDns(exampleCom),
            subjectAlternativeNames: ['*.test.example.com', '*.foo.test.example.com', 'bar.test.example.com'],
        });
        //Wildcard domain names are de-duped.
        expect(stack).toHaveResource('AWS::CertificateManager::Certificate', {
            DomainName: 'test.example.com',
            DomainValidationOptions: [
                {
                    DomainName: 'test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
                {
                    DomainName: '*.foo.test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
                {
                    DomainName: 'bar.test.example.com',
                    HostedZoneId: {
                        Ref: 'ExampleCom20E1324B',
                    },
                },
            ],
            ValidationMethod: 'DNS',
        });
    });
});
test('CertificateValidation.fromDnsMultiZone', () => {
    const stack = new core_1.Stack();
    const exampleCom = new route53.HostedZone(stack, 'ExampleCom', {
        zoneName: 'example.com',
    });
    const exampleNet = new route53.HostedZone(stack, 'ExampleNet', {
        zoneName: 'example.com',
    });
    new lib_1.Certificate(stack, 'Certificate', {
        domainName: 'test.example.com',
        subjectAlternativeNames: ['cool.example.com', 'test.example.net'],
        validation: lib_1.CertificateValidation.fromDnsMultiZone({
            'test.example.com': exampleCom,
            'cool.example.com': exampleCom,
            'test.example.net': exampleNet,
        }),
    });
    expect(stack).toHaveResource('AWS::CertificateManager::Certificate', {
        DomainName: 'test.example.com',
        DomainValidationOptions: [
            {
                DomainName: 'test.example.com',
                HostedZoneId: {
                    Ref: 'ExampleCom20E1324B',
                },
            },
            {
                DomainName: 'cool.example.com',
                HostedZoneId: {
                    Ref: 'ExampleCom20E1324B',
                },
            },
            {
                DomainName: 'test.example.net',
                HostedZoneId: {
                    Ref: 'ExampleNetF7CA40C9',
                },
            },
        ],
        ValidationMethod: 'DNS',
    });
});
//# sourceMappingURL=data:application/json;base64,