"use strict";
const path = require("path");
const assert_1 = require("@aws-cdk/assert");
const aws_codeguruprofiler_1 = require("@aws-cdk/aws-codeguruprofiler");
const ec2 = require("@aws-cdk/aws-ec2");
const efs = require("@aws-cdk/aws-efs");
const logs = require("@aws-cdk/aws-logs");
const s3 = require("@aws-cdk/aws-s3");
const sqs = require("@aws-cdk/aws-sqs");
const cdk = require("@aws-cdk/core");
const _ = require("lodash");
const nodeunit_1 = require("nodeunit");
const lambda = require("../lib");
module.exports = nodeunit_1.testCase({
    'add incompatible layer'(test) {
        // GIVEN
        const stack = new cdk.Stack(undefined, 'TestStack');
        const bucket = new s3.Bucket(stack, 'Bucket');
        const code = new lambda.S3Code(bucket, 'ObjectKey');
        const func = new lambda.Function(stack, 'myFunc', {
            runtime: lambda.Runtime.PYTHON_3_7,
            handler: 'index.handler',
            code,
        });
        const layer = new lambda.LayerVersion(stack, 'myLayer', {
            code,
            compatibleRuntimes: [lambda.Runtime.NODEJS],
        });
        // THEN
        test.throws(() => func.addLayers(layer), /This lambda function uses a runtime that is incompatible with this layer/);
        test.done();
    },
    'add compatible layer'(test) {
        // GIVEN
        const stack = new cdk.Stack(undefined, 'TestStack');
        const bucket = new s3.Bucket(stack, 'Bucket');
        const code = new lambda.S3Code(bucket, 'ObjectKey');
        const func = new lambda.Function(stack, 'myFunc', {
            runtime: lambda.Runtime.PYTHON_3_7,
            handler: 'index.handler',
            code,
        });
        const layer = new lambda.LayerVersion(stack, 'myLayer', {
            code,
            compatibleRuntimes: [lambda.Runtime.PYTHON_3_7],
        });
        // THEN
        // should not throw
        func.addLayers(layer);
        test.done();
    },
    'add compatible layer for deep clone'(test) {
        // GIVEN
        const stack = new cdk.Stack(undefined, 'TestStack');
        const bucket = new s3.Bucket(stack, 'Bucket');
        const code = new lambda.S3Code(bucket, 'ObjectKey');
        const runtime = lambda.Runtime.PYTHON_3_7;
        const func = new lambda.Function(stack, 'myFunc', {
            runtime,
            handler: 'index.handler',
            code,
        });
        const clone = _.cloneDeep(runtime);
        const layer = new lambda.LayerVersion(stack, 'myLayer', {
            code,
            compatibleRuntimes: [clone],
        });
        // THEN
        // should not throw
        func.addLayers(layer);
        test.done();
    },
    'empty inline code is not allowed'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN/THEN
        test.throws(() => new lambda.Function(stack, 'fn', {
            handler: 'foo',
            runtime: lambda.Runtime.NODEJS_10_X,
            code: lambda.Code.fromInline(''),
        }), /Lambda inline code cannot be empty/);
        test.done();
    },
    'logGroup is correctly returned'(test) {
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'fn', {
            handler: 'foo',
            runtime: lambda.Runtime.NODEJS_10_X,
            code: lambda.Code.fromInline('foo'),
        });
        const logGroup = fn.logGroup;
        test.ok(logGroup.logGroupName);
        test.ok(logGroup.logGroupArn);
        test.done();
    },
    'dlq is returned when provided by user'(test) {
        const stack = new cdk.Stack();
        const dlQueue = new sqs.Queue(stack, 'DeadLetterQueue', {
            queueName: 'MyLambda_DLQ',
            retentionPeriod: cdk.Duration.days(14),
        });
        const fn = new lambda.Function(stack, 'fn', {
            handler: 'foo',
            runtime: lambda.Runtime.NODEJS_10_X,
            code: lambda.Code.fromInline('foo'),
            deadLetterQueue: dlQueue,
        });
        const deadLetterQueue = fn.deadLetterQueue;
        test.ok(deadLetterQueue === null || deadLetterQueue === void 0 ? void 0 : deadLetterQueue.queueArn);
        test.ok(deadLetterQueue === null || deadLetterQueue === void 0 ? void 0 : deadLetterQueue.queueName);
        test.ok(deadLetterQueue === null || deadLetterQueue === void 0 ? void 0 : deadLetterQueue.queueUrl);
        test.done();
    },
    'dlq is returned when setup by cdk'(test) {
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'fn', {
            handler: 'foo',
            runtime: lambda.Runtime.NODEJS_10_X,
            code: lambda.Code.fromInline('foo'),
            deadLetterQueueEnabled: true,
        });
        const deadLetterQueue = fn.deadLetterQueue;
        test.ok(deadLetterQueue === null || deadLetterQueue === void 0 ? void 0 : deadLetterQueue.queueArn);
        test.ok(deadLetterQueue === null || deadLetterQueue === void 0 ? void 0 : deadLetterQueue.queueName);
        test.ok(deadLetterQueue === null || deadLetterQueue === void 0 ? void 0 : deadLetterQueue.queueUrl);
        test.done();
    },
    'dlq is undefined when not setup'(test) {
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'fn', {
            handler: 'foo',
            runtime: lambda.Runtime.NODEJS_10_X,
            code: lambda.Code.fromInline('foo'),
        });
        const deadLetterQueue = fn.deadLetterQueue;
        test.ok(deadLetterQueue === undefined);
        test.done();
    },
    'one and only one child LogRetention construct will be created'(test) {
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'fn', {
            handler: 'foo',
            runtime: lambda.Runtime.NODEJS_10_X,
            code: lambda.Code.fromInline('foo'),
            logRetention: logs.RetentionDays.FIVE_DAYS,
        });
        // Call logGroup a few times. If more than one instance of LogRetention was created,
        // the second call will fail on duplicate constructs.
        fn.logGroup;
        fn.logGroup;
        fn.logGroup;
        test.done();
    },
    'fails when inline code is specified on an incompatible runtime'(test) {
        const stack = new cdk.Stack();
        test.throws(() => new lambda.Function(stack, 'fn', {
            handler: 'foo',
            runtime: lambda.Runtime.PROVIDED,
            code: lambda.Code.fromInline('foo'),
        }), /Inline source not allowed for/);
        test.done();
    },
    'default function with CDK created Profiling Group'(test) {
        const stack = new cdk.Stack();
        new lambda.Function(stack, 'MyLambda', {
            code: new lambda.InlineCode('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
            profiling: true,
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CodeGuruProfiler::ProfilingGroup', {
            ProfilingGroupName: 'MyLambdaProfilingGroupC5B6CCD8',
            ComputePlatform: 'AWSLambda',
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: [
                            'codeguru-profiler:ConfigureAgent',
                            'codeguru-profiler:PostAgentProfile',
                        ],
                        Effect: 'Allow',
                        Resource: {
                            'Fn::GetAtt': ['MyLambdaProfilingGroupEC6DE32F', 'Arn'],
                        },
                    },
                ],
                Version: '2012-10-17',
            },
            PolicyName: 'MyLambdaServiceRoleDefaultPolicy5BBC6F68',
            Roles: [
                {
                    Ref: 'MyLambdaServiceRole4539ECB6',
                },
            ],
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Function', {
            Environment: {
                Variables: {
                    AWS_CODEGURU_PROFILER_GROUP_ARN: { 'Fn::GetAtt': ['MyLambdaProfilingGroupEC6DE32F', 'Arn'] },
                    AWS_CODEGURU_PROFILER_ENABLED: 'TRUE',
                },
            },
        }));
        test.done();
    },
    'default function with client provided Profiling Group'(test) {
        const stack = new cdk.Stack();
        new lambda.Function(stack, 'MyLambda', {
            code: new lambda.InlineCode('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
            profilingGroup: new aws_codeguruprofiler_1.ProfilingGroup(stack, 'ProfilingGroup'),
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: [
                    {
                        Action: [
                            'codeguru-profiler:ConfigureAgent',
                            'codeguru-profiler:PostAgentProfile',
                        ],
                        Effect: 'Allow',
                        Resource: {
                            'Fn::GetAtt': ['ProfilingGroup26979FD7', 'Arn'],
                        },
                    },
                ],
                Version: '2012-10-17',
            },
            PolicyName: 'MyLambdaServiceRoleDefaultPolicy5BBC6F68',
            Roles: [
                {
                    Ref: 'MyLambdaServiceRole4539ECB6',
                },
            ],
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Function', {
            Environment: {
                Variables: {
                    AWS_CODEGURU_PROFILER_GROUP_ARN: {
                        'Fn::Join': [
                            '',
                            [
                                'arn:', { Ref: 'AWS::Partition' }, ':codeguru-profiler:', { Ref: 'AWS::Region' },
                                ':', { Ref: 'AWS::AccountId' }, ':profilingGroup/', { Ref: 'ProfilingGroup26979FD7' },
                            ],
                        ],
                    },
                    AWS_CODEGURU_PROFILER_ENABLED: 'TRUE',
                },
            },
        }));
        test.done();
    },
    'default function with client provided Profiling Group but profiling set to false'(test) {
        const stack = new cdk.Stack();
        new lambda.Function(stack, 'MyLambda', {
            code: new lambda.InlineCode('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
            profiling: false,
            profilingGroup: new aws_codeguruprofiler_1.ProfilingGroup(stack, 'ProfilingGroup'),
        });
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::IAM::Policy'));
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::Lambda::Function', {
            Environment: {
                Variables: {
                    AWS_CODEGURU_PROFILER_GROUP_ARN: {
                        'Fn::Join': [
                            '',
                            [
                                'arn:', { Ref: 'AWS::Partition' }, ':codeguru-profiler:', { Ref: 'AWS::Region' },
                                ':', { Ref: 'AWS::AccountId' }, ':profilingGroup/', { Ref: 'ProfilingGroup26979FD7' },
                            ],
                        ],
                    },
                    AWS_CODEGURU_PROFILER_ENABLED: 'TRUE',
                },
            },
        }));
        test.done();
    },
    'default function with profiling enabled and client provided env vars'(test) {
        const stack = new cdk.Stack();
        test.throws(() => new lambda.Function(stack, 'MyLambda', {
            code: new lambda.InlineCode('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
            profiling: true,
            environment: {
                AWS_CODEGURU_PROFILER_GROUP_ARN: 'profiler_group_arn',
                AWS_CODEGURU_PROFILER_ENABLED: 'yes',
            },
        }), /AWS_CODEGURU_PROFILER_GROUP_ARN and AWS_CODEGURU_PROFILER_ENABLED must not be set when profiling options enabled/);
        test.done();
    },
    'default function with client provided Profiling Group and client provided env vars'(test) {
        const stack = new cdk.Stack();
        test.throws(() => new lambda.Function(stack, 'MyLambda', {
            code: new lambda.InlineCode('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_10_X,
            profilingGroup: new aws_codeguruprofiler_1.ProfilingGroup(stack, 'ProfilingGroup'),
            environment: {
                AWS_CODEGURU_PROFILER_GROUP_ARN: 'profiler_group_arn',
                AWS_CODEGURU_PROFILER_ENABLED: 'yes',
            },
        }), /AWS_CODEGURU_PROFILER_GROUP_ARN and AWS_CODEGURU_PROFILER_ENABLED must not be set when profiling options enabled/);
        test.done();
    },
    'multiple calls to latestVersion returns the same version'(test) {
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'MyLambda', {
            code: new lambda.InlineCode('hello()'),
            handler: 'index.hello',
            runtime: lambda.Runtime.NODEJS_10_X,
        });
        const version1 = fn.latestVersion;
        const version2 = fn.latestVersion;
        const expectedArn = {
            'Fn::Join': ['', [
                    { 'Fn::GetAtt': ['MyLambdaCCE802FB', 'Arn'] },
                    ':$LATEST',
                ]],
        };
        test.equal(version1, version2);
        test.deepEqual(stack.resolve(version1.functionArn), expectedArn);
        test.deepEqual(stack.resolve(version2.functionArn), expectedArn);
        test.done();
    },
    'currentVersion': {
        // see test.function-hash.ts for more coverage for this
        'logical id of version is based on the function hash'(test) {
            // GIVEN
            const stack1 = new cdk.Stack();
            const fn1 = new lambda.Function(stack1, 'MyFunction', {
                handler: 'foo',
                runtime: lambda.Runtime.NODEJS_12_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                environment: {
                    FOO: 'bar',
                },
            });
            const stack2 = new cdk.Stack();
            const fn2 = new lambda.Function(stack2, 'MyFunction', {
                handler: 'foo',
                runtime: lambda.Runtime.NODEJS_12_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                environment: {
                    FOO: 'bear',
                },
            });
            // WHEN
            new cdk.CfnOutput(stack1, 'CurrentVersionArn', {
                value: fn1.currentVersion.functionArn,
            });
            new cdk.CfnOutput(stack2, 'CurrentVersionArn', {
                value: fn2.currentVersion.functionArn,
            });
            // THEN
            const template1 = assert_1.SynthUtils.synthesize(stack1).template;
            const template2 = assert_1.SynthUtils.synthesize(stack2).template;
            // these functions are different in their configuration but the original
            // logical ID of the version would be the same unless the logical ID
            // includes the hash of function's configuration.
            test.notDeepEqual(template1.Outputs.CurrentVersionArn.Value, template2.Outputs.CurrentVersionArn.Value);
            test.done();
        },
    },
    'filesystem': {
        'mount efs filesystem'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'Vpc', {
                maxAzs: 3,
                natGateways: 1,
            });
            const fs = new efs.FileSystem(stack, 'Efs', {
                vpc,
            });
            const accessPoint = fs.addAccessPoint('AccessPoint');
            // WHEN
            new lambda.Function(stack, 'MyFunction', {
                handler: 'foo',
                runtime: lambda.Runtime.NODEJS_12_X,
                code: lambda.Code.fromAsset(path.join(__dirname, 'handler.zip')),
                filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Function', {
                FileSystemConfigs: [
                    {
                        Arn: {
                            'Fn::Join': [
                                '',
                                [
                                    'arn:',
                                    {
                                        Ref: 'AWS::Partition',
                                    },
                                    ':elasticfilesystem:',
                                    {
                                        Ref: 'AWS::Region',
                                    },
                                    ':',
                                    {
                                        Ref: 'AWS::AccountId',
                                    },
                                    ':access-point/',
                                    {
                                        Ref: 'EfsAccessPointE419FED9',
                                    },
                                ],
                            ],
                        },
                        LocalMountPath: '/mnt/msg',
                    },
                ],
            }));
            test.done();
        },
    },
});
//# sourceMappingURL=data:application/json;base64,