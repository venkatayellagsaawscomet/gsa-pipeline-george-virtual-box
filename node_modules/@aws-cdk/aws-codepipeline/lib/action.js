"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalVariables = exports.ActionCategory = void 0;
var ActionCategory;
(function (ActionCategory) {
    ActionCategory["SOURCE"] = "Source";
    ActionCategory["BUILD"] = "Build";
    ActionCategory["TEST"] = "Test";
    ActionCategory["APPROVAL"] = "Approval";
    ActionCategory["DEPLOY"] = "Deploy";
    ActionCategory["INVOKE"] = "Invoke";
})(ActionCategory = exports.ActionCategory || (exports.ActionCategory = {}));
/**
 * The CodePipeline variables that are global,
 * not bound to a specific action.
 * This class defines a bunch of static fields that represent the different variables.
 * These can be used can be used in any action configuration.
 */
class GlobalVariables {
}
exports.GlobalVariables = GlobalVariables;
/** The identifier of the current pipeline execution. */
GlobalVariables.executionId = '#{codepipeline.PipelineExecutionId}';
//# sourceMappingURL=data:application/json;base64,