"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const nodeunit_shim_1 = require("nodeunit-shim");
const codepipeline = require("../lib");
const fake_build_action_1 = require("./fake-build-action");
const fake_source_action_1 = require("./fake-source-action");
/* eslint-disable quote-props */
nodeunit_shim_1.nodeunitShim({
    'Pipeline Variables': {
        'uses the passed namespace when its passed when constructing the Action'(test) {
            const stack = new cdk.Stack();
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [new fake_source_action_1.FakeSourceAction({
                                actionName: 'Source',
                                output: new codepipeline.Artifact(),
                                variablesNamespace: 'MyNamespace',
                            })],
                    },
                ],
            });
            assert_1.expect(stack, true).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                        'Actions': [
                            {
                                'Name': 'Source',
                                'Namespace': 'MyNamespace',
                            },
                        ],
                    },
                ],
            }));
            test.done();
        },
        'allows using the variable in the configuration of a different action'(test) {
            const stack = new cdk.Stack();
            const sourceOutput = new codepipeline.Artifact();
            const fakeSourceAction = new fake_source_action_1.FakeSourceAction({
                actionName: 'Source',
                output: sourceOutput,
                variablesNamespace: 'SourceVariables',
            });
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [fakeSourceAction],
                    },
                    {
                        stageName: 'Build',
                        actions: [new fake_build_action_1.FakeBuildAction({
                                actionName: 'Build',
                                input: sourceOutput,
                                customConfigKey: fakeSourceAction.variables.firstVariable,
                            })],
                    },
                ],
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                    },
                    {
                        'Name': 'Build',
                        'Actions': [
                            {
                                'Name': 'Build',
                                'Configuration': {
                                    'CustomConfigKey': '#{SourceVariables.FirstVariable}',
                                },
                            },
                        ],
                    },
                ],
            }));
            test.done();
        },
        'fails when trying add an action using variables with an empty string for the namespace to a pipeline'(test) {
            const stack = new cdk.Stack();
            const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
            const sourceStage = pipeline.addStage({ stageName: 'Source' });
            const sourceAction = new fake_source_action_1.FakeSourceAction({
                actionName: 'Source',
                output: new codepipeline.Artifact(),
                variablesNamespace: '',
            });
            test.throws(() => {
                sourceStage.addAction(sourceAction);
            }, /Namespace name must match regular expression:/);
            test.done();
        },
        'can use global variables'(test) {
            const stack = new cdk.Stack();
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [new fake_build_action_1.FakeBuildAction({
                                actionName: 'Build',
                                input: new codepipeline.Artifact(),
                                customConfigKey: codepipeline.GlobalVariables.executionId,
                            })],
                    },
                ],
            });
            assert_1.expect(stack, true).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                        'Actions': [
                            {
                                'Name': 'Build',
                                'Configuration': {
                                    'CustomConfigKey': '#{codepipeline.PipelineExecutionId}',
                                },
                            },
                        ],
                    },
                ],
            }));
            test.done();
        },
    },
});
//# sourceMappingURL=data:application/json;base64,