"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
let stack;
let vpc;
let fileSystem;
beforeEach(() => {
    stack = new core_1.Stack();
    vpc = new ec2.Vpc(stack, 'VPC');
    fileSystem = new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
    });
});
test('addAccessPoint correctly', () => {
    // WHEN
    fileSystem.addAccessPoint('MyAccessPoint');
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::AccessPoint'));
});
test('new AccessPoint correctly', () => {
    // WHEN
    new lib_1.AccessPoint(stack, 'MyAccessPoint', {
        fileSystem,
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::AccessPoint'));
});
test('import correctly', () => {
    // WHEN
    const ap = new lib_1.AccessPoint(stack, 'MyAccessPoint', {
        fileSystem,
    });
    const imported = lib_1.AccessPoint.fromAccessPointId(stack, 'ImportedAccessPoint', ap.accessPointId);
    // THEN
    expect(imported.accessPointId).toEqual(ap.accessPointId);
});
test('custom access point is created correctly', () => {
    // WHEN
    new lib_1.AccessPoint(stack, 'MyAccessPoint', {
        fileSystem,
        createAcl: {
            ownerGid: '1000',
            ownerUid: '1000',
            permissions: '755',
        },
        path: '/export/share',
        posixUser: {
            gid: '1000',
            uid: '1000',
            secondaryGids: [
                '1001',
                '1002',
            ],
        },
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::AccessPoint', {
        FileSystemId: {
            Ref: 'EfsFileSystem37910666',
        },
        PosixUser: {
            Gid: '1000',
            SecondaryGids: [
                '1001',
                '1002',
            ],
            Uid: '1000',
        },
        RootDirectory: {
            CreationInfo: {
                OwnerGid: '1000',
                OwnerUid: '1000',
                Permissions: '755',
            },
            Path: '/export/share',
        },
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzLXBvaW50LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhY2Nlc3MtcG9pbnQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRDQUFvRTtBQUNwRSx3Q0FBd0M7QUFDeEMsd0NBQXNDO0FBQ3RDLGdDQUFpRDtBQUVqRCxJQUFJLEtBQVksQ0FBQztBQUNqQixJQUFJLEdBQVksQ0FBQztBQUNqQixJQUFJLFVBQXNCLENBQUM7QUFFM0IsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLEtBQUssR0FBRyxJQUFJLFlBQUssRUFBRSxDQUFDO0lBQ3BCLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLFVBQVUsR0FBRyxJQUFJLGdCQUFVLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRTtRQUNsRCxHQUFHO0tBQ0osQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLE9BQU87SUFDUCxVQUFVLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzNDLE9BQU87SUFDUCxlQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtJQUNyQyxPQUFPO0lBQ1AsSUFBSSxpQkFBVyxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUU7UUFDdEMsVUFBVTtLQUNYLENBQUMsQ0FBQztJQUNILE9BQU87SUFDUCxlQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUM1QixPQUFPO0lBQ1AsTUFBTSxFQUFFLEdBQUcsSUFBSSxpQkFBVyxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUU7UUFDakQsVUFBVTtLQUNYLENBQUMsQ0FBQztJQUNILE1BQU0sUUFBUSxHQUFHLGlCQUFXLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvRixPQUFPO0lBQ1AsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzNELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtJQUNwRCxPQUFPO0lBQ1AsSUFBSSxpQkFBVyxDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUU7UUFDdEMsVUFBVTtRQUNWLFNBQVMsRUFBRTtZQUNULFFBQVEsRUFBRSxNQUFNO1lBQ2hCLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLFdBQVcsRUFBRSxLQUFLO1NBQ25CO1FBQ0QsSUFBSSxFQUFFLGVBQWU7UUFDckIsU0FBUyxFQUFFO1lBQ1QsR0FBRyxFQUFFLE1BQU07WUFDWCxHQUFHLEVBQUUsTUFBTTtZQUNYLGFBQWEsRUFBRTtnQkFDYixNQUFNO2dCQUNOLE1BQU07YUFDUDtTQUNGO0tBRUYsQ0FBQyxDQUFDO0lBQ0gsT0FBTztJQUNQLGVBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyx1QkFBdUIsRUFBRTtRQUN4RCxZQUFZLEVBQUU7WUFDWixHQUFHLEVBQUUsdUJBQXVCO1NBQzdCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsR0FBRyxFQUFFLE1BQU07WUFDWCxhQUFhLEVBQUU7Z0JBQ2IsTUFBTTtnQkFDTixNQUFNO2FBQ1A7WUFDRCxHQUFHLEVBQUUsTUFBTTtTQUNaO1FBQ0QsYUFBYSxFQUFFO1lBQ2IsWUFBWSxFQUFFO2dCQUNaLFFBQVEsRUFBRSxNQUFNO2dCQUNoQixRQUFRLEVBQUUsTUFBTTtnQkFDaEIsV0FBVyxFQUFFLEtBQUs7YUFDbkI7WUFDRCxJQUFJLEVBQUUsZUFBZTtTQUN0QjtLQUNGLENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QgYXMgZXhwZWN0Q0RLLCBoYXZlUmVzb3VyY2UgfSBmcm9tICdAYXdzLWNkay9hc3NlcnQnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJ0Bhd3MtY2RrL2F3cy1lYzInO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IEFjY2Vzc1BvaW50LCBGaWxlU3lzdGVtIH0gZnJvbSAnLi4vbGliJztcblxubGV0IHN0YWNrOiBTdGFjaztcbmxldCB2cGM6IGVjMi5WcGM7XG5sZXQgZmlsZVN5c3RlbTogRmlsZVN5c3RlbTtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gIHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gIGZpbGVTeXN0ZW0gPSBuZXcgRmlsZVN5c3RlbShzdGFjaywgJ0Vmc0ZpbGVTeXN0ZW0nLCB7XG4gICAgdnBjLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdhZGRBY2Nlc3NQb2ludCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgZmlsZVN5c3RlbS5hZGRBY2Nlc3NQb2ludCgnTXlBY2Nlc3NQb2ludCcpO1xuICAvLyBUSEVOXG4gIGV4cGVjdENESyhzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkVGUzo6QWNjZXNzUG9pbnQnKSk7XG59KTtcblxudGVzdCgnbmV3IEFjY2Vzc1BvaW50IGNvcnJlY3RseScsICgpID0+IHtcbiAgLy8gV0hFTlxuICBuZXcgQWNjZXNzUG9pbnQoc3RhY2ssICdNeUFjY2Vzc1BvaW50Jywge1xuICAgIGZpbGVTeXN0ZW0sXG4gIH0pO1xuICAvLyBUSEVOXG4gIGV4cGVjdENESyhzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkVGUzo6QWNjZXNzUG9pbnQnKSk7XG59KTtcblxudGVzdCgnaW1wb3J0IGNvcnJlY3RseScsICgpID0+IHtcbiAgLy8gV0hFTlxuICBjb25zdCBhcCA9IG5ldyBBY2Nlc3NQb2ludChzdGFjaywgJ015QWNjZXNzUG9pbnQnLCB7XG4gICAgZmlsZVN5c3RlbSxcbiAgfSk7XG4gIGNvbnN0IGltcG9ydGVkID0gQWNjZXNzUG9pbnQuZnJvbUFjY2Vzc1BvaW50SWQoc3RhY2ssICdJbXBvcnRlZEFjY2Vzc1BvaW50JywgYXAuYWNjZXNzUG9pbnRJZCk7XG4gIC8vIFRIRU5cbiAgZXhwZWN0KGltcG9ydGVkLmFjY2Vzc1BvaW50SWQpLnRvRXF1YWwoYXAuYWNjZXNzUG9pbnRJZCk7XG59KTtcblxudGVzdCgnY3VzdG9tIGFjY2VzcyBwb2ludCBpcyBjcmVhdGVkIGNvcnJlY3RseScsICgpID0+IHtcbiAgLy8gV0hFTlxuICBuZXcgQWNjZXNzUG9pbnQoc3RhY2ssICdNeUFjY2Vzc1BvaW50Jywge1xuICAgIGZpbGVTeXN0ZW0sXG4gICAgY3JlYXRlQWNsOiB7XG4gICAgICBvd25lckdpZDogJzEwMDAnLFxuICAgICAgb3duZXJVaWQ6ICcxMDAwJyxcbiAgICAgIHBlcm1pc3Npb25zOiAnNzU1JyxcbiAgICB9LFxuICAgIHBhdGg6ICcvZXhwb3J0L3NoYXJlJyxcbiAgICBwb3NpeFVzZXI6IHtcbiAgICAgIGdpZDogJzEwMDAnLFxuICAgICAgdWlkOiAnMTAwMCcsXG4gICAgICBzZWNvbmRhcnlHaWRzOiBbXG4gICAgICAgICcxMDAxJyxcbiAgICAgICAgJzEwMDInLFxuICAgICAgXSxcbiAgICB9LFxuXG4gIH0pO1xuICAvLyBUSEVOXG4gIGV4cGVjdENESyhzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkVGUzo6QWNjZXNzUG9pbnQnLCB7XG4gICAgRmlsZVN5c3RlbUlkOiB7XG4gICAgICBSZWY6ICdFZnNGaWxlU3lzdGVtMzc5MTA2NjYnLFxuICAgIH0sXG4gICAgUG9zaXhVc2VyOiB7XG4gICAgICBHaWQ6ICcxMDAwJyxcbiAgICAgIFNlY29uZGFyeUdpZHM6IFtcbiAgICAgICAgJzEwMDEnLFxuICAgICAgICAnMTAwMicsXG4gICAgICBdLFxuICAgICAgVWlkOiAnMTAwMCcsXG4gICAgfSxcbiAgICBSb290RGlyZWN0b3J5OiB7XG4gICAgICBDcmVhdGlvbkluZm86IHtcbiAgICAgICAgT3duZXJHaWQ6ICcxMDAwJyxcbiAgICAgICAgT3duZXJVaWQ6ICcxMDAwJyxcbiAgICAgICAgUGVybWlzc2lvbnM6ICc3NTUnLFxuICAgICAgfSxcbiAgICAgIFBhdGg6ICcvZXhwb3J0L3NoYXJlJyxcbiAgICB9LFxuICB9KSk7XG59KTsiXX0=