"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../lib");
module.exports = {
    'log retention construct'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_MONTH,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {
                        'Action': [
                            'logs:PutRetentionPolicy',
                            'logs:DeleteRetentionPolicy',
                        ],
                        'Effect': 'Allow',
                        'Resource': '*',
                    },
                ],
                'Version': '2012-10-17',
            },
            'PolicyName': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB',
            'Roles': [
                {
                    'Ref': 'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB',
                },
            ],
        }));
        assert_1.expect(stack).to(assert_1.haveResource('Custom::LogRetention', {
            'ServiceToken': {
                'Fn::GetAtt': [
                    'LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A',
                    'Arn',
                ],
            },
            'LogGroupName': 'group',
            'RetentionInDays': 30,
        }));
        test.done();
    },
    'with imported role'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const role = iam.Role.fromRoleArn(stack, 'Role', 'arn:aws:iam::123456789012:role/CoolRole');
        // WHEN
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_MONTH,
            role,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            'PolicyDocument': {
                'Statement': [
                    {
                        'Action': [
                            'logs:PutRetentionPolicy',
                            'logs:DeleteRetentionPolicy',
                        ],
                        'Effect': 'Allow',
                        'Resource': '*',
                    },
                ],
                'Version': '2012-10-17',
            },
            'PolicyName': 'RolePolicy72E7D967',
            'Roles': [
                'CoolRole',
            ],
        }));
        assert_1.expect(stack).to(assert_1.countResources('AWS::IAM::Role', 0));
        test.done();
    },
    'with RetentionPeriod set to Infinity'(test) {
        const stack = new cdk.Stack();
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.INFINITE,
        });
        assert_1.expect(stack).to(assert_1.haveResource('Custom::LogRetention', {
            RetentionInDays: assert_1.ABSENT,
        }));
        test.done();
    },
    'with LogGroupRegion specified'(test) {
        const stack = new cdk.Stack();
        new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            logGroupRegion: 'us-east-1',
            retention: lib_1.RetentionDays.INFINITE,
        });
        assert_1.expect(stack).to(assert_1.haveResource('Custom::LogRetention', {
            LogGroupRegion: 'us-east-1',
        }));
        test.done();
    },
    'log group ARN is well formed and conforms'(test) {
        const stack = new cdk.Stack();
        const group = new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            retention: lib_1.RetentionDays.ONE_MONTH,
        });
        const logGroupArn = group.logGroupArn;
        test.ok(logGroupArn.indexOf('logs') > -1, 'log group ARN is not as expected');
        test.ok(logGroupArn.indexOf('log-group') > -1, 'log group ARN is not as expected');
        test.ok(logGroupArn.endsWith(':*'), 'log group ARN is not as expected');
        test.done();
    },
    'log group ARN is well formed and conforms when region is specified'(test) {
        const stack = new cdk.Stack();
        const group = new lib_1.LogRetention(stack, 'MyLambda', {
            logGroupName: 'group',
            logGroupRegion: 'us-west-2',
            retention: lib_1.RetentionDays.ONE_MONTH,
        });
        const logGroupArn = group.logGroupArn;
        test.ok(logGroupArn.indexOf('us-west-2') > -1, 'region of log group ARN is not as expected');
        test.ok(logGroupArn.indexOf('logs') > -1, 'log group ARN is not as expected');
        test.ok(logGroupArn.indexOf('log-group') > -1, 'log group ARN is not as expected');
        test.ok(logGroupArn.endsWith(':*'), 'log group ARN is not as expected');
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,