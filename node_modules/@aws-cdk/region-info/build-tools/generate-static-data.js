"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-extra");
const default_1 = require("../lib/default");
const aws_entities_1 = require("./aws-entities");
const fact_tables_1 = require("./fact-tables");
async function main() {
    const lines = [
        "import { Fact, FactName } from './fact';",
        '',
        '/* eslint-disable quote-props */',
        '/* eslint-disable max-len */',
        '',
        '/**',
        ' * Built-in regional information, re-generated by `npm run build`.',
        ' *',
        ` * @generated ${new Date().toISOString()}`,
        ' */',
        'export class BuiltIns {',
        '  /**',
        '   * Registers all the built in regional data in the RegionInfo database.',
        '   */',
        '  public static register(): void {',
    ];
    const defaultMap = 'default';
    for (const region of aws_entities_1.AWS_REGIONS) {
        let partition = fact_tables_1.PARTITION_MAP[defaultMap].partition;
        let domainSuffix = fact_tables_1.PARTITION_MAP[defaultMap].domainSuffix;
        for (const key in fact_tables_1.PARTITION_MAP) {
            if (region.startsWith(key)) {
                partition = fact_tables_1.PARTITION_MAP[key].partition;
                domainSuffix = fact_tables_1.PARTITION_MAP[key].domainSuffix;
            }
        }
        registerFact(region, 'PARTITION', partition);
        registerFact(region, 'DOMAIN_SUFFIX', domainSuffix);
        registerFact(region, 'CDK_METADATA_RESOURCE_AVAILABLE', fact_tables_1.AWS_CDK_METADATA.has(region) ? 'YES' : 'NO');
        registerFact(region, 'S3_STATIC_WEBSITE_ENDPOINT', fact_tables_1.AWS_OLDER_REGIONS.has(region)
            ? `s3-website-${region}.${domainSuffix}`
            : `s3-website.${region}.${domainSuffix}`);
        registerFact(region, 'S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID', fact_tables_1.ROUTE_53_BUCKET_WEBSITE_ZONE_IDS[region] || '');
        registerFact(region, 'ELBV2_ACCOUNT', fact_tables_1.ELBV2_ACCOUNTS[region]);
        registerFact(region, 'DLC_REPOSITORY_ACCOUNT', fact_tables_1.DLC_REPOSITORY_ACCOUNTS[region]);
        const vpcEndpointServiceNamePrefix = `${domainSuffix.split('.').reverse().join('.')}.vpce`;
        registerFact(region, 'VPC_ENDPOINT_SERVICE_NAME_PREFIX', vpcEndpointServiceNamePrefix);
        for (const service of aws_entities_1.AWS_SERVICES) {
            registerFact(region, ['servicePrincipal', service], default_1.Default.servicePrincipal(service, region, domainSuffix));
        }
    }
    lines.push('  }');
    lines.push('');
    lines.push('  private constructor() {}');
    lines.push('}');
    await fs.writeFile(path.resolve(__dirname, '..', 'lib', 'built-ins.generated.ts'), lines.join('\n'));
    function registerFact(region, name, value) {
        const factName = typeof name === 'string' ? name : `${name[0]}(${name.slice(1).map(s => JSON.stringify(s)).join(', ')})`;
        lines.push(`    Fact.register({ region: ${JSON.stringify(region)}, name: FactName.${factName}, value: ${JSON.stringify(value)} });`);
    }
}
main().catch(e => {
    // eslint-disable-next-line no-console
    console.error(e);
    process.exit(-1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtc3RhdGljLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnZW5lcmF0ZS1zdGF0aWMtZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QiwrQkFBK0I7QUFDL0IsNENBQXlDO0FBQ3pDLGlEQUEyRDtBQUMzRCwrQ0FHdUI7QUFFdkIsS0FBSyxVQUFVLElBQUk7SUFDakIsTUFBTSxLQUFLLEdBQUc7UUFDWiwwQ0FBMEM7UUFDMUMsRUFBRTtRQUNGLGtDQUFrQztRQUNsQyw4QkFBOEI7UUFDOUIsRUFBRTtRQUNGLEtBQUs7UUFDTCxvRUFBb0U7UUFDcEUsSUFBSTtRQUNKLGlCQUFpQixJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFO1FBQzNDLEtBQUs7UUFDTCx5QkFBeUI7UUFDekIsT0FBTztRQUNQLDJFQUEyRTtRQUMzRSxPQUFPO1FBQ1Asb0NBQW9DO0tBQ3JDLENBQUM7SUFFRixNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFFN0IsS0FBSyxNQUFNLE1BQU0sSUFBSSwwQkFBVyxFQUFFO1FBQ2hDLElBQUksU0FBUyxHQUFHLDJCQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3BELElBQUksWUFBWSxHQUFHLDJCQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWSxDQUFDO1FBRTFELEtBQUssTUFBTSxHQUFHLElBQUksMkJBQWEsRUFBRTtZQUMvQixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzFCLFNBQVMsR0FBRywyQkFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQztnQkFDekMsWUFBWSxHQUFHLDJCQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDO2FBQ2hEO1NBQ0Y7UUFFRCxZQUFZLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM3QyxZQUFZLENBQUMsTUFB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IGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgRGVmYXVsdCB9IGZyb20gJy4uL2xpYi9kZWZhdWx0JztcbmltcG9ydCB7IEFXU19SRUdJT05TLCBBV1NfU0VSVklDRVMgfSBmcm9tICcuL2F3cy1lbnRpdGllcyc7XG5pbXBvcnQge1xuICBBV1NfQ0RLX01FVEFEQVRBLCBBV1NfT0xERVJfUkVHSU9OUywgRExDX1JFUE9TSVRPUllfQUNDT1VOVFMsIEVMQlYyX0FDQ09VTlRTLCBQQVJUSVRJT05fTUFQLFxuICBST1VURV81M19CVUNLRVRfV0VCU0lURV9aT05FX0lEUyxcbn0gZnJvbSAnLi9mYWN0LXRhYmxlcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGxpbmVzID0gW1xuICAgIFwiaW1wb3J0IHsgRmFjdCwgRmFjdE5hbWUgfSBmcm9tICcuL2ZhY3QnO1wiLFxuICAgICcnLFxuICAgICcvKiBlc2xpbnQtZGlzYWJsZSBxdW90ZS1wcm9wcyAqLycsXG4gICAgJy8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi8nLFxuICAgICcnLFxuICAgICcvKionLFxuICAgICcgKiBCdWlsdC1pbiByZWdpb25hbCBpbmZvcm1hdGlvbiwgcmUtZ2VuZXJhdGVkIGJ5IGBucG0gcnVuIGJ1aWxkYC4nLFxuICAgICcgKicsXG4gICAgYCAqIEBnZW5lcmF0ZWQgJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YCxcbiAgICAnICovJyxcbiAgICAnZXhwb3J0IGNsYXNzIEJ1aWx0SW5zIHsnLFxuICAgICcgIC8qKicsXG4gICAgJyAgICogUmVnaXN0ZXJzIGFsbCB0aGUgYnVpbHQgaW4gcmVnaW9uYWwgZGF0YSBpbiB0aGUgUmVnaW9uSW5mbyBkYXRhYmFzZS4nLFxuICAgICcgICAqLycsXG4gICAgJyAgcHVibGljIHN0YXRpYyByZWdpc3RlcigpOiB2b2lkIHsnLFxuICBdO1xuXG4gIGNvbnN0IGRlZmF1bHRNYXAgPSAnZGVmYXVsdCc7XG5cbiAgZm9yIChjb25zdCByZWdpb24gb2YgQVdTX1JFR0lPTlMpIHtcbiAgICBsZXQgcGFydGl0aW9uID0gUEFSVElUSU9OX01BUFtkZWZhdWx0TWFwXS5wYXJ0aXRpb247XG4gICAgbGV0IGRvbWFpblN1ZmZpeCA9IFBBUlRJVElPTl9NQVBbZGVmYXVsdE1hcF0uZG9tYWluU3VmZml4O1xuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gUEFSVElUSU9OX01BUCkge1xuICAgICAgaWYgKHJlZ2lvbi5zdGFydHNXaXRoKGtleSkpIHtcbiAgICAgICAgcGFydGl0aW9uID0gUEFSVElUSU9OX01BUFtrZXldLnBhcnRpdGlvbjtcbiAgICAgICAgZG9tYWluU3VmZml4ID0gUEFSVElUSU9OX01BUFtrZXldLmRvbWFpblN1ZmZpeDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZWdpc3RlckZhY3QocmVnaW9uLCAnUEFSVElUSU9OJywgcGFydGl0aW9uKTtcbiAgICByZWdpc3RlckZhY3QocmVnaW9uLCAnRE9NQUlOX1NVRkZJWCcsIGRvbWFpblN1ZmZpeCk7XG5cbiAgICByZWdpc3RlckZhY3QocmVnaW9uLCAnQ0RLX01FVEFEQVRBX1JFU09VUkNFX0FWQUlMQUJMRScsIEFXU19DREtfTUVUQURBVEEuaGFzKHJlZ2lvbikgPyAnWUVTJyA6ICdOTycpO1xuXG4gICAgcmVnaXN0ZXJGYWN0KHJlZ2lvbiwgJ1MzX1NUQVRJQ19XRUJTSVRFX0VORFBPSU5UJywgQVdTX09MREVSX1JFR0lPTlMuaGFzKHJlZ2lvbilcbiAgICAgID8gYHMzLXdlYnNpdGUtJHtyZWdpb259LiR7ZG9tYWluU3VmZml4fWBcbiAgICAgIDogYHMzLXdlYnNpdGUuJHtyZWdpb259LiR7ZG9tYWluU3VmZml4fWApO1xuXG4gICAgcmVnaXN0ZXJGYWN0KHJlZ2lvbiwgJ1MzX1NUQVRJQ19XRUJTSVRFX1pPTkVfNTNfSE9TVEVEX1pPTkVfSUQnLCBST1VURV81M19CVUNLRVRfV0VCU0lURV9aT05FX0lEU1tyZWdpb25dIHx8ICcnKTtcblxuICAgIHJlZ2lzdGVyRmFjdChyZWdpb24sICdFTEJWMl9BQ0NPVU5UJywgRUxCVjJfQUNDT1VOVFNbcmVnaW9uXSk7XG5cbiAgICByZWdpc3RlckZhY3QocmVnaW9uLCAnRExDX1JFUE9TSVRPUllfQUNDT1VOVCcsIERMQ19SRVBPU0lUT1JZX0FDQ09VTlRTW3JlZ2lvbl0pO1xuXG4gICAgY29uc3QgdnBjRW5kcG9pbnRTZXJ2aWNlTmFtZVByZWZpeCA9IGAke2RvbWFpblN1ZmZpeC5zcGxpdCgnLicpLnJldmVyc2UoKS5qb2luKCcuJyl9LnZwY2VgO1xuICAgIHJlZ2lzdGVyRmFjdChyZWdpb24sICdWUENfRU5EUE9JTlRfU0VSVklDRV9OQU1FX1BSRUZJWCcsIHZwY0VuZHBvaW50U2VydmljZU5hbWVQcmVmaXgpO1xuXG4gICAgZm9yIChjb25zdCBzZXJ2aWNlIG9mIEFXU19TRVJWSUNFUykge1xuICAgICAgcmVnaXN0ZXJGYWN0KHJlZ2lvbiwgWydzZXJ2aWNlUHJpbmNpcGFsJywgc2VydmljZV0sIERlZmF1bHQuc2VydmljZVByaW5jaXBhbChzZXJ2aWNlLCByZWdpb24sIGRvbWFpblN1ZmZpeCkpO1xuICAgIH1cbiAgfVxuICBsaW5lcy5wdXNoKCcgIH0nKTtcbiAgbGluZXMucHVzaCgnJyk7XG4gIGxpbmVzLnB1c2goJyAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9Jyk7XG4gIGxpbmVzLnB1c2goJ30nKTtcblxuICBhd2FpdCBmcy53cml0ZUZpbGUocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ2xpYicsICdidWlsdC1pbnMuZ2VuZXJhdGVkLnRzJyksIGxpbmVzLmpvaW4oJ1xcbicpKTtcblxuICBmdW5jdGlvbiByZWdpc3RlckZhY3QocmVnaW9uOiBzdHJpbmcsIG5hbWU6IHN0cmluZyB8IHN0cmluZ1tdLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgY29uc3QgZmFjdE5hbWUgPSB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgPyBuYW1lIDogYCR7bmFtZVswXX0oJHtuYW1lLnNsaWNlKDEpLm1hcChzID0+IEpTT04uc3RyaW5naWZ5KHMpKS5qb2luKCcsICcpfSlgO1xuICAgIGxpbmVzLnB1c2goYCAgICBGYWN0LnJlZ2lzdGVyKHsgcmVnaW9uOiAke0pTT04uc3RyaW5naWZ5KHJlZ2lvbil9LCBuYW1lOiBGYWN0TmFtZS4ke2ZhY3ROYW1lfSwgdmFsdWU6ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfSB9KTtgKTtcbiAgfVxufVxuXG5tYWluKCkuY2F0Y2goZSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGNvbnNvbGUuZXJyb3IoZSk7XG4gIHByb2Nlc3MuZXhpdCgtMSk7XG59KTtcbiJdfQ==