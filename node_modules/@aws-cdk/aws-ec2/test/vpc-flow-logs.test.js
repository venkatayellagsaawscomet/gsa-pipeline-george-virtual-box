"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const logs = require("@aws-cdk/aws-logs");
const s3 = require("@aws-cdk/aws-s3");
const core_1 = require("@aws-cdk/core");
const nodeunit_shim_1 = require("nodeunit-shim");
const lib_1 = require("../lib");
nodeunit_shim_1.nodeunitShim({
    'with defaults set, it successfully creates with cloudwatch logs destination'(test) {
        const stack = getTestStack();
        new lib_1.FlowLog(stack, 'FlowLogs', {
            resourceType: lib_1.FlowLogResourceType.fromNetworkInterfaceId('eni-123455'),
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::FlowLog', {
            ResourceType: 'NetworkInterface',
            TrafficType: 'ALL',
            ResourceId: 'eni-123455',
            DeliverLogsPermissionArn: {
                'Fn::GetAtt': ['FlowLogsIAMRoleF18F4209', 'Arn'],
            },
            LogGroupName: {
                Ref: 'FlowLogsLogGroup9853A85F',
            },
        }));
        assert_1.expect(stack).to(assert_1.countResources('AWS::Logs::LogGroup', 1));
        assert_1.expect(stack).to(assert_1.countResources('AWS::IAM::Role', 1));
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::S3::Bucket'));
        test.done();
    },
    'with cloudwatch logs as the destination, allows use of existing resources'(test) {
        const stack = getTestStack();
        new lib_1.FlowLog(stack, 'FlowLogs', {
            resourceType: lib_1.FlowLogResourceType.fromNetworkInterfaceId('eni-123456'),
            destination: lib_1.FlowLogDestination.toCloudWatchLogs(new logs.LogGroup(stack, 'TestLogGroup', {
                retention: logs.RetentionDays.FIVE_DAYS,
            }), new iam.Role(stack, 'TestRole', {
                roleName: 'TestName',
                assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com'),
            })),
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Logs::LogGroup', {
            RetentionInDays: 5,
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Role', {
            RoleName: 'TestName',
        }));
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::S3::Bucket'));
        test.done();
    },
    'with s3 as the destination, allows use of existing resources'(test) {
        const stack = getTestStack();
        new lib_1.FlowLog(stack, 'FlowLogs', {
            resourceType: lib_1.FlowLogResourceType.fromNetworkInterfaceId('eni-123456'),
            destination: lib_1.FlowLogDestination.toS3(new s3.Bucket(stack, 'TestBucket', {
                bucketName: 'testbucket',
            })),
        });
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::Logs::LogGroup'));
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::IAM::Role'));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::S3::Bucket', {
            BucketName: 'testbucket',
        }));
        test.done();
    },
    'with s3 as the destination and all the defaults set, it successfully creates all the resources'(test) {
        const stack = getTestStack();
        new lib_1.FlowLog(stack, 'FlowLogs', {
            resourceType: lib_1.FlowLogResourceType.fromNetworkInterfaceId('eni-123456'),
            destination: lib_1.FlowLogDestination.toS3(),
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::FlowLog', {
            ResourceType: 'NetworkInterface',
            TrafficType: 'ALL',
            ResourceId: 'eni-123456',
            LogDestination: {
                'Fn::GetAtt': ['FlowLogsBucket87F67F60', 'Arn'],
            },
        }));
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::Logs::LogGroup'));
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::IAM::Role'));
        assert_1.expect(stack).to(assert_1.countResources('AWS::S3::Bucket', 1));
        test.done();
    },
    'create with vpc'(test) {
        const stack = getTestStack();
        new lib_1.Vpc(stack, 'VPC', {
            flowLogs: {
                flowLogs: {},
            },
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPC'));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::FlowLog', {
            ResourceType: 'VPC',
            TrafficType: 'ALL',
            ResourceId: {
                Ref: 'VPCB9E5F0B4',
            },
            DeliverLogsPermissionArn: {
                'Fn::GetAtt': ['VPCflowLogsIAMRole9D21E1A6', 'Arn'],
            },
            LogGroupName: {
                Ref: 'VPCflowLogsLogGroupE900F980',
            },
        }));
        test.done();
    },
    'add to vpc'(test) {
        const stack = getTestStack();
        const vpc = new lib_1.Vpc(stack, 'VPC');
        vpc.addFlowLog('FlowLogs');
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPC'));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::FlowLog', {
            ResourceType: 'VPC',
            TrafficType: 'ALL',
            ResourceId: {
                Ref: 'VPCB9E5F0B4',
            },
            DeliverLogsPermissionArn: {
                'Fn::GetAtt': ['VPCFlowLogsIAMRole55343234', 'Arn'],
            },
            LogGroupName: {
                Ref: 'VPCFlowLogsLogGroupF48E1B0A',
            },
        }));
        test.done();
    },
});
function getTestStack() {
    return new core_1.Stack(undefined, 'TestStack', {
        env: { account: '123456789012', region: 'us-east-1' },
    });
}
//# sourceMappingURL=data:application/json;base64,