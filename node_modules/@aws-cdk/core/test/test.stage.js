"use strict";
const cxapi = require("@aws-cdk/cx-api");
const lib_1 = require("../lib");
class TouchingAspect {
    constructor() {
        this.visits = new Array();
    }
    visit(node) {
        this.visits.push(node);
    }
}
class BogusStack extends lib_1.Stack {
    constructor(scope, id) {
        super(scope, id);
        new lib_1.CfnResource(this, 'Resource', {
            type: 'CDK::Test::Resource',
        });
    }
}
function acctRegion(s) {
    return [s.account, s.region];
}
module.exports = {
    'Stack inherits unspecified part of the env from Stage'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'Stage', {
            env: { account: 'account', region: 'region' },
        });
        // WHEN
        const stack1 = new lib_1.Stack(stage, 'Stack1', { env: { region: 'elsewhere' } });
        const stack2 = new lib_1.Stack(stage, 'Stack2', { env: { account: 'tnuocca' } });
        // THEN
        test.deepEqual(acctRegion(stack1), ['account', 'elsewhere']);
        test.deepEqual(acctRegion(stack2), ['tnuocca', 'region']);
        test.done();
    },
    'envs are inherited deeply'(test) {
        // GIVEN
        const app = new lib_1.App();
        const outer = new lib_1.Stage(app, 'Stage', {
            env: { account: 'account', region: 'region' },
        });
        // WHEN
        const innerAcct = new lib_1.Stage(outer, 'Acct', { env: { account: 'tnuocca' } });
        const innerRegion = new lib_1.Stage(outer, 'Rgn', { env: { region: 'elsewhere' } });
        const innerNeither = new lib_1.Stage(outer, 'Neither');
        // THEN
        test.deepEqual(acctRegion(new lib_1.Stack(innerAcct, 'Stack')), ['tnuocca', 'region']);
        test.deepEqual(acctRegion(new lib_1.Stack(innerRegion, 'Stack')), ['account', 'elsewhere']);
        test.deepEqual(acctRegion(new lib_1.Stack(innerNeither, 'Stack')), ['account', 'region']);
        test.done();
    },
    'The Stage Assembly is in the app Assembly\'s manifest'(test) {
        // WHEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'Stage');
        new BogusStack(stage, 'Stack2');
        // THEN -- app manifest contains a nested cloud assembly
        const appAsm = app.synth();
        const artifact = appAsm.artifacts.find(x => x instanceof cxapi.NestedCloudAssemblyArtifact);
        test.ok(artifact);
        test.done();
    },
    'Stacks in Stage are in a different cxasm than Stacks in App'(test) {
        // WHEN
        const app = new lib_1.App();
        const stack1 = new BogusStack(app, 'Stack1');
        const stage = new lib_1.Stage(app, 'Stage');
        const stack2 = new BogusStack(stage, 'Stack2');
        // THEN
        const stageAsm = stage.synth();
        test.deepEqual(stageAsm.stacks.map(s => s.stackName), [stack2.stackName]);
        const appAsm = app.synth();
        test.deepEqual(appAsm.stacks.map(s => s.stackName), [stack1.stackName]);
        test.done();
    },
    'Can nest Stages inside other Stages'(test) {
        // WHEN
        const app = new lib_1.App();
        const outer = new lib_1.Stage(app, 'Outer');
        const inner = new lib_1.Stage(outer, 'Inner');
        const stack = new BogusStack(inner, 'Stack');
        // WHEN
        const appAsm = app.synth();
        const outerAsm = appAsm.getNestedAssembly(outer.artifactId);
        const innerAsm = outerAsm.getNestedAssembly(inner.artifactId);
        test.ok(innerAsm.tryGetArtifact(stack.artifactId));
        test.done();
    },
    'Default stack name in Stage objects incorporates the Stage name and no hash'(test) {
        // WHEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'MyStage');
        const stack = new BogusStack(stage, 'MyStack');
        // THEN
        test.equal(stage.stageName, 'MyStage');
        test.equal(stack.stackName, 'MyStage-MyStack');
        test.done();
    },
    'Can not have dependencies to stacks outside the nested asm'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stack1 = new BogusStack(app, 'Stack1');
        const stage = new lib_1.Stage(app, 'MyStage');
        const stack2 = new BogusStack(stage, 'Stack2');
        // WHEN
        test.throws(() => {
            stack2.addDependency(stack1);
        }, /dependency cannot cross stage boundaries/);
        test.done();
    },
    'When we synth() a stage, prepare must be called on constructs in the stage'(test) {
        // GIVEN
        const app = new lib_1.App();
        let prepared = false;
        const stage = new lib_1.Stage(app, 'MyStage');
        const stack = new BogusStack(stage, 'Stack');
        class HazPrepare extends lib_1.Construct {
            prepare() {
                prepared = true;
            }
        }
        new HazPrepare(stack, 'Preparable');
        // WHEN
        stage.synth();
        // THEN
        test.equals(prepared, true);
        test.done();
    },
    'When we synth() a stage, aspects inside it must have been applied'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'MyStage');
        const stack = new BogusStack(stage, 'Stack');
        // WHEN
        const aspect = new TouchingAspect();
        lib_1.Aspects.of(stack).add(aspect);
        // THEN
        app.synth();
        test.deepEqual(aspect.visits.map(c => c.node.path), [
            'MyStage/Stack',
            'MyStage/Stack/Resource',
        ]);
        test.done();
    },
    'Aspects do not apply inside a Stage'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'MyStage');
        new BogusStack(stage, 'Stack');
        // WHEN
        const aspect = new TouchingAspect();
        lib_1.Aspects.of(app).add(aspect);
        // THEN
        app.synth();
        test.deepEqual(aspect.visits.map(c => c.node.path), [
            '',
            'Tree',
        ]);
        test.done();
    },
    'Automatic dependencies inside a stage are available immediately after synth'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'MyStage');
        const stack1 = new lib_1.Stack(stage, 'Stack1');
        const stack2 = new lib_1.Stack(stage, 'Stack2');
        // WHEN
        const resource1 = new lib_1.CfnResource(stack1, 'Resource', {
            type: 'CDK::Test::Resource',
        });
        new lib_1.CfnResource(stack2, 'Resource', {
            type: 'CDK::Test::Resource',
            properties: {
                OtherThing: resource1.ref,
            },
        });
        const asm = stage.synth();
        // THEN
        test.deepEqual(asm.getStackArtifact(stack2.artifactId).dependencies.map(d => d.id), [stack1.artifactId]);
        test.done();
    },
    'Assemblies can be deeply nested'(test) {
        // GIVEN
        const app = new lib_1.App({ runtimeInfo: false, treeMetadata: false });
        const level1 = new lib_1.Stage(app, 'StageLevel1');
        const level2 = new lib_1.Stage(level1, 'StageLevel2');
        new lib_1.Stage(level2, 'StageLevel3');
        // WHEN
        const rootAssembly = app.synth();
        // THEN
        test.deepEqual(rootAssembly.manifest.artifacts, {
            'assembly-StageLevel1': {
                type: 'cdk:cloud-assembly',
                properties: {
                    directoryName: 'assembly-StageLevel1',
                    displayName: 'StageLevel1',
                },
            },
        });
        const assemblyLevel1 = rootAssembly.getNestedAssembly('assembly-StageLevel1');
        test.deepEqual(assemblyLevel1.manifest.artifacts, {
            'assembly-StageLevel1-StageLevel2': {
                type: 'cdk:cloud-assembly',
                properties: {
                    directoryName: 'assembly-StageLevel1-StageLevel2',
                    displayName: 'StageLevel1/StageLevel2',
                },
            },
        });
        const assemblyLevel2 = assemblyLevel1.getNestedAssembly('assembly-StageLevel1-StageLevel2');
        test.deepEqual(assemblyLevel2.manifest.artifacts, {
            'assembly-StageLevel1-StageLevel2-StageLevel3': {
                type: 'cdk:cloud-assembly',
                properties: {
                    directoryName: 'assembly-StageLevel1-StageLevel2-StageLevel3',
                    displayName: 'StageLevel1/StageLevel2/StageLevel3',
                },
            },
        });
        test.done();
    },
    'stage name validation'(test) {
        const app = new lib_1.App();
        new lib_1.Stage(app, 'abcd');
        new lib_1.Stage(app, 'abcd123');
        new lib_1.Stage(app, 'abcd123-588dfjjk');
        new lib_1.Stage(app, 'abcd123-588dfjjk.sss');
        new lib_1.Stage(app, 'abcd123-588dfjjk.sss_ajsid');
        test.throws(() => new lib_1.Stage(app, 'abcd123-588dfjjk.sss_ajsid '), /invalid stage name "abcd123-588dfjjk.sss_ajsid "/);
        test.throws(() => new lib_1.Stage(app, 'abcd123-588dfjjk.sss_ajsid/dfo'), /invalid stage name "abcd123-588dfjjk.sss_ajsid\/dfo"/);
        test.throws(() => new lib_1.Stage(app, '&'), /invalid stage name "&"/);
        test.throws(() => new lib_1.Stage(app, '45hello'), /invalid stage name "45hello"/);
        test.throws(() => new lib_1.Stage(app, 'f'), /invalid stage name "f"/);
        test.done();
    },
    'outdir cannot be specified for nested stages'(test) {
        // WHEN
        const app = new lib_1.App();
        // THEN
        test.throws(() => new lib_1.Stage(app, 'mystage', { outdir: '/tmp/foo/bar' }), /"outdir" cannot be specified for nested stages/);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,