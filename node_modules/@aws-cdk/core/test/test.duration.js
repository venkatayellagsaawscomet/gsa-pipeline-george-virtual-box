"use strict";
const nodeunit = require("nodeunit");
const lib_1 = require("../lib");
function floatEqual(test, actual, expected) {
    test.ok(
    // Floats are subject to rounding errors up to Number.ESPILON
    actual >= expected - Number.EPSILON && actual <= expected + Number.EPSILON, `${actual} == ${expected}`);
}
module.exports = nodeunit.testCase({
    'negative amount'(test) {
        test.throws(() => lib_1.Duration.seconds(-1), /negative/);
        test.done();
    },
    'unresolved amount'(test) {
        const stack = new lib_1.Stack();
        const lazyDuration = lib_1.Duration.seconds(lib_1.Token.asNumber({ resolve: () => 1337 }));
        test.equals(stack.resolve(lazyDuration.toSeconds()), 1337);
        test.throws(() => stack.resolve(lazyDuration.toMinutes()), /Unable to perform time unit conversion on un-resolved token/);
        test.done();
    },
    'Duration in seconds'(test) {
        const duration = lib_1.Duration.seconds(300);
        test.equal(duration.toSeconds(), 300);
        test.equal(duration.toMinutes(), 5);
        test.throws(() => duration.toDays(), /'300 seconds' cannot be converted into a whole number of days/);
        floatEqual(test, duration.toDays({ integral: false }), 300 / 86400);
        test.equal(lib_1.Duration.seconds(60 * 60 * 24).toDays(), 1);
        test.done();
    },
    'Duration in minutes'(test) {
        const duration = lib_1.Duration.minutes(5);
        test.equal(duration.toSeconds(), 300);
        test.equal(duration.toMinutes(), 5);
        test.throws(() => duration.toDays(), /'5 minutes' cannot be converted into a whole number of days/);
        floatEqual(test, duration.toDays({ integral: false }), 300 / 86400);
        test.equal(lib_1.Duration.minutes(60 * 24).toDays(), 1);
        test.done();
    },
    'Duration in hours'(test) {
        const duration = lib_1.Duration.hours(5);
        test.equal(duration.toSeconds(), 18000);
        test.equal(duration.toMinutes(), 300);
        test.throws(() => duration.toDays(), /'5 hours' cannot be converted into a whole number of days/);
        floatEqual(test, duration.toDays({ integral: false }), 5 / 24);
        test.equal(lib_1.Duration.hours(24).toDays(), 1);
        test.done();
    },
    'seconds to milliseconds'(test) {
        const duration = lib_1.Duration.seconds(5);
        test.equal(duration.toMilliseconds(), 5000);
        test.done();
    },
    'Duration in days'(test) {
        const duration = lib_1.Duration.days(1);
        test.equal(duration.toSeconds(), 86400);
        test.equal(duration.toMinutes(), 1440);
        test.equal(duration.toDays(), 1);
        test.done();
    },
    'toISOString'(test) {
        test.equal(lib_1.Duration.millis(0).toISOString(), 'PT0S');
        test.equal(lib_1.Duration.seconds(0).toISOString(), 'PT0S');
        test.equal(lib_1.Duration.minutes(0).toISOString(), 'PT0S');
        test.equal(lib_1.Duration.hours(0).toISOString(), 'PT0S');
        test.equal(lib_1.Duration.days(0).toISOString(), 'PT0S');
        test.equal(lib_1.Duration.millis(5).toISOString(), 'PT0.005S');
        test.equal(lib_1.Duration.seconds(5).toISOString(), 'PT5S');
        test.equal(lib_1.Duration.minutes(5).toISOString(), 'PT5M');
        test.equal(lib_1.Duration.hours(5).toISOString(), 'PT5H');
        test.equal(lib_1.Duration.days(5).toISOString(), 'P5D');
        test.equal(lib_1.Duration.seconds(1 + 60 * (1 + 60 * (1 + 24))).toISOString(), 'P1DT1H1M1S');
        test.done();
    },
    'toIsoString'(test) {
        test.equal(lib_1.Duration.millis(0).toIsoString(), 'PT0S');
        test.equal(lib_1.Duration.seconds(0).toIsoString(), 'PT0S');
        test.equal(lib_1.Duration.minutes(0).toIsoString(), 'PT0S');
        test.equal(lib_1.Duration.hours(0).toIsoString(), 'PT0S');
        test.equal(lib_1.Duration.days(0).toIsoString(), 'PT0S');
        test.equal(lib_1.Duration.millis(5).toIsoString(), 'PT0.005S');
        test.equal(lib_1.Duration.seconds(5).toIsoString(), 'PT5S');
        test.equal(lib_1.Duration.minutes(5).toIsoString(), 'PT5M');
        test.equal(lib_1.Duration.hours(5).toIsoString(), 'PT5H');
        test.equal(lib_1.Duration.days(5).toIsoString(), 'P5D');
        test.equal(lib_1.Duration.seconds(65).toIsoString(), 'PT1M5S');
        test.equal(lib_1.Duration.seconds(1 + 60 * (1 + 60 * (1 + 24))).toIsoString(), 'P1DT1H1M1S');
        test.done();
    },
    'parse'(test) {
        test.equal(lib_1.Duration.parse('PT0S').toSeconds(), 0);
        test.equal(lib_1.Duration.parse('PT0M').toSeconds(), 0);
        test.equal(lib_1.Duration.parse('PT0H').toSeconds(), 0);
        test.equal(lib_1.Duration.parse('P0D').toSeconds(), 0);
        test.equal(lib_1.Duration.parse('PT5S').toSeconds(), 5);
        test.equal(lib_1.Duration.parse('PT5M').toSeconds(), 300);
        test.equal(lib_1.Duration.parse('PT5H').toSeconds(), 18000);
        test.equal(lib_1.Duration.parse('P5D').toSeconds(), 432000);
        test.equal(lib_1.Duration.parse('P1DT1H1M1S').toSeconds(), 1 + 60 * (1 + 60 * (1 + 24)));
        test.done();
    },
    'reject illegal parses'(test) {
        const err = 'Not a valid ISO duration';
        test.throws(() => {
            lib_1.Duration.parse('PT1D');
        }, err);
        test.throws(() => {
            lib_1.Duration.parse('P5S');
        }, err);
        test.done();
    },
    'to human string'(test) {
        test.equal(lib_1.Duration.minutes(0).toHumanString(), '0 minutes');
        test.equal(lib_1.Duration.minutes(lib_1.Lazy.numberValue({ produce: () => 5 })).toHumanString(), '<token> minutes');
        test.equal(lib_1.Duration.minutes(10).toHumanString(), '10 minutes');
        test.equal(lib_1.Duration.minutes(1).toHumanString(), '1 minute');
        test.equal(lib_1.Duration.minutes(62).toHumanString(), '1 hour 2 minutes');
        test.equal(lib_1.Duration.seconds(3666).toHumanString(), '1 hour 1 minute');
        test.equal(lib_1.Duration.millis(3000).toHumanString(), '3 seconds');
        test.equal(lib_1.Duration.millis(3666).toHumanString(), '3 seconds 666 millis');
        test.equal(lib_1.Duration.millis(3.6).toHumanString(), '3.6 millis');
        test.done();
    },
    'add two durations'(test) {
        test.equal(lib_1.Duration.minutes(1).plus(lib_1.Duration.seconds(30)).toSeconds(), lib_1.Duration.seconds(90).toSeconds());
        test.equal(lib_1.Duration.minutes(1).plus(lib_1.Duration.seconds(30)).toMinutes({ integral: false }), lib_1.Duration.seconds(90).toMinutes({ integral: false }));
        test.done();
    },
});
//# sourceMappingURL=data:application/json;base64,