"use strict";
const lib_1 = require("../lib");
const annotations_1 = require("../lib/annotations");
const restore = process.env.CDK_BLOCK_DEPRECATIONS;
function getWarnings(casm) {
    var _a, _b;
    const result = new Array();
    for (const stack of Object.values((_a = casm.manifest.artifacts) !== null && _a !== void 0 ? _a : {})) {
        for (const [path, md] of Object.entries((_b = stack.metadata) !== null && _b !== void 0 ? _b : {})) {
            for (const x of md) {
                if (x.type === 'aws:cdk:warning') {
                    result.push({ path, message: x.data });
                }
            }
        }
    }
    return result;
}
module.exports = {
    'tearDown'(cb) {
        process.env.CDK_BLOCK_DEPRECATIONS = restore; // restore to the original value
        cb();
    },
    'addDeprecation() annotates the usage of a deprecated API'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stack = new lib_1.Stack(app, 'MyStack');
        const c1 = new lib_1.Construct(stack, 'Hello');
        // WHEN
        delete process.env.CDK_BLOCK_DEPRECATIONS;
        annotations_1.Annotations.of(c1).addDeprecation('@aws-cdk/core.Construct.node', 'use @aws-cdk.Construct.construct instead');
        // THEN
        test.deepEqual(getWarnings(app.synth()), [
            {
                path: '/MyStack/Hello',
                message: 'The API @aws-cdk/core.Construct.node is deprecated: use @aws-cdk.Construct.construct instead. This API will be removed in the next major release',
            },
        ]);
        test.done();
    },
    'deduplicated per node based on "api"'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stack1 = new lib_1.Stack(app, 'MyStack1');
        const stack2 = new lib_1.Stack(app, 'MyStack2');
        const c1 = new lib_1.Construct(stack1, 'Hello');
        const c2 = new lib_1.Construct(stack1, 'World');
        const c3 = new lib_1.Construct(stack2, 'FooBar');
        // WHEN
        delete process.env.CDK_BLOCK_DEPRECATIONS;
        annotations_1.Annotations.of(c1).addDeprecation('@aws-cdk/core.Construct.node', 'use @aws-cdk.Construct.construct instead');
        annotations_1.Annotations.of(c2).addDeprecation('@aws-cdk/core.Construct.node', 'use @aws-cdk.Construct.construct instead');
        annotations_1.Annotations.of(c1).addDeprecation('@aws-cdk/core.Construct.node', 'use @aws-cdk.Construct.construct instead');
        annotations_1.Annotations.of(c3).addDeprecation('@aws-cdk/core.Construct.node', 'use @aws-cdk.Construct.construct instead');
        annotations_1.Annotations.of(c1).addDeprecation('@aws-cdk/core.Construct.node', 'use @aws-cdk.Construct.construct instead');
        annotations_1.Annotations.of(c1).addDeprecation('@aws-cdk/core.Construct.node', 'use @aws-cdk.Construct.construct instead');
        // THEN
        test.deepEqual(getWarnings(app.synth()), [
            {
                path: '/MyStack1/Hello',
                message: 'The API @aws-cdk/core.Construct.node is deprecated: use @aws-cdk.Construct.construct instead. This API will be removed in the next major release',
            },
            {
                path: '/MyStack1/World',
                message: 'The API @aws-cdk/core.Construct.node is deprecated: use @aws-cdk.Construct.construct instead. This API will be removed in the next major release',
            },
            {
                path: '/MyStack2/FooBar',
                message: 'The API @aws-cdk/core.Construct.node is deprecated: use @aws-cdk.Construct.construct instead. This API will be removed in the next major release',
            },
        ]);
        test.done();
    },
    'CDK_BLOCK_DEPRECATIONS will throw if a deprecated API is used'(test) {
        // GIVEN
        const app = new lib_1.App();
        const stack = new lib_1.Stack(app, 'MyStack');
        const c1 = new lib_1.Construct(stack, 'Hello');
        // THEN
        process.env.CDK_BLOCK_DEPRECATIONS = '1';
        test.throws(() => annotations_1.Annotations.of(c1).addDeprecation('foo', 'bar'), /MyStack\/Hello: The API foo is deprecated: bar\. This API will be removed in the next major release/);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,