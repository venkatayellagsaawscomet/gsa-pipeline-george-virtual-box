"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPoolIdentityProviderBase = exports.ProviderAttribute = void 0;
const core_1 = require("@aws-cdk/core");
const attr_names_1 = require("../private/attr-names");
/**
 * An attribute available from a third party identity provider.
 */
class ProviderAttribute {
    constructor(attributeName) {
        this.attributeName = attributeName;
    }
    /**
     * Use this to specify an attribute from the identity provider that is not pre-defined in the CDK.
     * @param attributeName the attribute value string as recognized by the provider
     */
    static other(attributeName) {
        return new ProviderAttribute(attributeName);
    }
}
exports.ProviderAttribute = ProviderAttribute;
/** The user id attribute provided by Amazon */
ProviderAttribute.AMAZON_USER_ID = new ProviderAttribute('user_id');
/** The email attribute provided by Amazon */
ProviderAttribute.AMAZON_EMAIL = new ProviderAttribute('email');
/** The name attribute provided by Amazon */
ProviderAttribute.AMAZON_NAME = new ProviderAttribute('name');
/** The postal code attribute provided by Amazon */
ProviderAttribute.AMAZON_POSTAL_CODE = new ProviderAttribute('postal_code');
/** The user id attribute provided by Facebook */
ProviderAttribute.FACEBOOK_ID = new ProviderAttribute('id');
/** The birthday attribute provided by Facebook */
ProviderAttribute.FACEBOOK_BIRTHDAY = new ProviderAttribute('birthday');
/** The email attribute provided by Facebook */
ProviderAttribute.FACEBOOK_EMAIL = new ProviderAttribute('email');
/** The name attribute provided by Facebook */
ProviderAttribute.FACEBOOK_NAME = new ProviderAttribute('name');
/** The first name attribute provided by Facebook */
ProviderAttribute.FACEBOOK_FIRST_NAME = new ProviderAttribute('first_name');
/** The last name attribute provided by Facebook */
ProviderAttribute.FACEBOOK_LAST_NAME = new ProviderAttribute('last_name');
/** The middle name attribute provided by Facebook */
ProviderAttribute.FACEBOOK_MIDDLE_NAME = new ProviderAttribute('middle_name');
/** The gender attribute provided by Facebook */
ProviderAttribute.FACEBOOK_GENDER = new ProviderAttribute('gender');
/** The locale attribute provided by Facebook */
ProviderAttribute.FACEBOOK_LOCALE = new ProviderAttribute('locale');
/**
 * Options to integrate with the various social identity providers.
 */
class UserPoolIdentityProviderBase extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        props.userPool.registerIdentityProvider(this);
    }
    configureAttributeMapping() {
        if (!this.props.attributeMapping) {
            return undefined;
        }
        let mapping = {};
        mapping = Object.entries(this.props.attributeMapping)
            .filter(([k, _]) => k !== 'custom') // 'custom' handled later separately
            .reduce((agg, [k, v]) => {
            return { ...agg, [attr_names_1.StandardAttributeNames[k]]: v.attributeName };
        }, mapping);
        if (this.props.attributeMapping.custom) {
            mapping = Object.entries(this.props.attributeMapping.custom).reduce((agg, [k, v]) => {
                return { ...agg, [k]: v.attributeName };
            }, mapping);
        }
        if (Object.keys(mapping).length === 0) {
            return undefined;
        }
        return mapping;
    }
}
exports.UserPoolIdentityProviderBase = UserPoolIdentityProviderBase;
//# sourceMappingURL=data:application/json;base64,