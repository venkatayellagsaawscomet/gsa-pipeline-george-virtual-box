"use strict";
const assert_1 = require("@aws-cdk/assert");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const alias_1 = require("../lib/alias");
const key_1 = require("../lib/key");
module.exports = {
    'default alias'(test) {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Test');
        const key = new key_1.Key(stack, 'Key');
        new alias_1.Alias(stack, 'Alias', { targetKey: key, aliasName: 'alias/foo' });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::KMS::Alias', {
            AliasName: 'alias/foo',
            TargetKeyId: { 'Fn::GetAtt': ['Key961B73FD', 'Arn'] },
        }));
        test.done();
    },
    'add "alias/" prefix if not given.'(test) {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Test');
        const key = new key_1.Key(stack, 'Key', {
            enableKeyRotation: true,
            enabled: false,
        });
        new alias_1.Alias(stack, 'Alias', {
            aliasName: 'foo',
            targetKey: key,
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::KMS::Alias', {
            AliasName: 'alias/foo',
            TargetKeyId: { 'Fn::GetAtt': ['Key961B73FD', 'Arn'] },
        }));
        test.done();
    },
    'can create alias directly while creating the key'(test) {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Test');
        new key_1.Key(stack, 'Key', {
            enableKeyRotation: true,
            enabled: false,
            alias: 'foo',
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::KMS::Alias', {
            AliasName: 'alias/foo',
            TargetKeyId: { 'Fn::GetAtt': ['Key961B73FD', 'Arn'] },
        }));
        test.done();
    },
    'fails if alias is "alias/" (and nothing more)'(test) {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Test');
        const key = new key_1.Key(stack, 'MyKey', {
            enableKeyRotation: true,
            enabled: false,
        });
        test.throws(() => new alias_1.Alias(stack, 'Alias', {
            aliasName: 'alias/',
            targetKey: key,
        }));
        test.done();
    },
    'fails if alias contains illegal characters'(test) {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Test');
        const key = new key_1.Key(stack, 'MyKey', {
            enableKeyRotation: true,
            enabled: false,
        });
        test.throws(() => new alias_1.Alias(stack, 'Alias', {
            aliasName: 'alias/@Nope',
            targetKey: key,
        }), 'a-zA-Z0-9:/_-');
        test.done();
    },
    'fails if alias starts with "alias/aws/"'(test) {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'Test');
        const key = new key_1.Key(stack, 'MyKey', {
            enableKeyRotation: true,
            enabled: false,
        });
        test.throws(() => new alias_1.Alias(stack, 'Alias1', {
            aliasName: 'alias/aws/',
            targetKey: key,
        }), /Alias cannot start with alias\/aws\/: alias\/aws\//);
        test.throws(() => new alias_1.Alias(stack, 'Alias2', {
            aliasName: 'alias/aws/Awesome',
            targetKey: key,
        }), /Alias cannot start with alias\/aws\/: alias\/aws\/Awesome/);
        test.throws(() => new alias_1.Alias(stack, 'Alias3', {
            aliasName: 'alias/AWS/awesome',
            targetKey: key,
        }), /Alias cannot start with alias\/aws\/: alias\/AWS\/awesome/);
        test.done();
    },
    'can be used wherever a key is expected'(test) {
        const stack = new core_1.Stack();
        const myKey = new key_1.Key(stack, 'MyKey', {
            enableKeyRotation: true,
            enabled: false,
        });
        const myAlias = new alias_1.Alias(stack, 'MyAlias', {
            targetKey: myKey,
            aliasName: 'alias/myAlias',
        });
        class MyConstruct extends core_1.Construct {
            constructor(scope, id, key) {
                super(scope, id);
                new core_1.CfnOutput(stack, 'OutId', {
                    value: key.keyId,
                });
                new core_1.CfnOutput(stack, 'OutArn', {
                    value: key.keyArn,
                });
            }
        }
        new MyConstruct(stack, 'MyConstruct', myAlias);
        const template = assert_1.SynthUtils.synthesize(stack).template.Outputs;
        test.deepEqual(template, {
            'OutId': {
                'Value': 'alias/myAlias',
            },
            'OutArn': {
                'Value': {
                    'Fn::Join': ['', [
                            'arn:',
                            { Ref: 'AWS::Partition' },
                            ':kms:',
                            { Ref: 'AWS::Region' },
                            ':',
                            { Ref: 'AWS::AccountId' },
                            ':alias/myAlias',
                        ]],
                },
            },
        });
        test.done();
    },
    'imported alias by name - can be used where a key is expected'(test) {
        const stack = new core_1.Stack();
        const myAlias = alias_1.Alias.fromAliasName(stack, 'MyAlias', 'alias/myAlias');
        class MyConstruct extends core_1.Construct {
            constructor(scope, id, key) {
                super(scope, id);
                new core_1.CfnOutput(stack, 'OutId', {
                    value: key.keyId,
                });
                new core_1.CfnOutput(stack, 'OutArn', {
                    value: key.keyArn,
                });
            }
        }
        new MyConstruct(stack, 'MyConstruct', myAlias);
        const template = assert_1.SynthUtils.synthesize(stack).template.Outputs;
        test.deepEqual(template, {
            'OutId': {
                'Value': 'alias/myAlias',
            },
            'OutArn': {
                'Value': {
                    'Fn::Join': ['', [
                            'arn:',
                            { Ref: 'AWS::Partition' },
                            ':kms:',
                            { Ref: 'AWS::Region' },
                            ':',
                            { Ref: 'AWS::AccountId' },
                            ':alias/myAlias',
                        ]],
                },
            },
        });
        test.done();
    },
    'imported alias by name - will throw an error when accessing the key'(test) {
        const stack = new core_1.Stack();
        const myAlias = alias_1.Alias.fromAliasName(stack, 'MyAlias', 'alias/myAlias');
        test.throws(() => myAlias.aliasTargetKey, 'Cannot access aliasTargetKey on an Alias imported by Alias.fromAliasName().');
        test.done();
    },
    'fails if alias policy is invalid'(test) {
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'my-stack');
        const key = new key_1.Key(stack, 'MyKey');
        const alias = new alias_1.Alias(stack, 'Alias', { targetKey: key, aliasName: 'alias/foo' });
        alias.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            resources: ['*'],
            principals: [new aws_iam_1.ArnPrincipal('arn')],
        }));
        test.throws(() => app.synth(), /A PolicyStatement must specify at least one \'action\' or \'notAction\'/);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,