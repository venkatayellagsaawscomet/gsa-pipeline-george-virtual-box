import * as codepipeline from '@aws-cdk/aws-codepipeline';
import { CfnOutput, Construct, Stage } from '@aws-cdk/core';
import { AddStageOptions, CdkStage, StackOutput } from './stage';
/**
 * Properties for a CdkPipeline
 */
export interface CdkPipelineProps {
    /**
     * The CodePipeline action used to retrieve the CDK app's source
     *
     * @default - Required unless `codePipeline` is given
     */
    readonly sourceAction?: codepipeline.IAction;
    /**
     * The CodePipeline action build and synthesis step of the CDK app
     *
     * @default - Required unless `codePipeline` or `sourceAction` is given
     */
    readonly synthAction?: codepipeline.IAction;
    /**
     * The artifact you have defined to be the artifact to hold the cloudAssemblyArtifact for the synth action
     */
    readonly cloudAssemblyArtifact: codepipeline.Artifact;
    /**
     * Existing CodePipeline to add deployment stages to
     *
     * Use this if you want more control over the CodePipeline that gets created.
     * You can choose to not pass this value, in which case a new CodePipeline is
     * created with default settings.
     *
     * If you pass an existing CodePipeline, it should should have been created
     * with `restartExecutionOnUpdate: true`.
     *
     * [disable-awslint:ref-via-interface]
     *
     * @default - A new CodePipeline is automatically generated
     */
    readonly codePipeline?: codepipeline.Pipeline;
    /**
     * Name of the pipeline
     *
     * Can only be set if `codePipeline` is not set.
     *
     * @default - A name is automatically generated
     */
    readonly pipelineName?: string;
    /**
     * CDK CLI version to use in pipeline
     *
     * Some Actions in the pipeline will download and run a version of the CDK
     * CLI. Specify the version here.
     *
     * @default - Latest version
     */
    readonly cdkCliVersion?: string;
}
/**
 * A Pipeline to deploy CDK apps
 *
 * Defines an AWS CodePipeline-based Pipeline to deploy CDK applications.
 *
 * Automatically manages the following:
 *
 * - Stack dependency order.
 * - Asset publishing.
 * - Keeping the pipeline up-to-date as the CDK apps change.
 * - Using stack outputs later on in the pipeline.
 */
export declare class CdkPipeline extends Construct {
    private readonly _pipeline;
    private readonly _assets;
    private readonly _stages;
    private readonly _outputArtifacts;
    private readonly _cloudAssemblyArtifact;
    constructor(scope: Construct, id: string, props: CdkPipelineProps);
    /**
     * The underlying CodePipeline object
     *
     * You can use this to add more Stages to the pipeline, or Actions
     * to Stages.
     */
    get codePipeline(): codepipeline.Pipeline;
    /**
     * Access one of the pipeline's stages by stage name
     *
     * You can use this to add more Actions to a stage.
     */
    stage(stageName: string): codepipeline.IStage;
    /**
     * Add pipeline stage that will deploy the given application stage
     *
     * The application construct should subclass `Stage` and can contain any
     * number of `Stacks` inside it that may have dependency relationships
     * on one another.
     *
     * All stacks in the application will be deployed in the appropriate order,
     * and all assets found in the application will be added to the asset
     * publishing stage.
     */
    addApplicationStage(appStage: Stage, options?: AddStageOptions): CdkStage;
    /**
     * Add a new, empty stage to the pipeline
     *
     * Prefer to use `addApplicationStage` if you are intended to deploy a CDK
     * application, but you can use this method if you want to add other kinds of
     * Actions to a pipeline.
     */
    addStage(stageName: string): CdkStage;
    /**
     * Get the StackOutput object that holds this CfnOutput's value in this pipeline
     *
     * `StackOutput` can be used in validation actions later in the pipeline.
     */
    stackOutput(cfnOutput: CfnOutput): StackOutput;
    /**
     * Validate that we don't have any stacks violating dependency order in the pipeline
     *
     * Our own convenience methods will never generate a pipeline that does that (although
     * this is a nice verification), but a user can also add the stacks by hand.
     */
    protected validate(): string[];
    /**
     * Return all StackDeployActions in an ordered list
     */
    private get stackActions();
    private validateDeployOrder;
    private validateRequestedOutputs;
}
