"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
require("@aws-cdk/assert/jest");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const cdkp = require("../lib");
const testutil_1 = require("./testutil");
let app;
let pipelineStack;
let sourceArtifact;
let cloudAssemblyArtifact;
beforeEach(() => {
    app = new testutil_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStackPolicy', { env: testutil_1.PIPELINE_ENV });
    sourceArtifact = new codepipeline.Artifact();
    cloudAssemblyArtifact = new codepipeline.Artifact('CloudAsm');
});
afterEach(() => {
    app.cleanup();
});
test('Build project includes codeartifact policy statements for role', () => {
    // WHEN
    new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk', {
        sourceArtifact,
        cloudAssemblyArtifact,
        synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
            sourceArtifact,
            cloudAssemblyArtifact,
            rolePolicyStatements: [
                new aws_iam_1.PolicyStatement({
                    actions: ['codeartifact:*', 'sts:GetServiceBearerToken'],
                    resources: ['arn:my:arn'],
                }),
            ],
        }),
    });
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: assert_1.arrayWith(assert_1.deepObjectLike({
                Action: [
                    'codeartifact:*',
                    'sts:GetServiceBearerToken',
                ],
                Resource: 'arn:my:arn',
            })),
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtcm9sZS1wb2xpY3ktc3RhdGVtZW50cy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnVpbGQtcm9sZS1wb2xpY3ktc3RhdGVtZW50cy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNENBQTREO0FBQzVELGdDQUE4QjtBQUM5QiwwREFBMEQ7QUFDMUQsOENBQW1EO0FBQ25ELHdDQUFzQztBQUN0QywrQkFBK0I7QUFDL0IseUNBQTBFO0FBRTFFLElBQUksR0FBWSxDQUFDO0FBQ2pCLElBQUksYUFBb0IsQ0FBQztBQUN6QixJQUFJLGNBQXFDLENBQUM7QUFDMUMsSUFBSSxxQkFBNEMsQ0FBQztBQUVqRCxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsR0FBRyxHQUFHLElBQUksa0JBQU8sRUFBRSxDQUFDO0lBQ3BCLGFBQWEsR0FBRyxJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUUsRUFBRSxHQUFHLEVBQUUsdUJBQVksRUFBRSxDQUFDLENBQUM7SUFDN0UsY0FBYyxHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdDLHFCQUFxQixHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNoRSxDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZ0VBQWdFLEVBQUUsR0FBRyxFQUFFO0lBQzFFLE9BQU87SUFDUCxJQUFJLGdDQUFxQixDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUU7UUFDOUMsY0FBYztRQUNkLHFCQUFxQjtRQUNyQixXQUFXLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDO1lBQ25ELGNBQWM7WUFDZCxxQkFBcUI7WUFDckIsb0JBQW9CLEVBQUU7Z0JBQ3BCLElBQUkseUJBQWUsQ0FBQztvQkFDbEIsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsMkJBQTJCLENBQUM7b0JBQ3hELFNBQVMsRUFBRSxDQUFDLFlBQVksQ0FBQztpQkFDMUIsQ0FBQzthQUNIO1NBQ0YsQ0FBQztLQUNILENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLEVBQUU7UUFDM0QsY0FBYyxFQUFFO1lBQ2QsU0FBUyxFQUFFLGtCQUFTLENBQUMsdUJBQWMsQ0FBQztnQkFDbEMsTUFBTSxFQUFFO29CQUNOLGdCQUFnQjtvQkFDaEIsMkJBQTJCO2lCQUM1QjtnQkFDRCxRQUFRLEVBQUUsWUFBWTthQUN2QixDQUFDLENBQUM7U0FDSjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXJyYXlXaXRoLCBkZWVwT2JqZWN0TGlrZSB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydCc7XG5pbXBvcnQgJ0Bhd3MtY2RrL2Fzc2VydC9qZXN0JztcbmltcG9ydCAqIGFzIGNvZGVwaXBlbGluZSBmcm9tICdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lJztcbmltcG9ydCB7IFBvbGljeVN0YXRlbWVudCB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1pYW0nO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGNka3AgZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IFBJUEVMSU5FX0VOViwgVGVzdEFwcCwgVGVzdEdpdEh1Yk5wbVBpcGVsaW5lIH0gZnJvbSAnLi90ZXN0dXRpbCc7XG5cbmxldCBhcHA6IFRlc3RBcHA7XG5sZXQgcGlwZWxpbmVTdGFjazogU3RhY2s7XG5sZXQgc291cmNlQXJ0aWZhY3Q6IGNvZGVwaXBlbGluZS5BcnRpZmFjdDtcbmxldCBjbG91ZEFzc2VtYmx5QXJ0aWZhY3Q6IGNvZGVwaXBlbGluZS5BcnRpZmFjdDtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIGFwcCA9IG5ldyBUZXN0QXBwKCk7XG4gIHBpcGVsaW5lU3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnUGlwZWxpbmVTdGFja1BvbGljeScsIHsgZW52OiBQSVBFTElORV9FTlYgfSk7XG4gIHNvdXJjZUFydGlmYWN0ID0gbmV3IGNvZGVwaXBlbGluZS5BcnRpZmFjdCgpO1xuICBjbG91ZEFzc2VtYmx5QXJ0aWZhY3QgPSBuZXcgY29kZXBpcGVsaW5lLkFydGlmYWN0KCdDbG91ZEFzbScpO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIGFwcC5jbGVhbnVwKCk7XG59KTtcblxudGVzdCgnQnVpbGQgcHJvamVjdCBpbmNsdWRlcyBjb2RlYXJ0aWZhY3QgcG9saWN5IHN0YXRlbWVudHMgZm9yIHJvbGUnLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgbmV3IFRlc3RHaXRIdWJOcG1QaXBlbGluZShwaXBlbGluZVN0YWNrLCAnQ2RrJywge1xuICAgIHNvdXJjZUFydGlmYWN0LFxuICAgIGNsb3VkQXNzZW1ibHlBcnRpZmFjdCxcbiAgICBzeW50aEFjdGlvbjogY2RrcC5TaW1wbGVTeW50aEFjdGlvbi5zdGFuZGFyZE5wbVN5bnRoKHtcbiAgICAgIHNvdXJjZUFydGlmYWN0LFxuICAgICAgY2xvdWRBc3NlbWJseUFydGlmYWN0LFxuICAgICAgcm9sZVBvbGljeVN0YXRlbWVudHM6IFtcbiAgICAgICAgbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgYWN0aW9uczogWydjb2RlYXJ0aWZhY3Q6KicsICdzdHM6R2V0U2VydmljZUJlYXJlclRva2VuJ10sXG4gICAgICAgICAgcmVzb3VyY2VzOiBbJ2FybjpteTphcm4nXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH0pLFxuICB9KTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChwaXBlbGluZVN0YWNrKS50b0hhdmVSZXNvdXJjZUxpa2UoJ0FXUzo6SUFNOjpQb2xpY3knLCB7XG4gICAgUG9saWN5RG9jdW1lbnQ6IHtcbiAgICAgIFN0YXRlbWVudDogYXJyYXlXaXRoKGRlZXBPYmplY3RMaWtlKHtcbiAgICAgICAgQWN0aW9uOiBbXG4gICAgICAgICAgJ2NvZGVhcnRpZmFjdDoqJyxcbiAgICAgICAgICAnc3RzOkdldFNlcnZpY2VCZWFyZXJUb2tlbicsXG4gICAgICAgIF0sXG4gICAgICAgIFJlc291cmNlOiAnYXJuOm15OmFybicsXG4gICAgICB9KSksXG4gICAgfSxcbiAgfSk7XG59KTtcbiJdfQ==