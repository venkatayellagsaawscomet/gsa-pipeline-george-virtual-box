"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
require("@aws-cdk/assert/jest");
const cp = require("@aws-cdk/aws-codepipeline");
const cpa = require("@aws-cdk/aws-codepipeline-actions");
const core_1 = require("@aws-cdk/core");
const testutil_1 = require("./testutil");
let app;
let pipelineStack;
let pipeline;
beforeEach(() => {
    app = new testutil_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testutil_1.PIPELINE_ENV });
    pipeline = new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk');
});
afterEach(() => {
    app.cleanup();
});
test('references stack template in subassembly', () => {
    // WHEN
    pipeline.addApplicationStage(new OneStackApp(app, 'App'));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'App',
            Actions: assert_1.arrayWith(assert_1.objectLike({
                Name: 'Stack.Prepare',
                InputArtifacts: [assert_1.objectLike({})],
                Configuration: assert_1.objectLike({
                    StackName: 'App-Stack',
                    TemplatePath: assert_1.stringLike('*::assembly-App/*.template.json'),
                }),
            })),
        }),
    });
});
test('action has right settings for same-env deployment', () => {
    // WHEN
    pipeline.addApplicationStage(new OneStackApp(app, 'Same'));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'Same',
            Actions: [
                assert_1.objectLike({
                    Name: 'Stack.Prepare',
                    RoleArn: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                ':iam::',
                                { Ref: 'AWS::AccountId' },
                                ':role/cdk-hnb659fds-deploy-role-',
                                { Ref: 'AWS::AccountId' },
                                '-',
                                { Ref: 'AWS::Region' },
                            ]],
                    },
                    Configuration: assert_1.objectLike({
                        StackName: 'Same-Stack',
                        RoleArn: {
                            'Fn::Join': ['', [
                                    'arn:',
                                    { Ref: 'AWS::Partition' },
                                    ':iam::',
                                    { Ref: 'AWS::AccountId' },
                                    ':role/cdk-hnb659fds-cfn-exec-role-',
                                    { Ref: 'AWS::AccountId' },
                                    '-',
                                    { Ref: 'AWS::Region' },
                                ]],
                        },
                    }),
                }),
                assert_1.objectLike({
                    Name: 'Stack.Deploy',
                    RoleArn: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                ':iam::',
                                { Ref: 'AWS::AccountId' },
                                ':role/cdk-hnb659fds-deploy-role-',
                                { Ref: 'AWS::AccountId' },
                                '-',
                                { Ref: 'AWS::Region' },
                            ]],
                    },
                    Configuration: assert_1.objectLike({
                        StackName: 'Same-Stack',
                    }),
                }),
            ],
        }),
    });
});
test('action has right settings for cross-account deployment', () => {
    // WHEN
    pipeline.addApplicationStage(new OneStackApp(app, 'CrossAccount', { env: { account: 'you' } }));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'CrossAccount',
            Actions: [
                assert_1.objectLike({
                    Name: 'Stack.Prepare',
                    RoleArn: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                ':iam::you:role/cdk-hnb659fds-deploy-role-you-',
                                { Ref: 'AWS::Region' },
                            ]],
                    },
                    Configuration: assert_1.objectLike({
                        StackName: 'CrossAccount-Stack',
                        RoleArn: {
                            'Fn::Join': ['', [
                                    'arn:',
                                    { Ref: 'AWS::Partition' },
                                    ':iam::you:role/cdk-hnb659fds-cfn-exec-role-you-',
                                    { Ref: 'AWS::Region' },
                                ]],
                        },
                    }),
                }),
                assert_1.objectLike({
                    Name: 'Stack.Deploy',
                    RoleArn: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                ':iam::you:role/cdk-hnb659fds-deploy-role-you-',
                                { Ref: 'AWS::Region' },
                            ]],
                    },
                    Configuration: assert_1.objectLike({
                        StackName: 'CrossAccount-Stack',
                    }),
                }),
            ],
        }),
    });
});
test('action has right settings for cross-region deployment', () => {
    // WHEN
    pipeline.addApplicationStage(new OneStackApp(app, 'CrossRegion', { env: { region: 'elsewhere' } }));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'CrossRegion',
            Actions: [
                assert_1.objectLike({
                    Name: 'Stack.Prepare',
                    RoleArn: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                ':iam::',
                                { Ref: 'AWS::AccountId' },
                                ':role/cdk-hnb659fds-deploy-role-',
                                { Ref: 'AWS::AccountId' },
                                '-elsewhere',
                            ]],
                    },
                    Region: 'elsewhere',
                    Configuration: assert_1.objectLike({
                        StackName: 'CrossRegion-Stack',
                        RoleArn: {
                            'Fn::Join': ['', [
                                    'arn:',
                                    { Ref: 'AWS::Partition' },
                                    ':iam::',
                                    { Ref: 'AWS::AccountId' },
                                    ':role/cdk-hnb659fds-cfn-exec-role-',
                                    { Ref: 'AWS::AccountId' },
                                    '-elsewhere',
                                ]],
                        },
                    }),
                }),
                assert_1.objectLike({
                    Name: 'Stack.Deploy',
                    RoleArn: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                ':iam::',
                                { Ref: 'AWS::AccountId' },
                                ':role/cdk-hnb659fds-deploy-role-',
                                { Ref: 'AWS::AccountId' },
                                '-elsewhere',
                            ]],
                    },
                    Region: 'elsewhere',
                    Configuration: assert_1.objectLike({
                        StackName: 'CrossRegion-Stack',
                    }),
                }),
            ],
        }),
    });
});
test('action has right settings for cross-account/cross-region deployment', () => {
    // WHEN
    pipeline.addApplicationStage(new OneStackApp(app, 'CrossBoth', { env: { account: 'you', region: 'elsewhere' } }));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'CrossBoth',
            Actions: [
                assert_1.objectLike({
                    Name: 'Stack.Prepare',
                    RoleArn: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                ':iam::you:role/cdk-hnb659fds-deploy-role-you-elsewhere',
                            ]],
                    },
                    Region: 'elsewhere',
                    Configuration: assert_1.objectLike({
                        StackName: 'CrossBoth-Stack',
                        RoleArn: {
                            'Fn::Join': ['', [
                                    'arn:',
                                    { Ref: 'AWS::Partition' },
                                    ':iam::you:role/cdk-hnb659fds-cfn-exec-role-you-elsewhere',
                                ]],
                        },
                    }),
                }),
                assert_1.objectLike({
                    Name: 'Stack.Deploy',
                    RoleArn: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                ':iam::you:role/cdk-hnb659fds-deploy-role-you-elsewhere',
                            ]],
                    },
                    Region: 'elsewhere',
                    Configuration: assert_1.objectLike({
                        StackName: 'CrossBoth-Stack',
                    }),
                }),
            ],
        }),
    });
});
test('pipeline has self-mutation stage', () => {
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'UpdatePipeline',
            Actions: [
                assert_1.objectLike({
                    Name: 'SelfMutate',
                    Configuration: assert_1.objectLike({
                        ProjectName: { Ref: assert_1.anything() },
                    }),
                }),
            ],
        }),
    });
    expect(pipelineStack).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                phases: {
                    install: {
                        commands: 'npm install -g aws-cdk',
                    },
                    build: {
                        commands: assert_1.arrayWith('cdk -a . deploy PipelineStack --require-approval=never --verbose'),
                    },
                },
            })),
            Type: 'CODEPIPELINE',
        },
    });
});
test('selfmutation stage correctly identifies nested assembly of pipeline stack', () => {
    const pipelineStage = new core_1.Stage(app, 'PipelineStage');
    const nestedPipelineStack = new core_1.Stack(pipelineStage, 'PipelineStack', { env: testutil_1.PIPELINE_ENV });
    new testutil_1.TestGitHubNpmPipeline(nestedPipelineStack, 'Cdk');
    // THEN
    expect(testutil_1.stackTemplate(nestedPipelineStack)).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                phases: {
                    build: {
                        commands: assert_1.arrayWith('cdk -a assembly-PipelineStage deploy PipelineStage-PipelineStack --require-approval=never --verbose'),
                    },
                },
            })),
        },
    });
});
test('overridden stack names are respected', () => {
    // WHEN
    pipeline.addApplicationStage(new OneStackAppWithCustomName(app, 'App1'));
    pipeline.addApplicationStage(new OneStackAppWithCustomName(app, 'App2'));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'App1',
            Actions: assert_1.arrayWith(assert_1.objectLike({
                Name: 'MyFancyStack.Prepare',
                Configuration: assert_1.objectLike({
                    StackName: 'MyFancyStack',
                }),
            })),
        }, {
            Name: 'App2',
            Actions: assert_1.arrayWith(assert_1.objectLike({
                Name: 'MyFancyStack.Prepare',
                Configuration: assert_1.objectLike({
                    StackName: 'MyFancyStack',
                }),
            })),
        }),
    });
});
test('can control fix/CLI version used in pipeline selfupdate', () => {
    // WHEN
    const stack2 = new core_1.Stack(app, 'Stack2', { env: testutil_1.PIPELINE_ENV });
    new testutil_1.TestGitHubNpmPipeline(stack2, 'Cdk2', {
        pipelineName: 'vpipe',
        cdkCliVersion: '1.2.3',
    });
    // THEN
    expect(stack2).toHaveResourceLike('AWS::CodeBuild::Project', {
        Name: 'vpipe-selfupdate',
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                phases: {
                    install: {
                        commands: 'npm install -g aws-cdk@1.2.3',
                    },
                },
            })),
        },
    });
});
test('add another action to an existing stage', () => {
    // WHEN
    pipeline.stage('Source').addAction(new cpa.GitHubSourceAction({
        actionName: 'GitHub2',
        oauthToken: core_1.SecretValue.plainText('oops'),
        output: new cp.Artifact(),
        owner: 'OWNER',
        repo: 'REPO',
    }));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'Source',
            Actions: [
                assert_1.objectLike({ Name: 'GitHub' }),
                assert_1.objectLike({ Name: 'GitHub2' }),
            ],
        }),
    });
});
class OneStackApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        new testutil_1.BucketStack(this, 'Stack');
    }
}
class OneStackAppWithCustomName extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        new testutil_1.BucketStack(this, 'Stack', {
            stackName: 'MyFancyStack',
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBpcGVsaW5lLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBMkc7QUFDM0csZ0NBQThCO0FBQzlCLGdEQUFnRDtBQUNoRCx5REFBeUQ7QUFDekQsd0NBQWlGO0FBRWpGLHlDQUFzRztBQUV0RyxJQUFJLEdBQVksQ0FBQztBQUNqQixJQUFJLGFBQW9CLENBQUM7QUFDekIsSUFBSSxRQUEwQixDQUFDO0FBRS9CLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxHQUFHLEdBQUcsSUFBSSxrQkFBTyxFQUFFLENBQUM7SUFDcEIsYUFBYSxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUUsRUFBRSxHQUFHLEVBQUUsdUJBQVksRUFBRSxDQUFDLENBQUM7SUFDdkUsUUFBUSxHQUFHLElBQUksZ0NBQXFCLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNiLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNoQixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQywwQ0FBMEMsRUFBRSxHQUFHLEVBQUU7SUFDcEQsT0FBTztJQUNQLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUUxRCxPQUFPO0lBQ1AsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLDZCQUE2QixFQUFFO1FBQ3RFLE1BQU0sRUFBRSxrQkFBUyxDQUFDO1lBQ2hCLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFLGtCQUFTLENBQ2hCLG1CQUFVLENBQUM7Z0JBQ1QsSUFBSSxFQUFFLGVBQWU7Z0JBQ3JCLGNBQWMsRUFBRSxDQUFDLG1CQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JB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c0NvbnRlbnQiOlsiaW1wb3J0IHsgYW55dGhpbmcsIGFycmF5V2l0aCwgZGVlcE9iamVjdExpa2UsIGVuY29kZWRKc29uLCBvYmplY3RMaWtlLCBzdHJpbmdMaWtlIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCAnQGF3cy1jZGsvYXNzZXJ0L2plc3QnO1xuaW1wb3J0ICogYXMgY3AgZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZSc7XG5pbXBvcnQgKiBhcyBjcGEgZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZS1hY3Rpb25zJztcbmltcG9ydCB7IENvbnN0cnVjdCwgU3RhY2ssIFN0YWdlLCBTdGFnZVByb3BzLCBTZWNyZXRWYWx1ZSB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgY2RrcCBmcm9tICcuLi9saWInO1xuaW1wb3J0IHsgQnVja2V0U3RhY2ssIFBJUEVMSU5FX0VOViwgc3RhY2tUZW1wbGF0ZSwgVGVzdEFwcCwgVGVzdEdpdEh1Yk5wbVBpcGVsaW5lIH0gZnJvbSAnLi90ZXN0dXRpbCc7XG5cbmxldCBhcHA6IFRlc3RBcHA7XG5sZXQgcGlwZWxpbmVTdGFjazogU3RhY2s7XG5sZXQgcGlwZWxpbmU6IGNka3AuQ2RrUGlwZWxpbmU7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBhcHAgPSBuZXcgVGVzdEFwcCgpO1xuICBwaXBlbGluZVN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ1BpcGVsaW5lU3RhY2snLCB7IGVudjogUElQRUxJTkVfRU5WIH0pO1xuICBwaXBlbGluZSA9IG5ldyBUZXN0R2l0SHViTnBtUGlwZWxpbmUocGlwZWxpbmVTdGFjaywgJ0NkaycpO1xufSk7XG5cbmFmdGVyRWFjaCgoKSA9PiB7XG4gIGFwcC5jbGVhbnVwKCk7XG59KTtcblxudGVzdCgncmVmZXJlbmNlcyBzdGFjayB0ZW1wbGF0ZSBpbiBzdWJhc3NlbWJseScsICgpID0+IHtcbiAgLy8gV0hFTlxuICBwaXBlbGluZS5hZGRBcHBsaWNhdGlvblN0YWdlKG5ldyBPbmVTdGFja0FwcChhcHAsICdBcHAnKSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QocGlwZWxpbmVTdGFjaykudG9IYXZlUmVzb3VyY2VMaWtlKCdBV1M6OkNvZGVQaXBlbGluZTo6UGlwZWxpbmUnLCB7XG4gICAgU3RhZ2VzOiBhcnJheVdpdGgoe1xuICAgICAgTmFtZTogJ0FwcCcsXG4gICAgICBBY3Rpb25zOiBhcnJheVdpdGgoXG4gICAgICAgIG9iamVjdExpa2Uoe1xuICAgICAgICAgIE5hbWU6ICdTdGFjay5QcmVwYXJlJyxcbiAgICAgICAgICBJbnB1dEFydGlmYWN0czogW29iamVjdExpa2Uoe30pXSxcbiAgICAgICAgICBDb25maWd1cmF0aW9uOiBvYmplY3RMaWtlKHtcbiAgICAgICAgICAgIFN0YWNrTmFtZTogJ0FwcC1TdGFjaycsXG4gICAgICAgICAgICBUZW1wbGF0ZVBhdGg6IHN0cmluZ0xpa2UoJyo6OmFzc2VtYmx5LUFwcC8qLnRlbXBsYXRlLmpzb24nKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICApLFxuICAgIH0pLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdhY3Rpb24gaGFzIHJpZ2h0IHNldHRpbmdzIGZvciBzYW1lLWVudiBkZXBsb3ltZW50JywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIHBpcGVsaW5lLmFkZEFwcGxpY2F0aW9uU3RhZ2UobmV3IE9uZVN0YWNrQXBwKGFwcCwgJ1NhbWUnKSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QocGlwZWxpbmVTdGFjaykudG9IYXZlUmVzb3VyY2VMaWtlKCdBV1M6OkNvZGVQaXBlbGluZTo6UGlwZWxpbmUnLCB7XG4gICAgU3RhZ2VzOiBhcnJheVdpdGgoe1xuICAgICAgTmFtZTogJ1NhbWUnLFxuICAgICAgQWN0aW9uczogW1xuICAgICAgICBvYmplY3RMaWtlKHtcbiAgICAgICAgICBOYW1lOiAnU3RhY2suUHJlcGFyZScsXG4gICAgICAgICAgUm9sZUFybjoge1xuICAgICAgICAgICAgJ0ZuOjpKb2luJzogWycnLCBbXG4gICAgICAgICAgICAgICdhcm46JyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlBhcnRpdGlvbicgfSxcbiAgICAgICAgICAgICAgJzppYW06OicsXG4gICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpBY2NvdW50SWQnIH0sXG4gICAgICAgICAgICAgICc6cm9sZS9jZGstaG5iNjU5ZmRzLWRlcGxveS1yb2xlLScsXG4gICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpBY2NvdW50SWQnIH0sXG4gICAgICAgICAgICAgICctJyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlJlZ2lvbicgfSxcbiAgICAgICAgICAgIF1dLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgQ29uZmlndXJhdGlvbjogb2JqZWN0TGlrZSh7XG4gICAgICAgICAgICBTdGFja05hbWU6ICdTYW1lLVN0YWNrJyxcbiAgICAgICAgICAgIFJvbGVBcm46IHtcbiAgICAgICAgICAgICAgJ0ZuOjpKb2luJzogWycnLCBbXG4gICAgICAgICAgICAgICAgJ2FybjonLFxuICAgICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpQYXJ0aXRpb24nIH0sXG4gICAgICAgICAgICAgICAgJzppYW06OicsXG4gICAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OkFjY291bnRJZCcgfSxcbiAgICAgICAgICAgICAgICAnOnJvbGUvY2RrLWhuYjY1OWZkcy1jZm4tZXhlYy1yb2xlLScsXG4gICAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OkFjY291bnRJZCcgfSxcbiAgICAgICAgICAgICAgICAnLScsXG4gICAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlJlZ2lvbicgfSxcbiAgICAgICAgICAgICAgXV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KSxcbiAgICAgICAgb2JqZWN0TGlrZSh7XG4gICAgICAgICAgTmFtZTogJ1N0YWNrLkRlcGxveScsXG4gICAgICAgICAgUm9sZUFybjoge1xuICAgICAgICAgICAgJ0ZuOjpKb2luJzogWycnLCBbXG4gICAgICAgICAgICAgICdhcm46JyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlBhcnRpdGlvbicgfSxcbiAgICAgICAgICAgICAgJzppYW06OicsXG4gICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpBY2NvdW50SWQnIH0sXG4gICAgICAgICAgICAgICc6cm9sZS9jZGstaG5iNjU5ZmRzLWRlcGxveS1yb2xlLScsXG4gICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpBY2NvdW50SWQnIH0sXG4gICAgICAgICAgICAgICctJyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlJlZ2lvbicgfSxcbiAgICAgICAgICAgIF1dLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgQ29uZmlndXJhdGlvbjogb2JqZWN0TGlrZSh7XG4gICAgICAgICAgICBTdGFja05hbWU6ICdTYW1lLVN0YWNrJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH0pLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdhY3Rpb24gaGFzIHJpZ2h0IHNldHRpbmdzIGZvciBjcm9zcy1hY2NvdW50IGRlcGxveW1lbnQnLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgcGlwZWxpbmUuYWRkQXBwbGljYXRpb25TdGFnZShuZXcgT25lU3RhY2tBcHAoYXBwLCAnQ3Jvc3NBY2NvdW50JywgeyBlbnY6IHsgYWNjb3VudDogJ3lvdScgfSB9KSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QocGlwZWxpbmVTdGFjaykudG9IYXZlUmVzb3VyY2VMaWtlKCdBV1M6OkNvZGVQaXBlbGluZTo6UGlwZWxpbmUnLCB7XG4gICAgU3RhZ2VzOiBhcnJheVdpdGgoe1xuICAgICAgTmFtZTogJ0Nyb3NzQWNjb3VudCcsXG4gICAgICBBY3Rpb25zOiBbXG4gICAgICAgIG9iamVjdExpa2Uoe1xuICAgICAgICAgIE5hbWU6ICdTdGFjay5QcmVwYXJlJyxcbiAgICAgICAgICBSb2xlQXJuOiB7XG4gICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgICAgICAgJ2FybjonLFxuICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6UGFydGl0aW9uJyB9LFxuICAgICAgICAgICAgICAnOmlhbTo6eW91OnJvbGUvY2RrLWhuYjY1OWZkcy1kZXBsb3ktcm9sZS15b3UtJyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlJlZ2lvbicgfSxcbiAgICAgICAgICAgIF1dLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgQ29uZmlndXJhdGlvbjogb2JqZWN0TGlrZSh7XG4gICAgICAgICAgICBTdGFja05hbWU6ICdDcm9zc0FjY291bnQtU3RhY2snLFxuICAgICAgICAgICAgUm9sZUFybjoge1xuICAgICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgICAgICAgICAnYXJuOicsXG4gICAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlBhcnRpdGlvbicgfSxcbiAgICAgICAgICAgICAgICAnOmlhbTo6eW91OnJvbGUvY2RrLWhuYjY1OWZkcy1jZm4tZXhlYy1yb2xlLXlvdS0nLFxuICAgICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpSZWdpb24nIH0sXG4gICAgICAgICAgICAgIF1dLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICAgIG9iamVjdExpa2Uoe1xuICAgICAgICAgIE5hbWU6ICdTdGFjay5EZXBsb3knLFxuICAgICAgICAgIFJvbGVBcm46IHtcbiAgICAgICAgICAgICdGbjo6Sm9pbic6IFsnJywgW1xuICAgICAgICAgICAgICAnYXJuOicsXG4gICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpQYXJ0aXRpb24nIH0sXG4gICAgICAgICAgICAgICc6aWFtOjp5b3U6cm9sZS9jZGstaG5iNjU5ZmRzLWRlcGxveS1yb2xlLXlvdS0nLFxuICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6UmVnaW9uJyB9LFxuICAgICAgICAgICAgXV0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBDb25maWd1cmF0aW9uOiBvYmplY3RMaWtlKHtcbiAgICAgICAgICAgIFN0YWNrTmFtZTogJ0Nyb3NzQWNjb3VudC1TdGFjaycsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KSxcbiAgfSk7XG59KTtcblxudGVzdCgnYWN0aW9uIGhhcyByaWdodCBzZXR0aW5ncyBmb3IgY3Jvc3MtcmVnaW9uIGRlcGxveW1lbnQnLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgcGlwZWxpbmUuYWRkQXBwbGljYXRpb25TdGFnZShuZXcgT25lU3RhY2tBcHAoYXBwLCAnQ3Jvc3NSZWdpb24nLCB7IGVudjogeyByZWdpb246ICdlbHNld2hlcmUnIH0gfSkpO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHBpcGVsaW5lU3RhY2spLnRvSGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlUGlwZWxpbmU6OlBpcGVsaW5lJywge1xuICAgIFN0YWdlczogYXJyYXlXaXRoKHtcbiAgICAgIE5hbWU6ICdDcm9zc1JlZ2lvbicsXG4gICAgICBBY3Rpb25zOiBbXG4gICAgICAgIG9iamVjdExpa2Uoe1xuICAgICAgICAgIE5hbWU6ICdTdGFjay5QcmVwYXJlJyxcbiAgICAgICAgICBSb2xlQXJuOiB7XG4gICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgICAgICAgJ2FybjonLFxuICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6UGFydGl0aW9uJyB9LFxuICAgICAgICAgICAgICAnOmlhbTo6JyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OkFjY291bnRJZCcgfSxcbiAgICAgICAgICAgICAgJzpyb2xlL2Nkay1obmI2NTlmZHMtZGVwbG95LXJvbGUtJyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OkFjY291bnRJZCcgfSxcbiAgICAgICAgICAgICAgJy1lbHNld2hlcmUnLFxuICAgICAgICAgICAgXV0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBSZWdpb246ICdlbHNld2hlcmUnLFxuICAgICAgICAgIENvbmZpZ3VyYXRpb246IG9iamVjdExpa2Uoe1xuICAgICAgICAgICAgU3RhY2tOYW1lOiAnQ3Jvc3NSZWdpb24tU3RhY2snLFxuICAgICAgICAgICAgUm9sZUFybjoge1xuICAgICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgICAgICAgICAnYXJuOicsXG4gICAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlBhcnRpdGlvbicgfSxcbiAgICAgICAgICAgICAgICAnOmlhbTo6JyxcbiAgICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6QWNjb3VudElkJyB9LFxuICAgICAgICAgICAgICAgICc6cm9sZS9jZGstaG5iNjU5ZmRzLWNmbi1leGVjLXJvbGUtJyxcbiAgICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6QWNjb3VudElkJyB9LFxuICAgICAgICAgICAgICAgICctZWxzZXdoZXJlJyxcbiAgICAgICAgICAgICAgXV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KSxcbiAgICAgICAgb2JqZWN0TGlrZSh7XG4gICAgICAgICAgTmFtZTogJ1N0YWNrLkRlcGxveScsXG4gICAgICAgICAgUm9sZUFybjoge1xuICAgICAgICAgICAgJ0ZuOjpKb2luJzogWycnLCBbXG4gICAgICAgICAgICAgICdhcm46JyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlBhcnRpdGlvbicgfSxcbiAgICAgICAgICAgICAgJzppYW06OicsXG4gICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpBY2NvdW50SWQnIH0sXG4gICAgICAgICAgICAgICc6cm9sZS9jZGstaG5iNjU5ZmRzLWRlcGxveS1yb2xlLScsXG4gICAgICAgICAgICAgIHsgUmVmOiAnQVdTOjpBY2NvdW50SWQnIH0sXG4gICAgICAgICAgICAgICctZWxzZXdoZXJlJyxcbiAgICAgICAgICAgIF1dLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgUmVnaW9uOiAnZWxzZXdoZXJlJyxcbiAgICAgICAgICBDb25maWd1cmF0aW9uOiBvYmplY3RMaWtlKHtcbiAgICAgICAgICAgIFN0YWNrTmFtZTogJ0Nyb3NzUmVnaW9uLVN0YWNrJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH0pLFxuICB9KTtcbn0pO1xuXG50ZXN0KCdhY3Rpb24gaGFzIHJpZ2h0IHNldHRpbmdzIGZvciBjcm9zcy1hY2NvdW50L2Nyb3NzLXJlZ2lvbiBkZXBsb3ltZW50JywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIHBpcGVsaW5lLmFkZEFwcGxpY2F0aW9uU3RhZ2UobmV3IE9uZVN0YWNrQXBwKGFwcCwgJ0Nyb3NzQm90aCcsIHsgZW52OiB7IGFjY291bnQ6ICd5b3UnLCByZWdpb246ICdlbHNld2hlcmUnIH0gfSkpO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHBpcGVsaW5lU3RhY2spLnRvSGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlUGlwZWxpbmU6OlBpcGVsaW5lJywge1xuICAgIFN0YWdlczogYXJyYXlXaXRoKHtcbiAgICAgIE5hbWU6ICdDcm9zc0JvdGgnLFxuICAgICAgQWN0aW9uczogW1xuICAgICAgICBvYmplY3RMaWtlKHtcbiAgICAgICAgICBOYW1lOiAnU3RhY2suUHJlcGFyZScsXG4gICAgICAgICAgUm9sZUFybjoge1xuICAgICAgICAgICAgJ0ZuOjpKb2luJzogWycnLCBbXG4gICAgICAgICAgICAgICdhcm46JyxcbiAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlBhcnRpdGlvbicgfSxcbiAgICAgICAgICAgICAgJzppYW06OnlvdTpyb2xlL2Nkay1obmI2NTlmZHMtZGVwbG95LXJvbGUteW91LWVsc2V3aGVyZScsXG4gICAgICAgICAgICBdXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFJlZ2lvbjogJ2Vsc2V3aGVyZScsXG4gICAgICAgICAgQ29uZmlndXJhdGlvbjogb2JqZWN0TGlrZSh7XG4gICAgICAgICAgICBTdGFja05hbWU6ICdDcm9zc0JvdGgtU3RhY2snLFxuICAgICAgICAgICAgUm9sZUFybjoge1xuICAgICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgICAgICAgICAnYXJuOicsXG4gICAgICAgICAgICAgICAgeyBSZWY6ICdBV1M6OlBhcnRpdGlvbicgfSxcbiAgICAgICAgICAgICAgICAnOmlhbTo6eW91OnJvbGUvY2RrLWhuYjY1OWZkcy1jZm4tZXhlYy1yb2xlLXlvdS1lbHNld2hlcmUnLFxuICAgICAgICAgICAgICBdXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgICBvYmplY3RMaWtlKHtcbiAgICAgICAgICBOYW1lOiAnU3RhY2suRGVwbG95JyxcbiAgICAgICAgICBSb2xlQXJuOiB7XG4gICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgICAgICAgJ2FybjonLFxuICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6UGFydGl0aW9uJyB9LFxuICAgICAgICAgICAgICAnOmlhbTo6eW91OnJvbGUvY2RrLWhuYjY1OWZkcy1kZXBsb3ktcm9sZS15b3UtZWxzZXdoZXJlJyxcbiAgICAgICAgICAgIF1dLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgUmVnaW9uOiAnZWxzZXdoZXJlJyxcbiAgICAgICAgICBDb25maWd1cmF0aW9uOiBvYmplY3RMaWtlKHtcbiAgICAgICAgICAgIFN0YWNrTmFtZTogJ0Nyb3NzQm90aC1TdGFjaycsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KSxcbiAgfSk7XG59KTtcblxudGVzdCgncGlwZWxpbmUgaGFzIHNlbGYtbXV0YXRpb24gc3RhZ2UnLCAoKSA9PiB7XG4gIC8vIFRIRU5cbiAgZXhwZWN0KHBpcGVsaW5lU3RhY2spLnRvSGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlUGlwZWxpbmU6OlBpcGVsaW5lJywge1xuICAgIFN0YWdlczogYXJyYXlXaXRoKHtcbiAgICAgIE5hbWU6ICdVcGRhdGVQaXBlbGluZScsXG4gICAgICBBY3Rpb25zOiBbXG4gICAgICAgIG9iamVjdExpa2Uoe1xuICAgICAgICAgIE5hbWU6ICdTZWxmTXV0YXRlJyxcbiAgICAgICAgICBDb25maWd1cmF0aW9uOiBvYmplY3RMaWtlKHtcbiAgICAgICAgICAgIFByb2plY3ROYW1lOiB7IFJlZjogYW55dGhpbmcoKSB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfSksXG4gIH0pO1xuXG4gIGV4cGVjdChwaXBlbGluZVN0YWNrKS50b0hhdmVSZXNvdXJjZUxpa2UoJ0FXUzo6Q29kZUJ1aWxkOjpQcm9qZWN0Jywge1xuICAgIEVudmlyb25tZW50OiB7XG4gICAgICBJbWFnZTogJ2F3cy9jb2RlYnVpbGQvc3RhbmRhcmQ6NC4wJyxcbiAgICB9LFxuICAgIFNvdXJjZToge1xuICAgICAgQnVpbGRTcGVjOiBlbmNvZGVkSnNvbihkZWVwT2JqZWN0TGlrZSh7XG4gICAgICAgIHBoYXNlczoge1xuICAgICAgICAgIGluc3RhbGw6IHtcbiAgICAgICAgICAgIGNvbW1hbmRzOiAnbnBtIGluc3RhbGwgLWcgYXdzLWNkaycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBidWlsZDoge1xuICAgICAgICAgICAgY29tbWFuZHM6IGFycmF5V2l0aCgnY2RrIC1hIC4gZGVwbG95IFBpcGVsaW5lU3RhY2sgLS1yZXF1aXJlLWFwcHJvdmFsPW5ldmVyIC0tdmVyYm9zZScpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KSksXG4gICAgICBUeXBlOiAnQ09ERVBJUEVMSU5FJyxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdzZWxmbXV0YXRpb24gc3RhZ2UgY29ycmVjdGx5IGlkZW50aWZpZXMgbmVzdGVkIGFzc2VtYmx5IG9mIHBpcGVsaW5lIHN0YWNrJywgKCkgPT4ge1xuICBjb25zdCBwaXBlbGluZVN0YWdlID0gbmV3IFN0YWdlKGFwcCwgJ1BpcGVsaW5lU3RhZ2UnKTtcbiAgY29uc3QgbmVzdGVkUGlwZWxpbmVTdGFjayA9IG5ldyBTdGFjayhwaXBlbGluZVN0YWdlLCAnUGlwZWxpbmVTdGFjaycsIHsgZW52OiBQSVBFTElORV9FTlYgfSk7XG4gIG5ldyBUZXN0R2l0SHViTnBtUGlwZWxpbmUobmVzdGVkUGlwZWxpbmVTdGFjaywgJ0NkaycpO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHN0YWNrVGVtcGxhdGUobmVzdGVkUGlwZWxpbmVTdGFjaykpLnRvSGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlQnVpbGQ6OlByb2plY3QnLCB7XG4gICAgRW52aXJvbm1lbnQ6IHtcbiAgICAgIEltYWdlOiAnYXdzL2NvZGVidWlsZC9zdGFuZGFyZDo0LjAnLFxuICAgIH0sXG4gICAgU291cmNlOiB7XG4gICAgICBCdWlsZFNwZWM6IGVuY29kZWRKc29uKGRlZXBPYmplY3RMaWtlKHtcbiAgICAgICAgcGhhc2VzOiB7XG4gICAgICAgICAgYnVpbGQ6IHtcbiAgICAgICAgICAgIGNvbW1hbmRzOiBhcnJheVdpdGgoJ2NkayAtYSBhc3NlbWJseS1QaXBlbGluZVN0YWdlIGRlcGxveSBQaXBlbGluZVN0YWdlLVBpcGVsaW5lU3RhY2sgLS1yZXF1aXJlLWFwcHJvdmFsPW5ldmVyIC0tdmVyYm9zZScpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KSksXG4gICAgfSxcbiAgfSk7XG59KTtcblxudGVzdCgnb3ZlcnJpZGRlbiBzdGFjayBuYW1lcyBhcmUgcmVzcGVjdGVkJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIHBpcGVsaW5lLmFkZEFwcGxpY2F0aW9uU3RhZ2UobmV3IE9uZVN0YWNrQXBwV2l0aEN1c3RvbU5hbWUoYXBwLCAnQXBwMScpKTtcbiAgcGlwZWxpbmUuYWRkQXBwbGljYXRpb25TdGFnZShuZXcgT25lU3RhY2tBcHBXaXRoQ3VzdG9tTmFtZShhcHAsICdBcHAyJykpO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KHBpcGVsaW5lU3RhY2spLnRvSGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlUGlwZWxpbmU6OlBpcGVsaW5lJywge1xuICAgIFN0YWdlczogYXJyYXlXaXRoKFxuICAgICAge1xuICAgICAgICBOYW1lOiAnQXBwMScsXG4gICAgICAgIEFjdGlvbnM6IGFycmF5V2l0aChvYmplY3RMaWtlKHtcbiAgICAgICAgICBOYW1lOiAnTXlGYW5jeVN0YWNrLlByZXBhcmUnLFxuICAgICAgICAgIENvbmZpZ3VyYXRpb246IG9iamVjdExpa2Uoe1xuICAgICAgICAgICAgU3RhY2tOYW1lOiAnTXlGYW5jeVN0YWNrJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSkpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgTmFtZTogJ0FwcDInLFxuICAgICAgICBBY3Rpb25zOiBhcnJheVdpdGgob2JqZWN0TGlrZSh7XG4gICAgICAgICAgTmFtZTogJ015RmFuY3lTdGFjay5QcmVwYXJlJyxcbiAgICAgICAgICBDb25maWd1cmF0aW9uOiBvYmplY3RMaWtlKHtcbiAgICAgICAgICAgIFN0YWNrTmFtZTogJ015RmFuY3lTdGFjaycsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pKSxcbiAgICAgIH0sXG4gICAgKSxcbiAgfSk7XG59KTtcblxudGVzdCgnY2FuIGNvbnRyb2wgZml4L0NMSSB2ZXJzaW9uIHVzZWQgaW4gcGlwZWxpbmUgc2VsZnVwZGF0ZScsICgpID0+IHtcbiAgLy8gV0hFTlxuICBjb25zdCBzdGFjazIgPSBuZXcgU3RhY2soYXBwLCAnU3RhY2syJywgeyBlbnY6IFBJUEVMSU5FX0VOViB9KTtcbiAgbmV3IFRlc3RHaXRIdWJOcG1QaXBlbGluZShzdGFjazIsICdDZGsyJywge1xuICAgIHBpcGVsaW5lTmFtZTogJ3ZwaXBlJyxcbiAgICBjZGtDbGlWZXJzaW9uOiAnMS4yLjMnLFxuICB9KTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChzdGFjazIpLnRvSGF2ZVJlc291cmNlTGlrZSgnQVdTOjpDb2RlQnVpbGQ6OlByb2plY3QnLCB7XG4gICAgTmFtZTogJ3ZwaXBlLXNlbGZ1cGRhdGUnLFxuICAgIFNvdXJjZToge1xuICAgICAgQnVpbGRTcGVjOiBlbmNvZGVkSnNvbihkZWVwT2JqZWN0TGlrZSh7XG4gICAgICAgIHBoYXNlczoge1xuICAgICAgICAgIGluc3RhbGw6IHtcbiAgICAgICAgICAgIGNvbW1hbmRzOiAnbnBtIGluc3RhbGwgLWcgYXdzLWNka0AxLjIuMycsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pKSxcbiAgICB9LFxuICB9KTtcbn0pO1xuXG50ZXN0KCdhZGQgYW5vdGhlciBhY3Rpb24gdG8gYW4gZXhpc3Rpbmcgc3RhZ2UnLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgcGlwZWxpbmUuc3RhZ2UoJ1NvdXJjZScpLmFkZEFjdGlvbihuZXcgY3BhLkdpdEh1YlNvdXJjZUFjdGlvbih7XG4gICAgYWN0aW9uTmFtZTogJ0dpdEh1YjInLFxuICAgIG9hdXRoVG9rZW46IFNlY3JldFZhbHVlLnBsYWluVGV4dCgnb29wcycpLFxuICAgIG91dHB1dDogbmV3IGNwLkFydGlmYWN0KCksXG4gICAgb3duZXI6ICdPV05FUicsXG4gICAgcmVwbzogJ1JFUE8nLFxuICB9KSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QocGlwZWxpbmVTdGFjaykudG9IYXZlUmVzb3VyY2VMaWtlKCdBV1M6OkNvZGVQaXBlbGluZTo6UGlwZWxpbmUnLCB7XG4gICAgU3RhZ2VzOiBhcnJheVdpdGgoe1xuICAgICAgTmFtZTogJ1NvdXJjZScsXG4gICAgICBBY3Rpb25zOiBbXG4gICAgICAgIG9iamVjdExpa2UoeyBOYW1lOiAnR2l0SHViJyB9KSxcbiAgICAgICAgb2JqZWN0TGlrZSh7IE5hbWU6ICdHaXRIdWIyJyB9KSxcbiAgICAgIF0sXG4gICAgfSksXG4gIH0pO1xufSk7XG5cbmNsYXNzIE9uZVN0YWNrQXBwIGV4dGVuZHMgU3RhZ2Uge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IFN0YWdlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICBuZXcgQnVja2V0U3RhY2sodGhpcywgJ1N0YWNrJyk7XG4gIH1cbn1cblxuY2xhc3MgT25lU3RhY2tBcHBXaXRoQ3VzdG9tTmFtZSBleHRlbmRzIFN0YWdlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBTdGFnZVByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgbmV3IEJ1Y2tldFN0YWNrKHRoaXMsICdTdGFjaycsIHtcbiAgICAgIHN0YWNrTmFtZTogJ015RmFuY3lTdGFjaycsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==