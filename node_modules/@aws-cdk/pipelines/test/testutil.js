"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stackTemplate = exports.rimraf = exports.BucketStack = exports.TestGitHubAction = exports.TestGitHubNpmPipeline = exports.TestApp = exports.PIPELINE_ENV = void 0;
const fs = require("fs");
const path = require("path");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const codepipeline_actions = require("@aws-cdk/aws-codepipeline-actions");
const s3 = require("@aws-cdk/aws-s3");
const core_1 = require("@aws-cdk/core");
const cdkp = require("../lib");
const construct_internals_1 = require("../lib/private/construct-internals");
exports.PIPELINE_ENV = {
    account: '123pipeline',
    region: 'us-pipeline',
};
class TestApp extends core_1.App {
    constructor(props) {
        super({
            context: {
                '@aws-cdk/core:newStyleStackSynthesis': '1',
            },
            stackTraces: false,
            autoSynth: false,
            runtimeInfo: false,
            treeMetadata: false,
            ...props,
        });
    }
    cleanup() {
        rimraf(construct_internals_1.assemblyBuilderOf(this).outdir);
    }
}
exports.TestApp = TestApp;
class TestGitHubNpmPipeline extends cdkp.CdkPipeline {
    constructor(scope, id, props) {
        var _a, _b;
        const sourceArtifact = (_a = props === null || props === void 0 ? void 0 : props.sourceArtifact) !== null && _a !== void 0 ? _a : new codepipeline.Artifact();
        const cloudAssemblyArtifact = (_b = props === null || props === void 0 ? void 0 : props.cloudAssemblyArtifact) !== null && _b !== void 0 ? _b : new codepipeline.Artifact();
        super(scope, id, {
            sourceAction: new TestGitHubAction(sourceArtifact),
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
            }),
            cloudAssemblyArtifact,
            ...props,
        });
        this.sourceArtifact = sourceArtifact;
        this.cloudAssemblyArtifact = cloudAssemblyArtifact;
    }
}
exports.TestGitHubNpmPipeline = TestGitHubNpmPipeline;
class TestGitHubAction extends codepipeline_actions.GitHubSourceAction {
    constructor(sourceArtifact) {
        super({
            actionName: 'GitHub',
            output: sourceArtifact,
            oauthToken: core_1.SecretValue.plainText('$3kr1t'),
            owner: 'test',
            repo: 'test',
            trigger: codepipeline_actions.GitHubTrigger.POLL,
        });
    }
}
exports.TestGitHubAction = TestGitHubAction;
/**
 * A test stack
 *
 * It contains a single Bucket. Such robust. Much uptime.
 */
class BucketStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.bucket = new s3.Bucket(this, 'Bucket');
    }
}
exports.BucketStack = BucketStack;
/**
 * rm -rf reimplementation, don't want to depend on an NPM package for this
 */
function rimraf(fsPath) {
    try {
        const isDir = fs.lstatSync(fsPath).isDirectory();
        if (isDir) {
            for (const file of fs.readdirSync(fsPath)) {
                rimraf(path.join(fsPath, file));
            }
            fs.rmdirSync(fsPath);
        }
        else {
            fs.unlinkSync(fsPath);
        }
    }
    catch (e) {
        // We will survive ENOENT
        if (e.code !== 'ENOENT') {
            throw e;
        }
    }
}
exports.rimraf = rimraf;
/**
 * Because 'expect(stack)' doesn't work correctly for stacks in nested assemblies
 */
function stackTemplate(stack) {
    const stage = core_1.Stage.of(stack);
    if (!stage) {
        throw new Error('stack not in a Stage');
    }
    return stage.synth().getStackArtifact(stack.artifactId);
}
exports.stackTemplate = stackTemplate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0dXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLDBEQUEwRDtBQUMxRCwwRUFBMEU7QUFDMUUsc0NBQXNDO0FBQ3RDLHdDQUE2RztBQUM3RywrQkFBK0I7QUFDL0IsNEVBQXVFO0FBRTFELFFBQUEsWUFBWSxHQUFnQjtJQUN2QyxPQUFPLEVBQUUsYUFBYTtJQUN0QixNQUFNLEVBQUUsYUFBYTtDQUN0QixDQUFDO0FBRUYsTUFBYSxPQUFRLFNBQVEsVUFBRztJQUM5QixZQUFZLEtBQXlCO1FBQ25DLEtBQUssQ0FBQztZQUNKLE9BQU8sRUFBRTtnQkFDUCxzQ0FBc0MsRUFBRSxHQUFHO2FBQzVDO1lBQ0QsV0FBVyxFQUFFLEtBQUs7WUFDbEIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsR0FBRyxLQUFLO1NBQ1QsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLENBQUMsdUNBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNGO0FBakJELDBCQWlCQztBQUVELE1BQWEscUJBQXNCLFNBQVEsSUFBSSxDQUFDLFdBQVc7SUFJekQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUE0Rjs7UUFDcEksTUFBTSxjQUFjLFNBQUcsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLGNBQWMsbUNBQUksSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDNUUsTUFBTSxxQkFBcUIsU0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUscUJBQXFCLG1DQUFJLElBQUksWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRTFGLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YsWUFBWSxFQUFFLElBQUksZ0JBQWdCLENBQUMsY0FBYyxDQUFDO1lBQ2xELFdBQVcsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ25ELGNBQWM7Z0JBQ2QscUJBQXFCO2FBQ3RCLENBQUM7WUFDRixxQkFBcUI7WUFDckIsR0FBRyxLQUFLO1NBQ1QsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLHFCQUFxQixDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQXJCRCxzREFxQkM7QUFHRCxNQUFhLGdCQUFpQixTQUFRLG9CQUFvQixDQUFDLGtCQUFrQjtJQUMzRSxZQUFZLGNBQXFDO1FBQy9DLEtBQUssQ0FBQztZQUNKLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLE1BQU0sRUFBRSxjQUFjO1lBQ3RCLFVBQVUsRUFBRSxrQkFBVyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7WUFDM0MsS0FBSyxFQUFFLE1BQU07WUFDYixJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsSUFBSTtTQUNqRCxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFYRCw0Q0FXQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFhLFdBQVksU0FBUSxZQUFLO0lBR3BDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBa0I7UUFDMUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDRjtBQVBELGtDQU9DO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixNQUFNLENBQUMsTUFBYztJQUNuQyxJQUFJO1FBQ0YsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVqRCxJQUFJLEtBQUssRUFBRTtZQUNULEtBQUssTUFBTSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDekMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDakM7WUFDRCxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTCxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO0tBQ0Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLHlCQUF5QjtRQUN6QixJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQUUsTUFBTSxDQUFDLENBQUM7U0FBRTtLQUN0QztBQUNILENBQUM7QUFoQkQsd0JBZ0JDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixhQUFhLENBQUMsS0FBWTtJQUN4QyxNQUFNLEtBQUssR0FBRyxZQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7S0FBRTtJQUN4RCxPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUpELHNDQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGNvZGVwaXBlbGluZSBmcm9tICdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lJztcbmltcG9ydCAqIGFzIGNvZGVwaXBlbGluZV9hY3Rpb25zIGZyb20gJ0Bhd3MtY2RrL2F3cy1jb2RlcGlwZWxpbmUtYWN0aW9ucyc7XG5pbXBvcnQgKiBhcyBzMyBmcm9tICdAYXdzLWNkay9hd3MtczMnO1xuaW1wb3J0IHsgQXBwLCBBcHBQcm9wcywgQ29uc3RydWN0LCBFbnZpcm9ubWVudCwgU2VjcmV0VmFsdWUsIFN0YWNrLCBTdGFja1Byb3BzLCBTdGFnZSB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgY2RrcCBmcm9tICcuLi9saWInO1xuaW1wb3J0IHsgYXNzZW1ibHlCdWlsZGVyT2YgfSBmcm9tICcuLi9saWIvcHJpdmF0ZS9jb25zdHJ1Y3QtaW50ZXJuYWxzJztcblxuZXhwb3J0IGNvbnN0IFBJUEVMSU5FX0VOVjogRW52aXJvbm1lbnQgPSB7XG4gIGFjY291bnQ6ICcxMjNwaXBlbGluZScsXG4gIHJlZ2lvbjogJ3VzLXBpcGVsaW5lJyxcbn07XG5cbmV4cG9ydCBjbGFzcyBUZXN0QXBwIGV4dGVuZHMgQXBwIHtcbiAgY29uc3RydWN0b3IocHJvcHM/OiBQYXJ0aWFsPEFwcFByb3BzPikge1xuICAgIHN1cGVyKHtcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgJ0Bhd3MtY2RrL2NvcmU6bmV3U3R5bGVTdGFja1N5bnRoZXNpcyc6ICcxJyxcbiAgICAgIH0sXG4gICAgICBzdGFja1RyYWNlczogZmFsc2UsXG4gICAgICBhdXRvU3ludGg6IGZhbHNlLFxuICAgICAgcnVudGltZUluZm86IGZhbHNlLFxuICAgICAgdHJlZU1ldGFkYXRhOiBmYWxzZSxcbiAgICAgIC4uLnByb3BzLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGNsZWFudXAoKSB7XG4gICAgcmltcmFmKGFzc2VtYmx5QnVpbGRlck9mKHRoaXMpLm91dGRpcik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRlc3RHaXRIdWJOcG1QaXBlbGluZSBleHRlbmRzIGNka3AuQ2RrUGlwZWxpbmUge1xuICBwdWJsaWMgcmVhZG9ubHkgc291cmNlQXJ0aWZhY3Q6IGNvZGVwaXBlbGluZS5BcnRpZmFjdDtcbiAgcHVibGljIHJlYWRvbmx5IGNsb3VkQXNzZW1ibHlBcnRpZmFjdDogY29kZXBpcGVsaW5lLkFydGlmYWN0O1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogUGFydGlhbDxjZGtwLkNka1BpcGVsaW5lUHJvcHM+ICYgeyByZWFkb25seSBzb3VyY2VBcnRpZmFjdD86IGNvZGVwaXBlbGluZS5BcnRpZmFjdCB9ICkge1xuICAgIGNvbnN0IHNvdXJjZUFydGlmYWN0ID0gcHJvcHM/LnNvdXJjZUFydGlmYWN0ID8/IG5ldyBjb2RlcGlwZWxpbmUuQXJ0aWZhY3QoKTtcbiAgICBjb25zdCBjbG91ZEFzc2VtYmx5QXJ0aWZhY3QgPSBwcm9wcz8uY2xvdWRBc3NlbWJseUFydGlmYWN0ID8/IG5ldyBjb2RlcGlwZWxpbmUuQXJ0aWZhY3QoKTtcblxuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgc291cmNlQWN0aW9uOiBuZXcgVGVzdEdpdEh1YkFjdGlvbihzb3VyY2VBcnRpZmFjdCksXG4gICAgICBzeW50aEFjdGlvbjogY2RrcC5TaW1wbGVTeW50aEFjdGlvbi5zdGFuZGFyZE5wbVN5bnRoKHtcbiAgICAgICAgc291cmNlQXJ0aWZhY3QsXG4gICAgICAgIGNsb3VkQXNzZW1ibHlBcnRpZmFjdCxcbiAgICAgIH0pLFxuICAgICAgY2xvdWRBc3NlbWJseUFydGlmYWN0LFxuICAgICAgLi4ucHJvcHMsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNvdXJjZUFydGlmYWN0ID0gc291cmNlQXJ0aWZhY3Q7XG4gICAgdGhpcy5jbG91ZEFzc2VtYmx5QXJ0aWZhY3QgPSBjbG91ZEFzc2VtYmx5QXJ0aWZhY3Q7XG4gIH1cbn1cblxuXG5leHBvcnQgY2xhc3MgVGVzdEdpdEh1YkFjdGlvbiBleHRlbmRzIGNvZGVwaXBlbGluZV9hY3Rpb25zLkdpdEh1YlNvdXJjZUFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHNvdXJjZUFydGlmYWN0OiBjb2RlcGlwZWxpbmUuQXJ0aWZhY3QpIHtcbiAgICBzdXBlcih7XG4gICAgICBhY3Rpb25OYW1lOiAnR2l0SHViJyxcbiAgICAgIG91dHB1dDogc291cmNlQXJ0aWZhY3QsXG4gICAgICBvYXV0aFRva2VuOiBTZWNyZXRWYWx1ZS5wbGFpblRleHQoJyQza3IxdCcpLFxuICAgICAgb3duZXI6ICd0ZXN0JyxcbiAgICAgIHJlcG86ICd0ZXN0JyxcbiAgICAgIHRyaWdnZXI6IGNvZGVwaXBlbGluZV9hY3Rpb25zLkdpdEh1YlRyaWdnZXIuUE9MTCxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEEgdGVzdCBzdGFja1xuICpcbiAqIEl0IGNvbnRhaW5zIGEgc2luZ2xlIEJ1Y2tldC4gU3VjaCByb2J1c3QuIE11Y2ggdXB0aW1lLlxuICovXG5leHBvcnQgY2xhc3MgQnVja2V0U3RhY2sgZXh0ZW5kcyBTdGFjayB7XG4gIHB1YmxpYyByZWFkb25seSBidWNrZXQ6IHMzLklCdWNrZXQ7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgdGhpcy5idWNrZXQgPSBuZXcgczMuQnVja2V0KHRoaXMsICdCdWNrZXQnKTtcbiAgfVxufVxuXG4vKipcbiAqIHJtIC1yZiByZWltcGxlbWVudGF0aW9uLCBkb24ndCB3YW50IHRvIGRlcGVuZCBvbiBhbiBOUE0gcGFja2FnZSBmb3IgdGhpc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmltcmFmKGZzUGF0aDogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgaXNEaXIgPSBmcy5sc3RhdFN5bmMoZnNQYXRoKS5pc0RpcmVjdG9yeSgpO1xuXG4gICAgaWYgKGlzRGlyKSB7XG4gICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZnMucmVhZGRpclN5bmMoZnNQYXRoKSkge1xuICAgICAgICByaW1yYWYocGF0aC5qb2luKGZzUGF0aCwgZmlsZSkpO1xuICAgICAgfVxuICAgICAgZnMucm1kaXJTeW5jKGZzUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZzLnVubGlua1N5bmMoZnNQYXRoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBXZSB3aWxsIHN1cnZpdmUgRU5PRU5UXG4gICAgaWYgKGUuY29kZSAhPT0gJ0VOT0VOVCcpIHsgdGhyb3cgZTsgfVxuICB9XG59XG5cbi8qKlxuICogQmVjYXVzZSAnZXhwZWN0KHN0YWNrKScgZG9lc24ndCB3b3JrIGNvcnJlY3RseSBmb3Igc3RhY2tzIGluIG5lc3RlZCBhc3NlbWJsaWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFja1RlbXBsYXRlKHN0YWNrOiBTdGFjaykge1xuICBjb25zdCBzdGFnZSA9IFN0YWdlLm9mKHN0YWNrKTtcbiAgaWYgKCFzdGFnZSkgeyB0aHJvdyBuZXcgRXJyb3IoJ3N0YWNrIG5vdCBpbiBhIFN0YWdlJyk7IH1cbiAgcmV0dXJuIHN0YWdlLnN5bnRoKCkuZ2V0U3RhY2tBcnRpZmFjdChzdGFjay5hcnRpZmFjdElkKTtcbn0iXX0=