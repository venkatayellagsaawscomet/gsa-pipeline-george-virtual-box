"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
require("@aws-cdk/assert/jest");
const core_1 = require("@aws-cdk/core");
const testmatchers_1 = require("./testmatchers");
const testutil_1 = require("./testutil");
let app;
let pipelineStack;
let pipeline;
beforeEach(() => {
    app = new testutil_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testutil_1.PIPELINE_ENV });
    pipeline = new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk');
});
test('interdependent stacks are in the right order', () => {
    // WHEN
    pipeline.addApplicationStage(new TwoStackApp(app, 'MyApp'));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'MyApp',
            Actions: testmatchers_1.sortedByRunOrder([
                assert_1.objectLike({ Name: 'Stack1.Prepare' }),
                assert_1.objectLike({ Name: 'Stack1.Deploy' }),
                assert_1.objectLike({ Name: 'Stack2.Prepare' }),
                assert_1.objectLike({ Name: 'Stack2.Deploy' }),
            ]),
        }),
    });
});
test('multiple independent stacks go in parallel', () => {
    // WHEN
    pipeline.addApplicationStage(new ThreeStackApp(app, 'MyApp'));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'MyApp',
            Actions: testmatchers_1.sortedByRunOrder([
                // 1 and 2 in parallel
                assert_1.objectLike({ Name: 'Stack1.Prepare' }),
                assert_1.objectLike({ Name: 'Stack2.Prepare' }),
                assert_1.objectLike({ Name: 'Stack1.Deploy' }),
                assert_1.objectLike({ Name: 'Stack2.Deploy' }),
                // Then 3
                assert_1.objectLike({ Name: 'Stack3.Prepare' }),
                assert_1.objectLike({ Name: 'Stack3.Deploy' }),
            ]),
        }),
    });
});
test('manual approval is inserted in correct location', () => {
    // WHEN
    pipeline.addApplicationStage(new TwoStackApp(app, 'MyApp'), {
        manualApprovals: true,
    });
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'MyApp',
            Actions: testmatchers_1.sortedByRunOrder([
                assert_1.objectLike({ Name: 'Stack1.Prepare' }),
                assert_1.objectLike({ Name: 'ManualApproval' }),
                assert_1.objectLike({ Name: 'Stack1.Deploy' }),
                assert_1.objectLike({ Name: 'Stack2.Prepare' }),
                assert_1.objectLike({ Name: 'ManualApproval2' }),
                assert_1.objectLike({ Name: 'Stack2.Deploy' }),
            ]),
        }),
    });
});
class TwoStackApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack2 = new testutil_1.BucketStack(this, 'Stack2');
        const stack1 = new testutil_1.BucketStack(this, 'Stack1');
        stack2.addDependency(stack1);
    }
}
/**
 * Three stacks where the last one depends on the earlier 2
 */
class ThreeStackApp extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack1 = new testutil_1.BucketStack(this, 'Stack1');
        const stack2 = new testutil_1.BucketStack(this, 'Stack2');
        const stack3 = new testutil_1.BucketStack(this, 'Stack3');
        stack3.addDependency(stack1);
        stack3.addDependency(stack2);
    }
}
//# sourceMappingURL=data:application/json;base64,