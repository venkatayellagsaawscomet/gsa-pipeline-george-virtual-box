"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// !cdk-integ PipelineStack
const path = require("path");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const codepipeline_actions = require("@aws-cdk/aws-codepipeline-actions");
const s3_assets = require("@aws-cdk/aws-s3-assets");
const core_1 = require("@aws-cdk/core");
const cdkp = require("../lib");
class MyStage extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack = new core_1.Stack(this, 'Stack', props);
        new s3_assets.Asset(stack, 'Asset', {
            path: path.join(__dirname, 'test-file-asset.txt'),
        });
        new s3_assets.Asset(stack, 'Asset2', {
            path: path.join(__dirname, 'test-file-asset-two.txt'),
        });
        new core_1.CfnResource(stack, 'Resource', {
            type: 'AWS::Test::SomeResource',
        });
    }
}
/**
 * The stack that defines the application pipeline
 */
class CdkpipelinesDemoPipelineStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const sourceArtifact = new codepipeline.Artifact();
        const cloudAssemblyArtifact = new codepipeline.Artifact('CloudAsm');
        const integTestArtifact = new codepipeline.Artifact('IntegTests');
        const pipeline = new cdkp.CdkPipeline(this, 'Pipeline', {
            cloudAssemblyArtifact,
            // Where the source can be found
            sourceAction: new codepipeline_actions.GitHubSourceAction({
                actionName: 'GitHub',
                output: sourceArtifact,
                oauthToken: core_1.SecretValue.plainText('not-a-secret'),
                owner: 'OWNER',
                repo: 'REPO',
                trigger: codepipeline_actions.GitHubTrigger.POLL,
            }),
            // How it will be built
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
                projectName: 'MyServicePipeline-synth',
                additionalArtifacts: [
                    {
                        directory: 'test',
                        artifact: integTestArtifact,
                    },
                ],
            }),
        });
        // This is where we add the application stages
        // ...
        const stage = pipeline.addApplicationStage(new MyStage(this, 'PreProd', {
            env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
        }));
        stage.addActions(new cdkp.ShellScriptAction({
            actionName: 'UseSource',
            commands: [
                // Comes from source
                'cat README.md',
            ],
            additionalArtifacts: [sourceArtifact],
        }));
    }
}
const app = new core_1.App({
    context: {
        '@aws-cdk/core:newStyleStackSynthesis': 'true',
    },
});
new CdkpipelinesDemoPipelineStack(app, 'PipelineStack', {
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucGlwZWxpbmUtd2l0aC1hc3NldHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5waXBlbGluZS13aXRoLWFzc2V0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRCQUE0QjtBQUM1Qiw2QkFBNkI7QUFDN0IsMERBQTBEO0FBQzFELDBFQUEwRTtBQUMxRSxvREFBb0Q7QUFDcEQsd0NBQStHO0FBQy9HLCtCQUErQjtBQUUvQixNQUFNLE9BQVEsU0FBUSxZQUFLO0lBQ3pCLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBa0I7UUFDMUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU5QyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtZQUNsQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUscUJBQXFCLENBQUM7U0FDbEQsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7WUFDbkMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHlCQUF5QixDQUFDO1NBQ3RELENBQUMsQ0FBQztRQUVILElBQUksa0JBQVcsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFO1lBQ2pDLElBQUksRUFBRSx5QkFBeUI7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLDZCQUE4QixTQUFRLFlBQUs7SUFDL0MsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFrQjtRQUMxRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLGNBQWMsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuRCxNQUFNLHFCQUFxQixHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxNQUFNLGlCQUFpQixHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVsRSxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUN0RCxxQkFBcUI7WUFFckIsZ0NBQWdDO1lBQ2hDLFlBQVksRUFBRSxJQUFJLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDO2dCQUN4RCxVQUFVLEVBQUUsUUFBUTtnQkFDcEIsTUFBTSxFQUFFLGNBQWM7Z0JBQ3RCLFVBQVUsRUFBRSxrQkFBVyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUM7Z0JBQ2pELEtBQUssRUFBRSxPQUFPO2dCQUNkLElBQUksRUFBRSxNQUFNO2dCQUNaLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsSUFBSTthQUNqRCxDQUFDO1lBRUYsdUJBQXVCO1lBQ3ZCLFdBQVcsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ25ELGNBQWM7Z0JBQ2QscUJBQXFCO2dCQUNyQixXQUFXLEVBQUUseUJBQXlCO2dCQUN0QyxtQkFBbUIsRUFBRTtvQkFDbkI7d0JBQ0UsU0FBUyxFQUFFLE1BQU07d0JBQ2pCLFFBQVEsRUFBRSxpQkFBaUI7cUJBQzVCO2lCQUNGO2FBQ0YsQ0FBQztTQUNILENBQUMsQ0FBQztRQUVILDhDQUE4QztRQUM5QyxNQUFNO1FBQ04sTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDdEUsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUU7U0FDMUYsQ0FBQyxDQUFDLENBQUM7UUFDSixLQUFLLENBQUMsVUFBVSxDQUNkLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQ3pCLFVBQVUsRUFBRSxXQUFXO1lBQ3ZCLFFBQVEsRUFBRTtnQkFDUixvQkFBb0I7Z0JBQ3BCLGVBQWU7YUFDaEI7WUFDRCxtQkFBbUIsRUFBRSxDQUFDLGNBQWMsQ0FBQztTQUN0QyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksVUFBRyxDQUFDO0lBQ2xCLE9BQU8sRUFBRTtRQUNQLHNDQUFzQyxFQUFFLE1BQU07S0FDL0M7Q0FDRixDQUFDLENBQUM7QUFDSCxJQUFJLDZCQUE2QixDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUU7SUFDdEQsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUU7Q0FDMUYsQ0FBQyxDQUFDO0FBQ0gsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vICFjZGstaW50ZWcgUGlwZWxpbmVTdGFja1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGNvZGVwaXBlbGluZSBmcm9tICdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lJztcbmltcG9ydCAqIGFzIGNvZGVwaXBlbGluZV9hY3Rpb25zIGZyb20gJ0Bhd3MtY2RrL2F3cy1jb2RlcGlwZWxpbmUtYWN0aW9ucyc7XG5pbXBvcnQgKiBhcyBzM19hc3NldHMgZnJvbSAnQGF3cy1jZGsvYXdzLXMzLWFzc2V0cyc7XG5pbXBvcnQgeyBBcHAsIENmblJlc291cmNlLCBDb25zdHJ1Y3QsIFNlY3JldFZhbHVlLCBTdGFjaywgU3RhY2tQcm9wcywgU3RhZ2UsIFN0YWdlUHJvcHMgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGNka3AgZnJvbSAnLi4vbGliJztcblxuY2xhc3MgTXlTdGFnZSBleHRlbmRzIFN0YWdlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBTdGFnZVByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjayh0aGlzLCAnU3RhY2snLCBwcm9wcyk7XG5cbiAgICBuZXcgczNfYXNzZXRzLkFzc2V0KHN0YWNrLCAnQXNzZXQnLCB7XG4gICAgICBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAndGVzdC1maWxlLWFzc2V0LnR4dCcpLFxuICAgIH0pO1xuICAgIG5ldyBzM19hc3NldHMuQXNzZXQoc3RhY2ssICdBc3NldDInLCB7XG4gICAgICBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAndGVzdC1maWxlLWFzc2V0LXR3by50eHQnKSxcbiAgICB9KTtcblxuICAgIG5ldyBDZm5SZXNvdXJjZShzdGFjaywgJ1Jlc291cmNlJywge1xuICAgICAgdHlwZTogJ0FXUzo6VGVzdDo6U29tZVJlc291cmNlJyxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBzdGFjayB0aGF0IGRlZmluZXMgdGhlIGFwcGxpY2F0aW9uIHBpcGVsaW5lXG4gKi9cbmNsYXNzIENka3BpcGVsaW5lc0RlbW9QaXBlbGluZVN0YWNrIGV4dGVuZHMgU3RhY2sge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IFN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IHNvdXJjZUFydGlmYWN0ID0gbmV3IGNvZGVwaXBlbGluZS5BcnRpZmFjdCgpO1xuICAgIGNvbnN0IGNsb3VkQXNzZW1ibHlBcnRpZmFjdCA9IG5ldyBjb2RlcGlwZWxpbmUuQXJ0aWZhY3QoJ0Nsb3VkQXNtJyk7XG4gICAgY29uc3QgaW50ZWdUZXN0QXJ0aWZhY3QgPSBuZXcgY29kZXBpcGVsaW5lLkFydGlmYWN0KCdJbnRlZ1Rlc3RzJyk7XG5cbiAgICBjb25zdCBwaXBlbGluZSA9IG5ldyBjZGtwLkNka1BpcGVsaW5lKHRoaXMsICdQaXBlbGluZScsIHtcbiAgICAgIGNsb3VkQXNzZW1ibHlBcnRpZmFjdCxcblxuICAgICAgLy8gV2hlcmUgdGhlIHNvdXJjZSBjYW4gYmUgZm91bmRcbiAgICAgIHNvdXJjZUFjdGlvbjogbmV3IGNvZGVwaXBlbGluZV9hY3Rpb25zLkdpdEh1YlNvdXJjZUFjdGlvbih7XG4gICAgICAgIGFjdGlvbk5hbWU6ICdHaXRIdWInLFxuICAgICAgICBvdXRwdXQ6IHNvdXJjZUFydGlmYWN0LFxuICAgICAgICBvYXV0aFRva2VuOiBTZWNyZXRWYWx1ZS5wbGFpblRleHQoJ25vdC1hLXNlY3JldCcpLFxuICAgICAgICBvd25lcjogJ09XTkVSJyxcbiAgICAgICAgcmVwbzogJ1JFUE8nLFxuICAgICAgICB0cmlnZ2VyOiBjb2RlcGlwZWxpbmVfYWN0aW9ucy5HaXRIdWJUcmlnZ2VyLlBPTEwsXG4gICAgICB9KSxcblxuICAgICAgLy8gSG93IGl0IHdpbGwgYmUgYnVpbHRcbiAgICAgIHN5bnRoQWN0aW9uOiBjZGtwLlNpbXBsZVN5bnRoQWN0aW9uLnN0YW5kYXJkTnBtU3ludGgoe1xuICAgICAgICBzb3VyY2VBcnRpZmFjdCxcbiAgICAgICAgY2xvdWRBc3NlbWJseUFydGlmYWN0LFxuICAgICAgICBwcm9qZWN0TmFtZTogJ015U2VydmljZVBpcGVsaW5lLXN5bnRoJyxcbiAgICAgICAgYWRkaXRpb25hbEFydGlmYWN0czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRpcmVjdG9yeTogJ3Rlc3QnLFxuICAgICAgICAgICAgYXJ0aWZhY3Q6IGludGVnVGVzdEFydGlmYWN0LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIC8vIFRoaXMgaXMgd2hlcmUgd2UgYWRkIHRoZSBhcHBsaWNhdGlvbiBzdGFnZXNcbiAgICAvLyAuLi5cbiAgICBjb25zdCBzdGFnZSA9IHBpcGVsaW5lLmFkZEFwcGxpY2F0aW9uU3RhZ2UobmV3IE15U3RhZ2UodGhpcywgJ1ByZVByb2QnLCB7XG4gICAgICBlbnY6IHsgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCwgcmVnaW9uOiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT04gfSxcbiAgICB9KSk7XG4gICAgc3RhZ2UuYWRkQWN0aW9ucyhcbiAgICAgIG5ldyBjZGtwLlNoZWxsU2NyaXB0QWN0aW9uKHtcbiAgICAgICAgYWN0aW9uTmFtZTogJ1VzZVNvdXJjZScsXG4gICAgICAgIGNvbW1hbmRzOiBbXG4gICAgICAgICAgLy8gQ29tZXMgZnJvbSBzb3VyY2VcbiAgICAgICAgICAnY2F0IFJFQURNRS5tZCcsXG4gICAgICAgIF0sXG4gICAgICAgIGFkZGl0aW9uYWxBcnRpZmFjdHM6IFtzb3VyY2VBcnRpZmFjdF0sXG4gICAgICB9KSxcbiAgICApO1xuICB9XG59XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoe1xuICBjb250ZXh0OiB7XG4gICAgJ0Bhd3MtY2RrL2NvcmU6bmV3U3R5bGVTdGFja1N5bnRoZXNpcyc6ICd0cnVlJyxcbiAgfSxcbn0pO1xubmV3IENka3BpcGVsaW5lc0RlbW9QaXBlbGluZVN0YWNrKGFwcCwgJ1BpcGVsaW5lU3RhY2snLCB7XG4gIGVudjogeyBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULCByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB9LFxufSk7XG5hcHAuc3ludGgoKTtcbiJdfQ==