"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
require("@aws-cdk/assert/jest");
const cp = require("@aws-cdk/aws-codepipeline");
const core_1 = require("@aws-cdk/core");
const cdkp = require("../lib");
const testutil_1 = require("./testutil");
let app;
let pipelineStack;
let sourceArtifact;
let cloudAssemblyArtifact;
let codePipeline;
beforeEach(() => {
    app = new testutil_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testutil_1.PIPELINE_ENV });
    sourceArtifact = new cp.Artifact();
    cloudAssemblyArtifact = new cp.Artifact();
});
afterEach(() => {
    app.cleanup();
});
describe('with empty existing CodePipeline', () => {
    beforeEach(() => {
        codePipeline = new cp.Pipeline(pipelineStack, 'CodePipeline');
    });
    test('both actions are required', () => {
        // WHEN
        expect(() => {
            new cdkp.CdkPipeline(pipelineStack, 'Cdk', { cloudAssemblyArtifact, codePipeline });
        }).toThrow(/You must pass a 'sourceAction'/);
    });
    test('can give both actions', () => {
        // WHEN
        new cdkp.CdkPipeline(pipelineStack, 'Cdk', {
            cloudAssemblyArtifact,
            codePipeline,
            sourceAction: new testutil_1.TestGitHubAction(sourceArtifact),
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({ sourceArtifact, cloudAssemblyArtifact }),
        });
        // THEN
        expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
            Stages: [
                assert_1.objectLike({ Name: 'Source' }),
                assert_1.objectLike({ Name: 'Build' }),
                assert_1.objectLike({ Name: 'UpdatePipeline' }),
            ],
        });
    });
});
describe('with custom Source stage in existing Pipeline', () => {
    beforeEach(() => {
        codePipeline = new cp.Pipeline(pipelineStack, 'CodePipeline', {
            stages: [
                {
                    stageName: 'CustomSource',
                    actions: [new testutil_1.TestGitHubAction(sourceArtifact)],
                },
            ],
        });
    });
    test('synth action is required', () => {
        // WHEN
        expect(() => {
            new cdkp.CdkPipeline(pipelineStack, 'Cdk', { cloudAssemblyArtifact, codePipeline });
        }).toThrow(/You must pass a 'synthAction'/);
    });
    test('Work with synthAction', () => {
        // WHEN
        new cdkp.CdkPipeline(pipelineStack, 'Cdk', {
            codePipeline,
            cloudAssemblyArtifact,
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({ sourceArtifact, cloudAssemblyArtifact }),
        });
        // THEN
        expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
            Stages: [
                assert_1.objectLike({ Name: 'CustomSource' }),
                assert_1.objectLike({ Name: 'Build' }),
                assert_1.objectLike({ Name: 'UpdatePipeline' }),
            ],
        });
    });
});
describe('with Source and Build stages in existing Pipeline', () => {
    beforeEach(() => {
        codePipeline = new cp.Pipeline(pipelineStack, 'CodePipeline', {
            stages: [
                {
                    stageName: 'CustomSource',
                    actions: [new testutil_1.TestGitHubAction(sourceArtifact)],
                },
                {
                    stageName: 'CustomBuild',
                    actions: [cdkp.SimpleSynthAction.standardNpmSynth({ sourceArtifact, cloudAssemblyArtifact })],
                },
            ],
        });
    });
    test('can supply no actions', () => {
        // WHEN
        new cdkp.CdkPipeline(pipelineStack, 'Cdk', {
            codePipeline,
            cloudAssemblyArtifact,
        });
        // THEN
        expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
            Stages: [
                assert_1.objectLike({ Name: 'CustomSource' }),
                assert_1.objectLike({ Name: 'CustomBuild' }),
                assert_1.objectLike({ Name: 'UpdatePipeline' }),
            ],
        });
    });
});
//# sourceMappingURL=data:application/json;base64,