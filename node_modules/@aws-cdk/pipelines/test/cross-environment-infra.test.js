"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
require("@aws-cdk/assert/jest");
const core_1 = require("@aws-cdk/core");
const testutil_1 = require("./testutil");
let app;
let pipelineStack;
let pipeline;
beforeEach(() => {
    app = new testutil_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testutil_1.PIPELINE_ENV });
    pipeline = new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk');
});
afterEach(() => {
    app.cleanup();
});
test('in a cross-account/cross-region setup, artifact bucket can be read by deploy role', () => {
    // WHEN
    pipeline.addApplicationStage(new TestApplication(app, 'MyApp', {
        env: { account: '321elsewhere', region: 'us-elsewhere' },
    }));
    // THEN
    app.synth();
    const supportStack = app.node.findAll().filter(core_1.Stack.isStack).find(s => s.stackName === 'PipelineStack-support-us-elsewhere');
    expect(supportStack).not.toBeUndefined();
    expect(supportStack).toHaveResourceLike('AWS::S3::BucketPolicy', {
        PolicyDocument: {
            Statement: assert_1.arrayWith(assert_1.objectLike({
                Action: assert_1.arrayWith('s3:GetObject*', 's3:GetBucket*', 's3:List*'),
                Principal: {
                    AWS: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                assert_1.stringLike('*-deploy-role-*'),
                            ]],
                    },
                },
            })),
        },
    });
});
test('in a cross-account/same-region setup, artifact bucket can be read by deploy role', () => {
    // WHEN
    pipeline.addApplicationStage(new TestApplication(app, 'MyApp', {
        env: { account: '321elsewhere', region: testutil_1.PIPELINE_ENV.region },
    }));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::S3::BucketPolicy', {
        PolicyDocument: {
            Statement: assert_1.arrayWith(assert_1.objectLike({
                Action: ['s3:GetObject*', 's3:GetBucket*', 's3:List*'],
                Principal: {
                    AWS: {
                        'Fn::Join': ['', [
                                'arn:',
                                { Ref: 'AWS::Partition' },
                                assert_1.stringLike('*-deploy-role-*'),
                            ]],
                    },
                },
            })),
        },
    });
});
/**
 * Our application
 */
class TestApplication extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        new testutil_1.BucketStack(this, 'Stack');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3MtZW52aXJvbm1lbnQtaW5mcmEudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyb3NzLWVudmlyb25tZW50LWluZnJhLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBb0U7QUFDcEUsZ0NBQThCO0FBQzlCLHdDQUFvRTtBQUVwRSx5Q0FBdUY7QUFFdkYsSUFBSSxHQUFZLENBQUM7QUFDakIsSUFBSSxhQUFvQixDQUFDO0FBQ3pCLElBQUksUUFBMEIsQ0FBQztBQUUvQixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsR0FBRyxHQUFHLElBQUksa0JBQU8sRUFBRSxDQUFDO0lBQ3BCLGFBQWEsR0FBRyxJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLEVBQUUsR0FBRyxFQUFFLHVCQUFZLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZFLFFBQVEsR0FBRyxJQUFJLGdDQUFxQixDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM3RCxDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsbUZBQW1GLEVBQUUsR0FBRyxFQUFFO0lBQzdGLE9BQU87SUFDUCxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSxlQUFlLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRTtRQUM3RCxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUU7S0FDekQsQ0FBQyxDQUFDLENBQUM7SUFFSixPQUFPO0lBQ1AsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ1osTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssb0NBQW9DLENBQUMsQ0FBQztJQUM5SCxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBRXpDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyx1QkFBdUIsRUFBRTtRQUMvRCxjQUFjLEVBQUU7WUFDZCxTQUFTLEVBQUUsa0JBQVMsQ0FBQyxtQkFBVSxDQUFDO2dCQUM5QixNQUFNLEVBQUUsa0JBQVMsQ0FBQyxlQUFlLEVBQUUsZUFBZSxFQUFFLFVBQVUsQ0FBQztnQkFDL0QsU0FBUyxFQUFFO29CQUNULEdBQUcsRUFBRTt3QkFDSCxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0NBQ2YsTUFBTTtnQ0FDTixFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRTtnQ0FDekIsbUJBQVUsQ0FBQyxpQkFBaUIsQ0FBQzs2QkFDOUIsQ0FBQztxQkFDSDtpQkFDRjthQUNGLENBQUMsQ0FBQztTQUNKO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsa0ZBQWtGLEVBQUUsR0FBRyxFQUFFO0lBQzVGLE9BQU87SUFDUCxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSxlQUFlLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRTtRQUM3RCxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSx1QkFBWSxDQUFDLE1BQU0sRUFBRTtLQUM5RCxDQUFDLENBQUMsQ0FBQztJQUVKLE9BQU87SUFDUCxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsa0JBQWtCLENBQUMsdUJBQXVCLEVBQUU7UUFDaEUsY0FBYyxFQUFFO1lBQ2QsU0FBUyxFQUFFLGtCQUFTLENBQUMsbUJBQVUsQ0FBQztnQkFDOUIsTUFBTSxFQUFFLENBQUMsZUFBZSxFQUFFLGVBQWUsRUFBRSxVQUFVLENBQUM7Z0JBQ3RELFNBQVMsRUFBRTtvQkFDVCxHQUFHLEVBQUU7d0JBQ0gsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO2dDQUNmLE1BQU07Z0NBQ04sRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUU7Z0NBQ3pCLG1CQUFVLENBQUMsaUJBQWlCLENBQUM7NkJBQzlCLENBQUM7cUJBQ0g7aUJBQ0Y7YUFDRixDQUFDLENBQUM7U0FDSjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUg7O0dBRUc7QUFDSCxNQUFNLGVBQWdCLFNBQVEsWUFBSztJQUNqQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWlCO1FBQ3pELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLElBQUksc0JBQVcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXJyYXlXaXRoLCBvYmplY3RMaWtlLCBzdHJpbmdMaWtlIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCAnQGF3cy1jZGsvYXNzZXJ0L2plc3QnO1xuaW1wb3J0IHsgQ29uc3RydWN0LCBTdGFjaywgU3RhZ2UsIFN0YWdlUHJvcHMgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGNka3AgZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IEJ1Y2tldFN0YWNrLCBQSVBFTElORV9FTlYsIFRlc3RBcHAsIFRlc3RHaXRIdWJOcG1QaXBlbGluZSB9IGZyb20gJy4vdGVzdHV0aWwnO1xuXG5sZXQgYXBwOiBUZXN0QXBwO1xubGV0IHBpcGVsaW5lU3RhY2s6IFN0YWNrO1xubGV0IHBpcGVsaW5lOiBjZGtwLkNka1BpcGVsaW5lO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgYXBwID0gbmV3IFRlc3RBcHAoKTtcbiAgcGlwZWxpbmVTdGFjayA9IG5ldyBTdGFjayhhcHAsICdQaXBlbGluZVN0YWNrJywgeyBlbnY6IFBJUEVMSU5FX0VOViB9KTtcbiAgcGlwZWxpbmUgPSBuZXcgVGVzdEdpdEh1Yk5wbVBpcGVsaW5lKHBpcGVsaW5lU3RhY2ssICdDZGsnKTtcbn0pO1xuXG5hZnRlckVhY2goKCkgPT4ge1xuICBhcHAuY2xlYW51cCgpO1xufSk7XG5cbnRlc3QoJ2luIGEgY3Jvc3MtYWNjb3VudC9jcm9zcy1yZWdpb24gc2V0dXAsIGFydGlmYWN0IGJ1Y2tldCBjYW4gYmUgcmVhZCBieSBkZXBsb3kgcm9sZScsICgpID0+IHtcbiAgLy8gV0hFTlxuICBwaXBlbGluZS5hZGRBcHBsaWNhdGlvblN0YWdlKG5ldyBUZXN0QXBwbGljYXRpb24oYXBwLCAnTXlBcHAnLCB7XG4gICAgZW52OiB7IGFjY291bnQ6ICczMjFlbHNld2hlcmUnLCByZWdpb246ICd1cy1lbHNld2hlcmUnIH0sXG4gIH0pKTtcblxuICAvLyBUSEVOXG4gIGFwcC5zeW50aCgpO1xuICBjb25zdCBzdXBwb3J0U3RhY2sgPSBhcHAubm9kZS5maW5kQWxsKCkuZmlsdGVyKFN0YWNrLmlzU3RhY2spLmZpbmQocyA9PiBzLnN0YWNrTmFtZSA9PT0gJ1BpcGVsaW5lU3RhY2stc3VwcG9ydC11cy1lbHNld2hlcmUnKTtcbiAgZXhwZWN0KHN1cHBvcnRTdGFjaykubm90LnRvQmVVbmRlZmluZWQoKTtcblxuICBleHBlY3Qoc3VwcG9ydFN0YWNrKS50b0hhdmVSZXNvdXJjZUxpa2UoJ0FXUzo6UzM6OkJ1Y2tldFBvbGljeScsIHtcbiAgICBQb2xpY3lEb2N1bWVudDoge1xuICAgICAgU3RhdGVtZW50OiBhcnJheVdpdGgob2JqZWN0TGlrZSh7XG4gICAgICAgIEFjdGlvbjogYXJyYXlXaXRoKCdzMzpHZXRPYmplY3QqJywgJ3MzOkdldEJ1Y2tldConLCAnczM6TGlzdConKSxcbiAgICAgICAgUHJpbmNpcGFsOiB7XG4gICAgICAgICAgQVdTOiB7XG4gICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgICAgICAgJ2FybjonLFxuICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6UGFydGl0aW9uJyB9LFxuICAgICAgICAgICAgICBzdHJpbmdMaWtlKCcqLWRlcGxveS1yb2xlLSonKSxcbiAgICAgICAgICAgIF1dLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KSksXG4gICAgfSxcbiAgfSk7XG59KTtcblxudGVzdCgnaW4gYSBjcm9zcy1hY2NvdW50L3NhbWUtcmVnaW9uIHNldHVwLCBhcnRpZmFjdCBidWNrZXQgY2FuIGJlIHJlYWQgYnkgZGVwbG95IHJvbGUnLCAoKSA9PiB7XG4gIC8vIFdIRU5cbiAgcGlwZWxpbmUuYWRkQXBwbGljYXRpb25TdGFnZShuZXcgVGVzdEFwcGxpY2F0aW9uKGFwcCwgJ015QXBwJywge1xuICAgIGVudjogeyBhY2NvdW50OiAnMzIxZWxzZXdoZXJlJywgcmVnaW9uOiBQSVBFTElORV9FTlYucmVnaW9uIH0sXG4gIH0pKTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChwaXBlbGluZVN0YWNrKS50b0hhdmVSZXNvdXJjZUxpa2UoJ0FXUzo6UzM6OkJ1Y2tldFBvbGljeScsIHtcbiAgICBQb2xpY3lEb2N1bWVudDoge1xuICAgICAgU3RhdGVtZW50OiBhcnJheVdpdGgob2JqZWN0TGlrZSh7XG4gICAgICAgIEFjdGlvbjogWydzMzpHZXRPYmplY3QqJywgJ3MzOkdldEJ1Y2tldConLCAnczM6TGlzdConXSxcbiAgICAgICAgUHJpbmNpcGFsOiB7XG4gICAgICAgICAgQVdTOiB7XG4gICAgICAgICAgICAnRm46OkpvaW4nOiBbJycsIFtcbiAgICAgICAgICAgICAgJ2FybjonLFxuICAgICAgICAgICAgICB7IFJlZjogJ0FXUzo6UGFydGl0aW9uJyB9LFxuICAgICAgICAgICAgICBzdHJpbmdMaWtlKCcqLWRlcGxveS1yb2xlLSonKSxcbiAgICAgICAgICAgIF1dLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KSksXG4gICAgfSxcbiAgfSk7XG59KTtcblxuLyoqXG4gKiBPdXIgYXBwbGljYXRpb25cbiAqL1xuY2xhc3MgVGVzdEFwcGxpY2F0aW9uIGV4dGVuZHMgU3RhZ2Uge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU3RhZ2VQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuICAgIG5ldyBCdWNrZXRTdGFjayh0aGlzLCAnU3RhY2snKTtcbiAgfVxufVxuIl19