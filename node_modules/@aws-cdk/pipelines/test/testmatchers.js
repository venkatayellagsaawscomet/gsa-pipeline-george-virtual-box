"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortedByRunOrder = void 0;
const assert_1 = require("@aws-cdk/assert");
/**
 * Sort an array (of Actions) by their RunOrder field before applying a matcher.
 *
 * Makes the matcher independent of the order in which the Actions get synthed
 * to the template. Elements with the same RunOrder will be sorted by name.
 */
function sortedByRunOrder(matcher) {
    return assert_1.annotateMatcher({ $sortedByRunOrder: matcher }, (value, failure) => {
        if (!Array.isArray(value)) {
            failure.failureReason = `Expected an Array, but got '${typeof value}'`;
            return false;
        }
        value = value.slice();
        value.sort((a, b) => {
            if (a.RunOrder !== b.RunOrder) {
                return a.RunOrder - b.RunOrder;
            }
            return a.Name.localeCompare(b.Name);
        });
        return assert_1.matcherFrom(matcher)(value, failure);
    });
}
exports.sortedByRunOrder = sortedByRunOrder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdG1hdGNoZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdG1hdGNoZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDRDQUFtRztBQUVuRzs7Ozs7R0FLRztBQUNILFNBQWdCLGdCQUFnQixDQUFDLE9BQVk7SUFDM0MsT0FBTyx3QkFBZSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxLQUFVLEVBQUUsT0FBMEIsRUFBRSxFQUFFO1FBQ2hHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxhQUFhLEdBQUcsK0JBQStCLE9BQU8sS0FBSyxHQUFHLENBQUM7WUFDdkUsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFdEIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQU0sRUFBRSxDQUFNLEVBQUUsRUFBRTtZQUM1QixJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLFFBQVEsRUFBRTtnQkFBRSxPQUFPLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQzthQUFFO1lBQ2xFLE9BQVEsQ0FBQyxDQUFDLElBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxvQkFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFoQkQsNENBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5ub3RhdGVNYXRjaGVyLCBJbnNwZWN0aW9uRmFpbHVyZSwgbWF0Y2hlckZyb20sIFByb3BlcnR5TWF0Y2hlciB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydCc7XG5cbi8qKlxuICogU29ydCBhbiBhcnJheSAob2YgQWN0aW9ucykgYnkgdGhlaXIgUnVuT3JkZXIgZmllbGQgYmVmb3JlIGFwcGx5aW5nIGEgbWF0Y2hlci5cbiAqXG4gKiBNYWtlcyB0aGUgbWF0Y2hlciBpbmRlcGVuZGVudCBvZiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhlIEFjdGlvbnMgZ2V0IHN5bnRoZWRcbiAqIHRvIHRoZSB0ZW1wbGF0ZS4gRWxlbWVudHMgd2l0aCB0aGUgc2FtZSBSdW5PcmRlciB3aWxsIGJlIHNvcnRlZCBieSBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc29ydGVkQnlSdW5PcmRlcihtYXRjaGVyOiBhbnkpOiBQcm9wZXJ0eU1hdGNoZXIge1xuICByZXR1cm4gYW5ub3RhdGVNYXRjaGVyKHsgJHNvcnRlZEJ5UnVuT3JkZXI6IG1hdGNoZXIgfSwgKHZhbHVlOiBhbnksIGZhaWx1cmU6IEluc3BlY3Rpb25GYWlsdXJlKSA9PiB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgZmFpbHVyZS5mYWlsdXJlUmVhc29uID0gYEV4cGVjdGVkIGFuIEFycmF5LCBidXQgZ290ICcke3R5cGVvZiB2YWx1ZX0nYDtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKCk7XG5cbiAgICB2YWx1ZS5zb3J0KChhOiBhbnksIGI6IGFueSkgPT4ge1xuICAgICAgaWYgKGEuUnVuT3JkZXIgIT09IGIuUnVuT3JkZXIpIHsgcmV0dXJuIGEuUnVuT3JkZXIgLSBiLlJ1bk9yZGVyOyB9XG4gICAgICByZXR1cm4gKGEuTmFtZSBhcyBzdHJpbmcpLmxvY2FsZUNvbXBhcmUoYi5OYW1lKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBtYXRjaGVyRnJvbShtYXRjaGVyKSh2YWx1ZSwgZmFpbHVyZSk7XG4gIH0pO1xufSJdfQ==