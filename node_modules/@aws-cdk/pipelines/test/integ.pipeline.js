"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// !cdk-integ PipelineStack
const codepipeline = require("@aws-cdk/aws-codepipeline");
const codepipeline_actions = require("@aws-cdk/aws-codepipeline-actions");
const core_1 = require("@aws-cdk/core");
const cdkp = require("../lib");
class MyStage extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack = new core_1.Stack(this, 'Stack', props);
        new core_1.CfnResource(stack, 'Resource', {
            type: 'AWS::Test::SomeResource',
        });
    }
}
/**
 * The stack that defines the application pipeline
 */
class CdkpipelinesDemoPipelineStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const sourceArtifact = new codepipeline.Artifact();
        const cloudAssemblyArtifact = new codepipeline.Artifact('CloudAsm');
        const integTestArtifact = new codepipeline.Artifact('IntegTests');
        const pipeline = new cdkp.CdkPipeline(this, 'Pipeline', {
            cloudAssemblyArtifact,
            // Where the source can be found
            sourceAction: new codepipeline_actions.GitHubSourceAction({
                actionName: 'GitHub',
                output: sourceArtifact,
                oauthToken: core_1.SecretValue.plainText('not-a-secret'),
                owner: 'OWNER',
                repo: 'REPO',
                trigger: codepipeline_actions.GitHubTrigger.POLL,
            }),
            // How it will be built
            synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
                sourceArtifact,
                cloudAssemblyArtifact,
                projectName: 'MyServicePipeline-synth',
                additionalArtifacts: [
                    {
                        directory: 'test',
                        artifact: integTestArtifact,
                    },
                ],
            }),
        });
        // This is where we add the application stages
        // ...
        const stage = pipeline.addApplicationStage(new MyStage(this, 'PreProd', {
            env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
        }));
        stage.addActions(new cdkp.ShellScriptAction({
            actionName: 'UseSource',
            commands: [
                // Comes from source
                'cat README.md',
            ],
            additionalArtifacts: [sourceArtifact],
        }));
    }
}
const app = new core_1.App({
    context: {
        '@aws-cdk/core:newStyleStackSynthesis': 'true',
    },
});
new CdkpipelinesDemoPipelineStack(app, 'PipelineStack', {
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucGlwZWxpbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5waXBlbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRCQUE0QjtBQUM1QiwwREFBMEQ7QUFDMUQsMEVBQTBFO0FBQzFFLHdDQUErRztBQUMvRywrQkFBK0I7QUFFL0IsTUFBTSxPQUFRLFNBQVEsWUFBSztJQUN6QixZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWtCO1FBQzFELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUMsSUFBSSxrQkFBVyxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7WUFDakMsSUFBSSxFQUFFLHlCQUF5QjtTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sNkJBQThCLFNBQVEsWUFBSztJQUMvQyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWtCO1FBQzFELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sY0FBYyxHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25ELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRWxFLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3RELHFCQUFxQjtZQUVyQixnQ0FBZ0M7WUFDaEMsWUFBWSxFQUFFLElBQUksb0JBQW9CLENBQUMsa0JBQWtCLENBQUM7Z0JBQ3hELFVBQVUsRUFBRSxRQUFRO2dCQUNwQixNQUFNLEVBQUUsY0FBYztnQkFDdEIsVUFBVSxFQUFFLGtCQUFXLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztnQkFDakQsS0FBSyxFQUFFLE9BQU87Z0JBQ2QsSUFBSSxFQUFFLE1BQU07Z0JBQ1osT0FBTyxFQUFFLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxJQUFJO2FBQ2pELENBQUM7WUFFRix1QkFBdUI7WUFDdkIsV0FBVyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDbkQsY0FBYztnQkFDZCxxQkFBcUI7Z0JBQ3JCLFdBQVcsRUFBRSx5QkFBeUI7Z0JBQ3RDLG1CQUFtQixFQUFFO29CQUNuQjt3QkFDRSxTQUFTLEVBQUUsTUFBTTt3QkFDakIsUUFBUSxFQUFFLGlCQUFpQjtxQkFDNUI7aUJBQ0Y7YUFDRixDQUFDO1NBQ0gsQ0FBQyxDQUFDO1FBRUgsOENBQThDO1FBQzlDLE1BQU07UUFDTixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUN0RSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRTtTQUMxRixDQUFDLENBQUMsQ0FBQztRQUNKLEtBQUssQ0FBQyxVQUFVLENBQ2QsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUM7WUFDekIsVUFBVSxFQUFFLFdBQVc7WUFDdkIsUUFBUSxFQUFFO2dCQUNSLG9CQUFvQjtnQkFDcEIsZUFBZTthQUNoQjtZQUNELG1CQUFtQixFQUFFLENBQUMsY0FBYyxDQUFDO1NBQ3RDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFHLENBQUM7SUFDbEIsT0FBTyxFQUFFO1FBQ1Asc0NBQXNDLEVBQUUsTUFBTTtLQUMvQztDQUNGLENBQUMsQ0FBQztBQUNILElBQUksNkJBQTZCLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRTtJQUN0RCxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRTtDQUMxRixDQUFDLENBQUM7QUFDSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gIWNkay1pbnRlZyBQaXBlbGluZVN0YWNrXG5pbXBvcnQgKiBhcyBjb2RlcGlwZWxpbmUgZnJvbSAnQGF3cy1jZGsvYXdzLWNvZGVwaXBlbGluZSc7XG5pbXBvcnQgKiBhcyBjb2RlcGlwZWxpbmVfYWN0aW9ucyBmcm9tICdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lLWFjdGlvbnMnO1xuaW1wb3J0IHsgQXBwLCBDZm5SZXNvdXJjZSwgQ29uc3RydWN0LCBTZWNyZXRWYWx1ZSwgU3RhY2ssIFN0YWNrUHJvcHMsIFN0YWdlLCBTdGFnZVByb3BzIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBjZGtwIGZyb20gJy4uL2xpYic7XG5cbmNsYXNzIE15U3RhZ2UgZXh0ZW5kcyBTdGFnZSB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogU3RhZ2VQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2sodGhpcywgJ1N0YWNrJywgcHJvcHMpO1xuICAgIG5ldyBDZm5SZXNvdXJjZShzdGFjaywgJ1Jlc291cmNlJywge1xuICAgICAgdHlwZTogJ0FXUzo6VGVzdDo6U29tZVJlc291cmNlJyxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBzdGFjayB0aGF0IGRlZmluZXMgdGhlIGFwcGxpY2F0aW9uIHBpcGVsaW5lXG4gKi9cbmNsYXNzIENka3BpcGVsaW5lc0RlbW9QaXBlbGluZVN0YWNrIGV4dGVuZHMgU3RhY2sge1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IFN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IHNvdXJjZUFydGlmYWN0ID0gbmV3IGNvZGVwaXBlbGluZS5BcnRpZmFjdCgpO1xuICAgIGNvbnN0IGNsb3VkQXNzZW1ibHlBcnRpZmFjdCA9IG5ldyBjb2RlcGlwZWxpbmUuQXJ0aWZhY3QoJ0Nsb3VkQXNtJyk7XG4gICAgY29uc3QgaW50ZWdUZXN0QXJ0aWZhY3QgPSBuZXcgY29kZXBpcGVsaW5lLkFydGlmYWN0KCdJbnRlZ1Rlc3RzJyk7XG5cbiAgICBjb25zdCBwaXBlbGluZSA9IG5ldyBjZGtwLkNka1BpcGVsaW5lKHRoaXMsICdQaXBlbGluZScsIHtcbiAgICAgIGNsb3VkQXNzZW1ibHlBcnRpZmFjdCxcblxuICAgICAgLy8gV2hlcmUgdGhlIHNvdXJjZSBjYW4gYmUgZm91bmRcbiAgICAgIHNvdXJjZUFjdGlvbjogbmV3IGNvZGVwaXBlbGluZV9hY3Rpb25zLkdpdEh1YlNvdXJjZUFjdGlvbih7XG4gICAgICAgIGFjdGlvbk5hbWU6ICdHaXRIdWInLFxuICAgICAgICBvdXRwdXQ6IHNvdXJjZUFydGlmYWN0LFxuICAgICAgICBvYXV0aFRva2VuOiBTZWNyZXRWYWx1ZS5wbGFpblRleHQoJ25vdC1hLXNlY3JldCcpLFxuICAgICAgICBvd25lcjogJ09XTkVSJyxcbiAgICAgICAgcmVwbzogJ1JFUE8nLFxuICAgICAgICB0cmlnZ2VyOiBjb2RlcGlwZWxpbmVfYWN0aW9ucy5HaXRIdWJUcmlnZ2VyLlBPTEwsXG4gICAgICB9KSxcblxuICAgICAgLy8gSG93IGl0IHdpbGwgYmUgYnVpbHRcbiAgICAgIHN5bnRoQWN0aW9uOiBjZGtwLlNpbXBsZVN5bnRoQWN0aW9uLnN0YW5kYXJkTnBtU3ludGgoe1xuICAgICAgICBzb3VyY2VBcnRpZmFjdCxcbiAgICAgICAgY2xvdWRBc3NlbWJseUFydGlmYWN0LFxuICAgICAgICBwcm9qZWN0TmFtZTogJ015U2VydmljZVBpcGVsaW5lLXN5bnRoJyxcbiAgICAgICAgYWRkaXRpb25hbEFydGlmYWN0czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRpcmVjdG9yeTogJ3Rlc3QnLFxuICAgICAgICAgICAgYXJ0aWZhY3Q6IGludGVnVGVzdEFydGlmYWN0LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9KSxcbiAgICB9KTtcblxuICAgIC8vIFRoaXMgaXMgd2hlcmUgd2UgYWRkIHRoZSBhcHBsaWNhdGlvbiBzdGFnZXNcbiAgICAvLyAuLi5cbiAgICBjb25zdCBzdGFnZSA9IHBpcGVsaW5lLmFkZEFwcGxpY2F0aW9uU3RhZ2UobmV3IE15U3RhZ2UodGhpcywgJ1ByZVByb2QnLCB7XG4gICAgICBlbnY6IHsgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCwgcmVnaW9uOiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT04gfSxcbiAgICB9KSk7XG4gICAgc3RhZ2UuYWRkQWN0aW9ucyhcbiAgICAgIG5ldyBjZGtwLlNoZWxsU2NyaXB0QWN0aW9uKHtcbiAgICAgICAgYWN0aW9uTmFtZTogJ1VzZVNvdXJjZScsXG4gICAgICAgIGNvbW1hbmRzOiBbXG4gICAgICAgICAgLy8gQ29tZXMgZnJvbSBzb3VyY2VcbiAgICAgICAgICAnY2F0IFJFQURNRS5tZCcsXG4gICAgICAgIF0sXG4gICAgICAgIGFkZGl0aW9uYWxBcnRpZmFjdHM6IFtzb3VyY2VBcnRpZmFjdF0sXG4gICAgICB9KSxcbiAgICApO1xuICB9XG59XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoe1xuICBjb250ZXh0OiB7XG4gICAgJ0Bhd3MtY2RrL2NvcmU6bmV3U3R5bGVTdGFja1N5bnRoZXNpcyc6ICd0cnVlJyxcbiAgfSxcbn0pO1xubmV3IENka3BpcGVsaW5lc0RlbW9QaXBlbGluZVN0YWNrKGFwcCwgJ1BpcGVsaW5lU3RhY2snLCB7XG4gIGVudjogeyBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULCByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB9LFxufSk7XG5hcHAuc3ludGgoKTtcbiJdfQ==