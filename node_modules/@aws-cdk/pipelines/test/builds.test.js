"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
require("@aws-cdk/assert/jest");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const core_1 = require("@aws-cdk/core");
const cdkp = require("../lib");
const testutil_1 = require("./testutil");
let app;
let pipelineStack;
let sourceArtifact;
let cloudAssemblyArtifact;
beforeEach(() => {
    app = new testutil_1.TestApp({ outdir: 'testcdk.out' });
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testutil_1.PIPELINE_ENV });
    sourceArtifact = new codepipeline.Artifact();
    cloudAssemblyArtifact = new codepipeline.Artifact('CloudAsm');
});
afterEach(() => {
    app.cleanup();
});
test('SimpleSynthAction takes arrays of commands', () => {
    // WHEN
    new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk', {
        sourceArtifact,
        cloudAssemblyArtifact,
        synthAction: new cdkp.SimpleSynthAction({
            sourceArtifact,
            cloudAssemblyArtifact,
            installCommands: ['install1', 'install2'],
            buildCommands: ['build1', 'build2'],
            testCommands: ['test1', 'test2'],
            synthCommand: 'cdk synth',
        }),
    });
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                phases: {
                    pre_build: {
                        commands: [
                            'install1',
                            'install2',
                        ],
                    },
                    build: {
                        commands: [
                            'build1',
                            'build2',
                            'test1',
                            'test2',
                            'cdk synth',
                        ],
                    },
                },
            })),
        },
    });
});
test.each([['npm'], ['yarn']])('%s build automatically determines artifact base-directory', (npmYarn) => {
    // WHEN
    new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk', {
        sourceArtifact,
        cloudAssemblyArtifact,
        synthAction: npmYarnBuild(npmYarn)({ sourceArtifact, cloudAssemblyArtifact }),
    });
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                artifacts: {
                    'base-directory': 'testcdk.out',
                },
            })),
        },
    });
});
test.each([['npm'], ['yarn']])('%s build respects subdirectory', (npmYarn) => {
    // WHEN
    new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk', {
        sourceArtifact,
        cloudAssemblyArtifact,
        synthAction: npmYarnBuild(npmYarn)({
            sourceArtifact,
            cloudAssemblyArtifact,
            subdirectory: 'subdir',
        }),
    });
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                phases: {
                    pre_build: {
                        commands: assert_1.arrayWith('cd subdir'),
                    },
                },
                artifacts: {
                    'base-directory': 'subdir/testcdk.out',
                },
            })),
        },
    });
});
test.each([['npm'], ['yarn']])('%s assumes no build step by default', (npmYarn) => {
    // WHEN
    new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk', {
        sourceArtifact,
        cloudAssemblyArtifact,
        synthAction: npmYarnBuild(npmYarn)({ sourceArtifact, cloudAssemblyArtifact }),
    });
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                phases: {
                    build: {
                        commands: ['npx cdk synth'],
                    },
                },
            })),
        },
    });
});
test.each([['npm'], ['yarn']])('%s can have its install command overridden', (npmYarn) => {
    // WHEN
    new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk', {
        sourceArtifact,
        cloudAssemblyArtifact,
        synthAction: npmYarnBuild(npmYarn)({
            sourceArtifact,
            cloudAssemblyArtifact,
            installCommand: '/bin/true',
        }),
    });
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                phases: {
                    pre_build: {
                        commands: ['/bin/true'],
                    },
                },
            })),
        },
    });
});
test('Standard (NPM) synth can output additional artifacts', () => {
    // WHEN
    sourceArtifact = new codepipeline.Artifact();
    cloudAssemblyArtifact = new codepipeline.Artifact('CloudAsm');
    const addlArtifact = new codepipeline.Artifact('IntegTest');
    new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk', {
        sourceArtifact,
        cloudAssemblyArtifact,
        synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
            sourceArtifact,
            cloudAssemblyArtifact,
            additionalArtifacts: [
                {
                    artifact: addlArtifact,
                    directory: 'test',
                },
            ],
        }),
    });
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                artifacts: {
                    'secondary-artifacts': {
                        CloudAsm: {
                            'base-directory': 'testcdk.out',
                            'files': '**/*',
                        },
                        IntegTest: {
                            'base-directory': 'test',
                            'files': '**/*',
                        },
                    },
                },
            })),
        },
    });
});
function npmYarnBuild(npmYarn) {
    if (npmYarn === 'npm') {
        return cdkp.SimpleSynthAction.standardNpmSynth;
    }
    if (npmYarn === 'yarn') {
        return cdkp.SimpleSynthAction.standardYarnSynth;
    }
    throw new Error(`Expecting npm|yarn: ${npmYarn}`);
}
//# sourceMappingURL=data:application/json;base64,