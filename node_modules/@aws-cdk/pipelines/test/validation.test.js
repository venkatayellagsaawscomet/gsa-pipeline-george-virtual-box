"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
require("@aws-cdk/assert/jest");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const core_1 = require("@aws-cdk/core");
const cdkp = require("../lib");
const testutil_1 = require("./testutil");
let app;
let pipelineStack;
let pipeline;
let sourceArtifact;
let cloudAssemblyArtifact;
let integTestArtifact;
beforeEach(() => {
    app = new testutil_1.TestApp();
    pipelineStack = new core_1.Stack(app, 'PipelineStack', { env: testutil_1.PIPELINE_ENV });
    sourceArtifact = new codepipeline.Artifact();
    cloudAssemblyArtifact = new codepipeline.Artifact('CloudAsm');
    integTestArtifact = new codepipeline.Artifact('IntegTests');
    pipeline = new testutil_1.TestGitHubNpmPipeline(pipelineStack, 'Cdk', {
        sourceArtifact,
        cloudAssemblyArtifact,
        synthAction: cdkp.SimpleSynthAction.standardNpmSynth({
            sourceArtifact,
            cloudAssemblyArtifact,
            additionalArtifacts: [{ directory: 'test', artifact: integTestArtifact }],
        }),
    });
});
afterEach(() => {
    app.cleanup();
});
test('can use stack outputs as validation inputs', () => {
    // GIVEN
    const stage = new AppWithStackOutput(app, 'MyApp');
    // WHEN
    const pipeStage = pipeline.addApplicationStage(stage);
    pipeStage.addActions(new cdkp.ShellScriptAction({
        actionName: 'TestOutput',
        useOutputs: {
            BUCKET_NAME: pipeline.stackOutput(stage.output),
        },
        commands: ['echo $BUCKET_NAME'],
    }));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'MyApp',
            Actions: assert_1.arrayWith(assert_1.deepObjectLike({
                Name: 'Stack.Deploy',
                OutputArtifacts: [{ Name: assert_1.anything() }],
                Configuration: {
                    OutputFileName: 'outputs.json',
                },
            }), assert_1.deepObjectLike({
                ActionTypeId: {
                    Provider: 'CodeBuild',
                },
                Configuration: {
                    ProjectName: assert_1.anything(),
                },
                InputArtifacts: [{ Name: assert_1.anything() }],
                Name: 'TestOutput',
            })),
        }),
    });
    expect(pipelineStack).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                phases: {
                    build: {
                        commands: [
                            'set -eu',
                            'export BUCKET_NAME="$(node -pe \'require(process.env.CODEBUILD_SRC_DIR + "/outputs.json")["BucketName"]\')"',
                            'echo $BUCKET_NAME',
                        ],
                    },
                },
            })),
            Type: 'CODEPIPELINE',
        },
    });
});
test('can use additional files from source', () => {
    // WHEN
    pipeline.addStage('Test').addActions(new cdkp.ShellScriptAction({
        actionName: 'UseSources',
        additionalArtifacts: [sourceArtifact],
        commands: ['true'],
    }));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'Test',
            Actions: [
                assert_1.deepObjectLike({
                    Name: 'UseSources',
                    InputArtifacts: [{ Name: 'Artifact_Source_GitHub' }],
                }),
            ],
        }),
    });
    expect(pipelineStack).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                phases: {
                    build: {
                        commands: [
                            'set -eu',
                            'true',
                        ],
                    },
                },
            })),
        },
    });
});
test('can use additional files from build', () => {
    // WHEN
    pipeline.addStage('Test').addActions(new cdkp.ShellScriptAction({
        actionName: 'UseBuildArtifact',
        additionalArtifacts: [integTestArtifact],
        commands: ['true'],
    }));
    // THEN
    expect(pipelineStack).toHaveResourceLike('AWS::CodePipeline::Pipeline', {
        Stages: assert_1.arrayWith({
            Name: 'Test',
            Actions: [
                assert_1.deepObjectLike({
                    Name: 'UseBuildArtifact',
                    InputArtifacts: [{ Name: 'IntegTests' }],
                }),
            ],
        }),
    });
    expect(pipelineStack).toHaveResourceLike('AWS::CodeBuild::Project', {
        Environment: {
            Image: 'aws/codebuild/standard:4.0',
        },
        Source: {
            BuildSpec: assert_1.encodedJson(assert_1.deepObjectLike({
                phases: {
                    build: {
                        commands: [
                            'set -eu',
                            'true',
                        ],
                    },
                },
            })),
        },
    });
});
class AppWithStackOutput extends core_1.Stage {
    constructor(scope, id, props) {
        super(scope, id, props);
        const stack = new testutil_1.BucketStack(this, 'Stack');
        this.output = new core_1.CfnOutput(stack, 'BucketName', {
            value: stack.bucket.bucketName,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,