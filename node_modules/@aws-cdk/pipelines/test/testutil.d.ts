import * as codepipeline from '@aws-cdk/aws-codepipeline';
import * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';
import * as s3 from '@aws-cdk/aws-s3';
import { App, AppProps, Construct, Environment, Stack, StackProps } from '@aws-cdk/core';
import * as cdkp from '../lib';
export declare const PIPELINE_ENV: Environment;
export declare class TestApp extends App {
    constructor(props?: Partial<AppProps>);
    cleanup(): void;
}
export declare class TestGitHubNpmPipeline extends cdkp.CdkPipeline {
    readonly sourceArtifact: codepipeline.Artifact;
    readonly cloudAssemblyArtifact: codepipeline.Artifact;
    constructor(scope: Construct, id: string, props?: Partial<cdkp.CdkPipelineProps> & {
        readonly sourceArtifact?: codepipeline.Artifact;
    });
}
export declare class TestGitHubAction extends codepipeline_actions.GitHubSourceAction {
    constructor(sourceArtifact: codepipeline.Artifact);
}
/**
 * A test stack
 *
 * It contains a single Bucket. Such robust. Much uptime.
 */
export declare class BucketStack extends Stack {
    readonly bucket: s3.IBucket;
    constructor(scope: Construct, id: string, props?: StackProps);
}
/**
 * rm -rf reimplementation, don't want to depend on an NPM package for this
 */
export declare function rimraf(fsPath: string): void;
/**
 * Because 'expect(stack)' doesn't work correctly for stacks in nested assemblies
 */
export declare function stackTemplate(stack: Stack): import("@aws-cdk/cx-api").CloudFormationStackArtifact;
