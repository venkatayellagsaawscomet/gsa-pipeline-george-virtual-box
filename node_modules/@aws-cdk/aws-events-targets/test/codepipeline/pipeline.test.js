"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const events = require("@aws-cdk/aws-events");
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const targets = require("../../lib");
describe('CodePipeline event target', () => {
    let stack;
    let pipeline;
    let pipelineArn;
    beforeEach(() => {
        stack = new core_1.Stack();
        pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
        const srcArtifact = new codepipeline.Artifact('Src');
        const buildArtifact = new codepipeline.Artifact('Bld');
        pipeline.addStage({
            stageName: 'Source',
            actions: [new TestAction({
                    actionName: 'Hello',
                    category: codepipeline.ActionCategory.SOURCE,
                    provider: 'x',
                    artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 1 },
                    outputs: [srcArtifact],
                })],
        });
        pipeline.addStage({
            stageName: 'Build',
            actions: [new TestAction({
                    actionName: 'Hello',
                    category: codepipeline.ActionCategory.BUILD,
                    provider: 'y',
                    inputs: [srcArtifact],
                    outputs: [buildArtifact],
                    artifactBounds: { minInputs: 1, maxInputs: 1, minOutputs: 1, maxOutputs: 1 },
                })],
        });
        pipelineArn = {
            'Fn::Join': ['', [
                    'arn:',
                    { Ref: 'AWS::Partition' },
                    ':codepipeline:',
                    { Ref: 'AWS::Region' },
                    ':',
                    { Ref: 'AWS::AccountId' },
                    ':',
                    { Ref: 'PipelineC660917D' },
                ]],
        };
    });
    describe('when added to an event rule as a target', () => {
        let rule;
        beforeEach(() => {
            rule = new events.Rule(stack, 'rule', {
                schedule: events.Schedule.expression('rate(1 minute)'),
            });
        });
        describe('with default settings', () => {
            beforeEach(() => {
                rule.addTarget(new targets.CodePipeline(pipeline));
            });
            test("adds the pipeline's ARN and role to the targets of the rule", () => {
                assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
                    Targets: [
                        {
                            Arn: pipelineArn,
                            Id: 'Target0',
                            RoleArn: { 'Fn::GetAtt': ['PipelineEventsRole46BEEA7C', 'Arn'] },
                        },
                    ],
                }));
            });
            test("creates a policy that has StartPipeline permissions on the pipeline's ARN", () => {
                assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
                    PolicyDocument: {
                        Statement: [
                            {
                                Action: 'codepipeline:StartPipelineExecution',
                                Effect: 'Allow',
                                Resource: pipelineArn,
                            },
                        ],
                        Version: '2012-10-17',
                    },
                }));
            });
        });
        describe('with an explicit event role', () => {
            beforeEach(() => {
                const role = new iam.Role(stack, 'MyExampleRole', {
                    assumedBy: new iam.AnyPrincipal(),
                });
                const roleResource = role.node.defaultChild;
                roleResource.overrideLogicalId('MyRole'); // to make it deterministic in the assertion below
                rule.addTarget(new targets.CodePipeline(pipeline, {
                    eventRole: role,
                }));
            });
            test("points at the given event role in the rule's targets", () => {
                assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Events::Rule', {
                    Targets: [
                        {
                            Arn: pipelineArn,
                            RoleArn: { 'Fn::GetAtt': ['MyRole', 'Arn'] },
                        },
                    ],
                }));
            });
        });
    });
});
class TestAction {
    constructor(actionProperties) {
        this.actionProperties = actionProperties;
        // nothing to do
    }
    bind(_scope, _stage, _options) {
        return {};
    }
    onStateChange(_name, _target, _options) {
        throw new Error('onStateChange() is not available on MockAction');
    }
}
//# sourceMappingURL=data:application/json;base64,