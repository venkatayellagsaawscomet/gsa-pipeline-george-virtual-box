"use strict";
const assert_1 = require("@aws-cdk/assert");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
/**
 * Returns a property predicate that checks that the given Dashboard has the indicated widgets
 */
function thatHasWidgets(widgets) {
    return (props) => {
        try {
            const actualWidgets = JSON.parse(props.DashboardBody).widgets;
            return assert_1.isSuperObject(actualWidgets, widgets);
        }
        catch (e) {
            // eslint-disable-next-line no-console
            console.error('Error parsing', props);
            throw e;
        }
    };
}
module.exports = {
    'widgets in different adds are laid out underneath each other'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash');
        // WHEN
        dashboard.addWidgets(new lib_1.TextWidget({
            width: 10,
            height: 2,
            markdown: 'first',
        }));
        dashboard.addWidgets(new lib_1.TextWidget({
            width: 1,
            height: 4,
            markdown: 'second',
        }));
        dashboard.addWidgets(new lib_1.TextWidget({
            width: 4,
            height: 1,
            markdown: 'third',
        }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Dashboard', thatHasWidgets([
            { type: 'text', width: 10, height: 2, x: 0, y: 0, properties: { markdown: 'first' } },
            { type: 'text', width: 1, height: 4, x: 0, y: 2, properties: { markdown: 'second' } },
            { type: 'text', width: 4, height: 1, x: 0, y: 6, properties: { markdown: 'third' } },
        ])));
        test.done();
    },
    'widgets in same add are laid out next to each other'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash');
        // WHEN
        dashboard.addWidgets(new lib_1.TextWidget({
            width: 10,
            height: 2,
            markdown: 'first',
        }), new lib_1.TextWidget({
            width: 1,
            height: 4,
            markdown: 'second',
        }), new lib_1.TextWidget({
            width: 4,
            height: 1,
            markdown: 'third',
        }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Dashboard', thatHasWidgets([
            { type: 'text', width: 10, height: 2, x: 0, y: 0, properties: { markdown: 'first' } },
            { type: 'text', width: 1, height: 4, x: 10, y: 0, properties: { markdown: 'second' } },
            { type: 'text', width: 4, height: 1, x: 11, y: 0, properties: { markdown: 'third' } },
        ])));
        test.done();
    },
    'tokens in widgets are retained'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash');
        // WHEN
        dashboard.addWidgets(new lib_1.GraphWidget({ width: 1, height: 1 }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Dashboard', {
            DashboardBody: {
                'Fn::Join': ['', [
                        '{"widgets":[{"type":"metric","width":1,"height":1,"x":0,"y":0,"properties":{"view":"timeSeries","region":"',
                        { Ref: 'AWS::Region' },
                        '","yAxis":{}}}]}',
                    ]],
            },
        }));
        test.done();
    },
    'dashboard body includes non-widget fields'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        const dashboard = new lib_1.Dashboard(stack, 'Dash', {
            start: '-9H',
            end: '2018-12-17T06:00:00.000Z',
            periodOverride: lib_1.PeriodOverride.INHERIT,
        });
        // WHEN
        dashboard.addWidgets(new lib_1.GraphWidget({ width: 1, height: 1 }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Dashboard', {
            DashboardBody: {
                'Fn::Join': ['', [
                        '{"start":"-9H","end":"2018-12-17T06:00:00.000Z","periodOverride":"inherit",\
"widgets":[{"type":"metric","width":1,"height":1,"x":0,"y":0,"properties":{"view":"timeSeries","region":"',
                        { Ref: 'AWS::Region' },
                        '","yAxis":{}}}]}',
                    ]],
            },
        }));
        test.done();
    },
    'DashboardName is set when provided'(test) {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        new lib_1.Dashboard(stack, 'MyDashboard', {
            dashboardName: 'MyCustomDashboardName',
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Dashboard', {
            DashboardName: 'MyCustomDashboardName',
        }));
        test.done();
    },
    'DashboardName is not generated if not provided'(test) {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        new lib_1.Dashboard(stack, 'MyDashboard');
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::CloudWatch::Dashboard', {}));
        test.done();
    },
    'throws if DashboardName is not valid'(test) {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'MyStack');
        // WHEN
        const toThrow = () => {
            new lib_1.Dashboard(stack, 'MyDashboard', {
                dashboardName: 'My Invalid Dashboard Name',
            });
        };
        // THEN
        test.throws(() => toThrow(), /field dashboardName contains invalid characters/);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,