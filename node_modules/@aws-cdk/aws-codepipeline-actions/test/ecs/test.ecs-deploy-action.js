"use strict";
const assert_1 = require("@aws-cdk/assert");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const ec2 = require("@aws-cdk/aws-ec2");
const ecs = require("@aws-cdk/aws-ecs");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/core");
const cpactions = require("../../lib");
function anyEcsService() {
    const stack = new cdk.Stack();
    const taskDefinition = new ecs.FargateTaskDefinition(stack, 'TaskDefinition');
    taskDefinition.addContainer('MainContainer', {
        image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
    });
    const vpc = new ec2.Vpc(stack, 'VPC');
    const cluster = new ecs.Cluster(stack, 'Cluster', {
        vpc,
    });
    return new ecs.FargateService(stack, 'FargateService', {
        cluster,
        taskDefinition,
    });
}
module.exports = {
    'ECS deploy Action': {
        'throws an exception if neither inputArtifact nor imageFile were provided'(test) {
            const service = anyEcsService();
            test.throws(() => {
                new cpactions.EcsDeployAction({
                    actionName: 'ECS',
                    service,
                });
            }, /one of 'input' or 'imageFile' is required/);
            test.done();
        },
        'can be created just by specifying the inputArtifact'(test) {
            const service = anyEcsService();
            const artifact = new codepipeline.Artifact('Artifact');
            test.doesNotThrow(() => {
                new cpactions.EcsDeployAction({
                    actionName: 'ECS',
                    service,
                    input: artifact,
                });
            });
            test.done();
        },
        'can be created just by specifying the imageFile'(test) {
            const service = anyEcsService();
            const artifact = new codepipeline.Artifact('Artifact');
            test.doesNotThrow(() => {
                new cpactions.EcsDeployAction({
                    actionName: 'ECS',
                    service,
                    imageFile: artifact.atPath('imageFile.json'),
                });
            });
            test.done();
        },
        'throws an exception if both inputArtifact and imageFile were provided'(test) {
            const service = anyEcsService();
            const artifact = new codepipeline.Artifact('Artifact');
            test.throws(() => {
                new cpactions.EcsDeployAction({
                    actionName: 'ECS',
                    service,
                    input: artifact,
                    imageFile: artifact.atPath('file.json'),
                });
            }, /one of 'input' or 'imageFile' can be provided/);
            test.done();
        },
        "sets the target service as the action's backing resource"(test) {
            const service = anyEcsService();
            const artifact = new codepipeline.Artifact('Artifact');
            const action = new cpactions.EcsDeployAction({
                actionName: 'ECS',
                service,
                input: artifact,
            });
            test.equal(action.actionProperties.resource, service);
            test.done();
        },
        'can be created by existing service'(test) {
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'Vpc');
            const service = ecs.FargateService.fromFargateServiceAttributes(stack, 'FargateService', {
                serviceName: 'service-name',
                cluster: ecs.Cluster.fromClusterAttributes(stack, 'Cluster', {
                    vpc,
                    securityGroups: [],
                    clusterName: 'cluster-name',
                }),
            });
            const artifact = new codepipeline.Artifact('Artifact');
            const bucket = new s3.Bucket(stack, 'PipelineBucket', {
                versioned: true,
                removalPolicy: cdk.RemovalPolicy.DESTROY,
            });
            const source = new cpactions.S3SourceAction({
                actionName: 'Source',
                output: artifact,
                bucket,
                bucketKey: 'key',
            });
            const action = new cpactions.EcsDeployAction({
                actionName: 'ECS',
                service,
                imageFile: artifact.atPath('imageFile.json'),
            });
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [source],
                    },
                    {
                        stageName: 'Deploy',
                        actions: [action],
                    },
                ],
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                Stages: [
                    {},
                    {
                        Actions: [
                            {
                                Name: 'ECS',
                                ActionTypeId: {
                                    Category: 'Deploy',
                                    Provider: 'ECS',
                                },
                                Configuration: {
                                    ClusterName: 'cluster-name',
                                    ServiceName: 'service-name',
                                    FileName: 'imageFile.json',
                                },
                            },
                        ],
                    },
                ],
            }));
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,