"use strict";
const assert_1 = require("@aws-cdk/assert");
const codecommit = require("@aws-cdk/aws-codecommit");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const core_1 = require("@aws-cdk/core");
const cpactions = require("../../lib");
/**
 * A test stack with a half-prepared pipeline ready to add CloudFormation actions to
 */
class TestFixture extends core_1.Stack {
    constructor() {
        super();
        this.pipeline = new codepipeline.Pipeline(this, 'Pipeline');
        this.sourceStage = this.pipeline.addStage({ stageName: 'Source' });
        this.deployStage = this.pipeline.addStage({ stageName: 'Deploy' });
        this.repo = new codecommit.Repository(this, 'MyVeryImportantRepo', {
            repositoryName: 'my-very-important-repo',
        });
        this.sourceOutput = new codepipeline.Artifact('SourceArtifact');
        const source = new cpactions.CodeCommitSourceAction({
            actionName: 'Source',
            output: this.sourceOutput,
            repository: this.repo,
        });
        this.sourceStage.addAction(source);
    }
}
module.exports = {
    'addAction succesfully leads to creation of codepipeline service catalog action with properly formatted TemplateFilePath'(test) {
        // GIVEN
        const stack = new TestFixture();
        // WHEN
        stack.deployStage.addAction(new cpactions.ServiceCatalogDeployAction({
            actionName: 'ServiceCatalogTest',
            templatePath: stack.sourceOutput.atPath('template.yaml'),
            productVersionDescription: 'This is a description of the version.',
            productVersionName: 'VersionName',
            productId: 'prod-xxxxxxxxx',
        }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
            'Stages': [
                { 'Name': 'Source' /* don't care about the rest */ },
                {
                    'Name': 'Deploy',
                    'Actions': [
                        {
                            'ActionTypeId': {
                                'Category': 'Deploy',
                                'Owner': 'AWS',
                                'Provider': 'ServiceCatalog',
                                'Version': '1',
                            },
                            'Configuration': {
                                'TemplateFilePath': 'template.yaml',
                                'ProductVersionDescription': 'This is a description of the version.',
                                'ProductVersionName': 'VersionName',
                                'ProductType': 'CLOUD_FORMATION_TEMPLATE',
                                'ProductId': 'prod-xxxxxxxxx',
                            },
                            'InputArtifacts': [
                                {
                                    'Name': 'SourceArtifact',
                                },
                            ],
                            'Name': 'ServiceCatalogTest',
                        },
                    ],
                },
            ],
        }));
        test.done();
    },
    'deployment without a description works successfully'(test) {
        // GIVEN
        const stack = new TestFixture();
        // WHEN
        stack.deployStage.addAction(new cpactions.ServiceCatalogDeployAction({
            actionName: 'ServiceCatalogTest',
            templatePath: stack.sourceOutput.atPath('template.yaml'),
            productVersionName: 'VersionName',
            productId: 'prod-xxxxxxxxx',
        }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
            'Stages': [
                { 'Name': 'Source' /* don't care about the rest */ },
                {
                    'Name': 'Deploy',
                    'Actions': [
                        {
                            'ActionTypeId': {
                                'Category': 'Deploy',
                                'Owner': 'AWS',
                                'Provider': 'ServiceCatalog',
                                'Version': '1',
                            },
                            'Configuration': {
                                'TemplateFilePath': 'template.yaml',
                                'ProductVersionName': 'VersionName',
                                'ProductType': 'CLOUD_FORMATION_TEMPLATE',
                                'ProductId': 'prod-xxxxxxxxx',
                            },
                            'InputArtifacts': [
                                {
                                    'Name': 'SourceArtifact',
                                },
                            ],
                            'Name': 'ServiceCatalogTest',
                        },
                    ],
                },
            ],
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,