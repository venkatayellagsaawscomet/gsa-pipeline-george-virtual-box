"use strict";
const assert_1 = require("@aws-cdk/assert");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const s3 = require("@aws-cdk/aws-s3");
const stepfunction = require("@aws-cdk/aws-stepfunctions");
const core_1 = require("@aws-cdk/core");
const cpactions = require("../../lib");
function minimalPipeline(stack) {
    const sourceOutput = new codepipeline.Artifact();
    const startState = new stepfunction.Pass(stack, 'StartState');
    const simpleStateMachine = new stepfunction.StateMachine(stack, 'SimpleStateMachine', {
        definition: startState,
    });
    const pipeline = new codepipeline.Pipeline(stack, 'MyPipeline');
    const sourceStage = pipeline.addStage({
        stageName: 'Source',
        actions: [
            new cpactions.S3SourceAction({
                actionName: 'Source',
                bucket: new s3.Bucket(stack, 'MyBucket'),
                bucketKey: 'some/path/to',
                output: sourceOutput,
                trigger: cpactions.S3Trigger.POLL,
            }),
        ],
    });
    pipeline.addStage({
        stageName: 'Invoke',
        actions: [
            new cpactions.StepFunctionInvokeAction({
                actionName: 'Invoke',
                stateMachine: simpleStateMachine,
                stateMachineInput: cpactions.StateMachineInput.literal({ IsHelloWorldExample: true }),
            }),
        ],
    });
    return sourceStage;
}
module.exports = {
    'StepFunctions Invoke Action': {
        'Verify stepfunction configuration properties are set to specific values'(test) {
            const stack = new core_1.Stack();
            // when
            minimalPipeline(stack);
            // then
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                Stages: [
                    //  Must have a source stage
                    {
                        Actions: [
                            {
                                ActionTypeId: {
                                    Category: 'Source',
                                    Owner: 'AWS',
                                    Provider: 'S3',
                                    Version: '1',
                                },
                                Configuration: {
                                    S3Bucket: {
                                        Ref: 'MyBucketF68F3FF0',
                                    },
                                    S3ObjectKey: 'some/path/to',
                                },
                            },
                        ],
                    },
                    // Must have stepfunction invoke action configuration
                    {
                        Actions: [
                            {
                                ActionTypeId: {
                                    Category: 'Invoke',
                                    Owner: 'AWS',
                                    Provider: 'StepFunctions',
                                    Version: '1',
                                },
                                Configuration: {
                                    StateMachineArn: {
                                        Ref: 'SimpleStateMachineE8E2CF40',
                                    },
                                    InputType: 'Literal',
                                    // JSON Stringified input when the input type is Literal
                                    Input: '{\"IsHelloWorldExample\":true}',
                                },
                            },
                        ],
                    },
                ],
            }));
            test.done();
        },
        'Allows the pipeline to invoke this stepfunction'(test) {
            const stack = new core_1.Stack();
            minimalPipeline(stack);
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::IAM::Policy', {
                PolicyDocument: {
                    Statement: [
                        {
                            Action: ['states:StartExecution', 'states:DescribeStateMachine'],
                            Resource: {
                                Ref: 'SimpleStateMachineE8E2CF40',
                            },
                            Effect: 'Allow',
                        },
                    ],
                },
            }));
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::IAM::Role'));
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,