import { Test } from 'nodeunit';
declare const _default: {
    'basic pipeline'(test: Test): void;
    'Tokens can be used as physical names of the Pipeline'(test: Test): void;
    'pipeline with GitHub source with poll trigger'(test: Test): void;
    'pipeline with GitHub source without triggers'(test: Test): void;
    'github action uses ThirdParty owner'(test: Test): void;
    onStateChange(test: Test): void;
    PipelineProject: {
        'with a custom Project Name': {
            'sets the source and artifacts to CodePipeline'(test: Test): void;
        };
    };
    'Lambda PipelineInvokeAction can be used to invoke Lambda functions from a CodePipeline'(test: Test): void;
    'cross-region Pipeline': {
        'generates the required Action & ArtifactStores properties in the template'(test: Test): void;
        'allows specifying only one of artifactBucket and crossRegionReplicationBuckets'(test: Test): void;
        'does not create a new artifact Bucket if one was provided in the cross-region Buckets for the Pipeline region'(test: Test): void;
        'allows providing a resource-backed action from a different region directly'(test: Test): void;
    };
    'cross-account Pipeline': {
        'with a CodeBuild Project in a different account works correctly'(test: Test): void;
        'adds a dependency on the Stack containing a new action Role'(test: Test): void;
        'does not add a dependency on the Stack containing an imported action Role'(test: Test): void;
    };
};
export = _default;
