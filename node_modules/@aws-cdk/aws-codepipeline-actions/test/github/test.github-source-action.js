"use strict";
const assert_1 = require("@aws-cdk/assert");
const codebuild = require("@aws-cdk/aws-codebuild");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const core_1 = require("@aws-cdk/core");
const cpactions = require("../../lib");
module.exports = {
    'GitHub source Action': {
        'exposes variables for other actions to consume'(test) {
            const stack = new core_1.Stack();
            const sourceOutput = new codepipeline.Artifact();
            const gitHubSourceAction = new cpactions.GitHubSourceAction({
                actionName: 'Source',
                owner: 'aws',
                repo: 'aws-cdk',
                output: sourceOutput,
                oauthToken: core_1.SecretValue.plainText('secret'),
            });
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [gitHubSourceAction],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            new cpactions.CodeBuildAction({
                                actionName: 'Build',
                                project: new codebuild.PipelineProject(stack, 'MyProject'),
                                input: sourceOutput,
                                environmentVariables: {
                                    CommitUrl: { value: gitHubSourceAction.variables.commitUrl },
                                },
                            }),
                        ],
                    },
                ],
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                    },
                    {
                        'Name': 'Build',
                        'Actions': [
                            {
                                'Name': 'Build',
                                'Configuration': {
                                    'EnvironmentVariables': '[{"name":"CommitUrl","type":"PLAINTEXT","value":"#{Source_Source_NS.CommitUrl}"}]',
                                },
                            },
                        ],
                    },
                ],
            }));
            test.done();
        },
        'always renders the customer-supplied namespace, even if none of the variables are used'(test) {
            const stack = new core_1.Stack();
            const sourceOutput = new codepipeline.Artifact();
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [
                            new cpactions.GitHubSourceAction({
                                actionName: 'Source',
                                owner: 'aws',
                                repo: 'aws-cdk',
                                output: sourceOutput,
                                oauthToken: core_1.SecretValue.plainText('secret'),
                                variablesNamespace: 'MyNamespace',
                            }),
                        ],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            new cpactions.CodeBuildAction({
                                actionName: 'Build',
                                project: new codebuild.PipelineProject(stack, 'MyProject'),
                                input: sourceOutput,
                            }),
                        ],
                    },
                ],
            });
            assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CodePipeline::Pipeline', {
                'Stages': [
                    {
                        'Name': 'Source',
                        'Actions': [
                            {
                                'Name': 'Source',
                                'Namespace': 'MyNamespace',
                            },
                        ],
                    },
                    {},
                ],
            }));
            test.done();
        },
        'fails if a variable from an action without a namespace set that is not part of a pipeline is referenced'(test) {
            const stack = new core_1.Stack();
            const unusedSourceAction = new cpactions.GitHubSourceAction({
                actionName: 'Source2',
                owner: 'aws',
                repo: 'aws-cdk',
                output: new codepipeline.Artifact(),
                oauthToken: core_1.SecretValue.plainText('secret'),
            });
            const sourceOutput = new codepipeline.Artifact();
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [new cpactions.GitHubSourceAction({
                                actionName: 'Source1',
                                owner: 'aws',
                                repo: 'aws-cdk',
                                output: sourceOutput,
                                oauthToken: core_1.SecretValue.plainText('secret'),
                            })],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            new cpactions.CodeBuildAction({
                                actionName: 'Build',
                                project: new codebuild.PipelineProject(stack, 'MyProject'),
                                input: sourceOutput,
                                environmentVariables: {
                                    'VAR1': { value: unusedSourceAction.variables.authorDate },
                                },
                            }),
                        ],
                    },
                ],
            });
            test.throws(() => {
                assert_1.SynthUtils.synthesize(stack);
            }, /Cannot reference variables of action 'Source2', as that action was never added to a pipeline/);
            test.done();
        },
        'fails if a variable from an action with a namespace set that is not part of a pipeline is referenced'(test) {
            const stack = new core_1.Stack();
            const unusedSourceAction = new cpactions.GitHubSourceAction({
                actionName: 'Source2',
                owner: 'aws',
                repo: 'aws-cdk',
                output: new codepipeline.Artifact(),
                oauthToken: core_1.SecretValue.plainText('secret'),
                variablesNamespace: 'MyNamespace',
            });
            const sourceOutput = new codepipeline.Artifact();
            new codepipeline.Pipeline(stack, 'Pipeline', {
                stages: [
                    {
                        stageName: 'Source',
                        actions: [new cpactions.GitHubSourceAction({
                                actionName: 'Source1',
                                owner: 'aws',
                                repo: 'aws-cdk',
                                output: sourceOutput,
                                oauthToken: core_1.SecretValue.plainText('secret'),
                            })],
                    },
                    {
                        stageName: 'Build',
                        actions: [
                            new cpactions.CodeBuildAction({
                                actionName: 'Build',
                                project: new codebuild.PipelineProject(stack, 'MyProject'),
                                input: sourceOutput,
                                environmentVariables: {
                                    'VAR1': { value: unusedSourceAction.variables.authorDate },
                                },
                            }),
                        ],
                    },
                ],
            });
            test.throws(() => {
                assert_1.SynthUtils.synthesize(stack);
            }, /Cannot reference variables of action 'Source2', as that action was never added to a pipeline/);
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,