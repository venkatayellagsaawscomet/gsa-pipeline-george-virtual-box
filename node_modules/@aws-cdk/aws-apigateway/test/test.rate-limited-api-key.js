"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const apigateway = require("../lib");
const API_KEY_RESOURCE_TYPE = 'AWS::ApiGateway::ApiKey';
const USAGE_PLAN_RESOURCE_TYPE = 'AWS::ApiGateway::UsagePlan';
const USAGE_PLAN_KEY_RESOURCE_TYPE = 'AWS::ApiGateway::UsagePlanKey';
module.exports = {
    'default setup'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const api = new apigateway.RestApi(stack, 'my-api', { cloudWatchRole: false, deploy: false });
        api.root.addMethod('GET'); // Need at least one method on the api
        // WHEN
        new apigateway.RateLimitedApiKey(stack, 'my-api-key');
        // THEN
        // should have an api key with no props defined.
        assert_1.expect(stack).to(assert_1.haveResource(API_KEY_RESOURCE_TYPE, undefined, assert_1.ResourcePart.CompleteDefinition));
        // should not have a usage plan.
        assert_1.expect(stack).notTo(assert_1.haveResource(USAGE_PLAN_RESOURCE_TYPE));
        // should not have a usage plan key.
        assert_1.expect(stack).notTo(assert_1.haveResource(USAGE_PLAN_KEY_RESOURCE_TYPE));
        test.done();
    },
    'only api key is created when rate limiting properties are not provided'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const api = new apigateway.RestApi(stack, 'test-api', { cloudWatchRole: false, deploy: true, deployOptions: { stageName: 'test' } });
        api.root.addMethod('GET'); // api must have atleast one method.
        // WHEN
        new apigateway.RateLimitedApiKey(stack, 'test-api-key', {
            customerId: 'test-customer',
            resources: [api],
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::ApiKey', {
            CustomerId: 'test-customer',
            StageKeys: [
                {
                    RestApiId: { Ref: 'testapiD6451F70' },
                    StageName: { Ref: 'testapiDeploymentStagetest5869DF71' },
                },
            ],
        }));
        // should not have a usage plan.
        assert_1.expect(stack).notTo(assert_1.haveResource(USAGE_PLAN_RESOURCE_TYPE));
        // should not have a usage plan key.
        assert_1.expect(stack).notTo(assert_1.haveResource(USAGE_PLAN_KEY_RESOURCE_TYPE));
        test.done();
    },
    'api key and usage plan are created and linked when rate limiting properties are provided'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const api = new apigateway.RestApi(stack, 'test-api', { cloudWatchRole: false, deploy: true, deployOptions: { stageName: 'test' } });
        api.root.addMethod('GET'); // api must have atleast one method.
        // WHEN
        new apigateway.RateLimitedApiKey(stack, 'test-api-key', {
            customerId: 'test-customer',
            resources: [api],
            quota: {
                limit: 10000,
                period: apigateway.Period.MONTH,
            },
        });
        // THEN
        // should have an api key
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::ApiKey', {
            CustomerId: 'test-customer',
            StageKeys: [
                {
                    RestApiId: { Ref: 'testapiD6451F70' },
                    StageName: { Ref: 'testapiDeploymentStagetest5869DF71' },
                },
            ],
        }));
        // should have a usage plan with specified quota.
        assert_1.expect(stack).to(assert_1.haveResource(USAGE_PLAN_RESOURCE_TYPE, {
            Quota: {
                Limit: 10000,
                Period: 'MONTH',
            },
        }, assert_1.ResourcePart.Properties));
        // should have a usage plan key linking the api key and usage plan
        assert_1.expect(stack).to(assert_1.haveResource(USAGE_PLAN_KEY_RESOURCE_TYPE, {
            KeyId: {
                Ref: 'testapikey998028B6',
            },
            KeyType: 'API_KEY',
            UsagePlanId: {
                Ref: 'testapikeyUsagePlanResource66DB63D6',
            },
        }, assert_1.ResourcePart.Properties));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,