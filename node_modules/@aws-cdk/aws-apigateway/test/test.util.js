"use strict";
const nodeunit_1 = require("nodeunit");
const lib_1 = require("../lib");
const util_1 = require("../lib/util");
module.exports = nodeunit_1.testCase({
    'parseMethodResourcePath': {
        'fails if path does not start with a /'(test) {
            test.throws(() => util_1.parseMethodOptionsPath('foo'), /Method options path must start with \'\/\'/);
            test.done();
        },
        'fails if there are less than two components'(test) {
            test.throws(() => util_1.parseMethodOptionsPath('/'), /Method options path must include at least two components/);
            test.throws(() => util_1.parseMethodOptionsPath('/foo'), /Method options path must include at least two components/);
            test.throws(() => util_1.parseMethodOptionsPath('/foo/'), /Invalid HTTP method ""/);
            test.done();
        },
        'fails if a non-supported http method is used'(test) {
            test.throws(() => util_1.parseMethodOptionsPath('/foo/bar'), /Invalid HTTP method "BAR"/);
            test.done();
        },
        'extracts resource path and method correctly'(test) {
            test.deepEqual(util_1.parseMethodOptionsPath('/foo/GET'), { resourcePath: '/~1foo', httpMethod: 'GET' });
            test.deepEqual(util_1.parseMethodOptionsPath('/foo/bar/GET'), { resourcePath: '/~1foo~1bar', httpMethod: 'GET' });
            test.deepEqual(util_1.parseMethodOptionsPath('/foo/*/GET'), { resourcePath: '/~1foo~1*', httpMethod: 'GET' });
            test.deepEqual(util_1.parseMethodOptionsPath('/*/GET'), { resourcePath: '/*', httpMethod: 'GET' });
            test.deepEqual(util_1.parseMethodOptionsPath('/*/*'), { resourcePath: '/*', httpMethod: '*' });
            test.deepEqual(util_1.parseMethodOptionsPath('//POST'), { resourcePath: '/', httpMethod: 'POST' });
            test.done();
        },
    },
    'parseAwsApiCall': {
        'fails if "actionParams" is set but "action" is undefined'(test) {
            test.throws(() => util_1.parseAwsApiCall(undefined, undefined, { foo: '123' }), /"actionParams" requires that "action" will be set/);
            test.done();
        },
        'fails since "action" and "path" are mutually exclusive'(test) {
            test.throws(() => util_1.parseAwsApiCall('foo', 'bar'), /"path" and "action" are mutually exclusive \(path="foo", action="bar"\)/);
            test.done();
        },
        'fails if "path" and "action" are both undefined'(test) {
            test.throws(() => util_1.parseAwsApiCall(), /Either "path" or "action" are required/);
            test.done();
        },
        '"path" mode'(test) {
            test.deepEqual(util_1.parseAwsApiCall('my/path'), { apiType: 'path', apiValue: 'my/path' });
            test.done();
        },
        '"action" mode with no parameters'(test) {
            test.deepEqual(util_1.parseAwsApiCall(undefined, 'MyAction'), { apiType: 'action', apiValue: 'MyAction' });
            test.done();
        },
        '"action" mode with parameters (url-encoded)'(test) {
            test.deepEqual(util_1.parseAwsApiCall(undefined, 'GetObject', { Bucket: 'MyBucket', Key: 'MyKey' }), {
                apiType: 'action',
                apiValue: 'GetObject&Bucket=MyBucket&Key=MyKey',
            });
            test.done();
        },
    },
    'JsonSchemaMapper.toCfnJsonSchema': {
        'maps "ref" found under properties'(test) {
            const schema = {
                type: lib_1.JsonSchemaType.OBJECT,
                properties: {
                    collection: {
                        type: lib_1.JsonSchemaType.ARRAY,
                        items: {
                            ref: '#/some/reference',
                        },
                        uniqueItems: true,
                    },
                },
                required: ['collection'],
            };
            const actual = util_1.JsonSchemaMapper.toCfnJsonSchema(schema);
            test.deepEqual(actual, {
                $schema: 'http://json-schema.org/draft-04/schema#',
                type: 'object',
                properties: {
                    collection: {
                        type: 'array',
                        items: {
                            $ref: '#/some/reference',
                        },
                        uniqueItems: true,
                    },
                },
                required: ['collection'],
            });
            test.done();
        },
        'does not map a "ref" property name'(test) {
            const schema = {
                type: lib_1.JsonSchemaType.OBJECT,
                properties: {
                    ref: {
                        type: lib_1.JsonSchemaType.ARRAY,
                        items: {
                            ref: '#/some/reference',
                        },
                        uniqueItems: true,
                    },
                },
                required: ['ref'],
            };
            const actual = util_1.JsonSchemaMapper.toCfnJsonSchema(schema);
            test.deepEqual(actual, {
                $schema: 'http://json-schema.org/draft-04/schema#',
                type: 'object',
                properties: {
                    ref: {
                        type: 'array',
                        items: {
                            $ref: '#/some/reference',
                        },
                        uniqueItems: true,
                    },
                },
                required: ['ref'],
            });
            test.done();
        },
    },
});
//# sourceMappingURL=data:application/json;base64,