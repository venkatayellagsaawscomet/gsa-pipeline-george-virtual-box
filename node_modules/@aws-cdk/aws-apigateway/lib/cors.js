"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cors = void 0;
const util_1 = require("./util");
class Cors {
    // utility class
    constructor() { }
}
exports.Cors = Cors;
/**
 * All HTTP methods.
 */
Cors.ALL_METHODS = util_1.ALL_METHODS;
/**
 * All origins.
 */
Cors.ALL_ORIGINS = ['*'];
/**
 * The set of default headers allowed for CORS and useful for API Gateway.
 */
Cors.DEFAULT_HEADERS = ['Content-Type', 'X-Amz-Date', 'Authorization', 'X-Api-Key', 'X-Amz-Security-Token', 'X-Amz-User-Agent'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsaUNBQXFDO0FBZ0dyQyxNQUFhLElBQUk7SUFnQmYsZ0JBQWdCO0lBQ2hCLGdCQUF3QixDQUFDOztBQWpCM0Isb0JBa0JDO0FBakJDOztHQUVHO0FBQ29CLGdCQUFXLEdBQUcsa0JBQVcsQ0FBQztBQUVqRDs7R0FFRztBQUNvQixnQkFBVyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFM0M7O0dBRUc7QUFDb0Isb0JBQWUsR0FBRyxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHVyYXRpb24gfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IEFMTF9NRVRIT0RTIH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGludGVyZmFjZSBDb3JzT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIHJlc3BvbnNlIHN0YXR1cyBjb2RlIHJldHVybmVkIGZyb20gdGhlIE9QVElPTlMgbWV0aG9kLlxuICAgKlxuICAgKiBAZGVmYXVsdCAyMDRcbiAgICovXG4gIHJlYWRvbmx5IHN0YXR1c0NvZGU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgbGlzdCBvZiBvcmlnaW5zIHRoYXQgYXJlIGFsbG93ZWQgdG8gbWFrZSByZXF1ZXN0cyB0byB0aGlzXG4gICAqIHJlc291cmNlLiBJZiB5b3Ugd2lzaCB0byBhbGxvdyBhbGwgb3JpZ2lucywgc3BlY2lmeSBgQ29ycy5BTExfT1JJR0lOU2Agb3JcbiAgICogYFsgKiBdYC5cbiAgICpcbiAgICogUmVzcG9uc2VzIHdpbGwgaW5jbHVkZSB0aGUgYEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbmAgcmVzcG9uc2UgaGVhZGVyLlxuICAgKiBJZiBgQ29ycy5BTExfT1JJR0lOU2AgaXMgc3BlY2lmaWVkLCB0aGUgYFZhcnk6IE9yaWdpbmAgcmVzcG9uc2UgaGVhZGVyIHdpbGxcbiAgICogYWxzbyBiZSBpbmNsdWRlZC5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXG4gICAqL1xuICByZWFkb25seSBhbGxvd09yaWdpbnM6IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBUaGUgQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyByZXNwb25zZSBoZWFkZXIgaXMgdXNlZCBpbiByZXNwb25zZSB0byBhXG4gICAqIHByZWZsaWdodCByZXF1ZXN0IHdoaWNoIGluY2x1ZGVzIHRoZSBBY2Nlc3MtQ29udHJvbC1SZXF1ZXN0LUhlYWRlcnMgdG9cbiAgICogaW5kaWNhdGUgd2hpY2ggSFRUUCBoZWFkZXJzIGNhbiBiZSB1c2VkIGR1cmluZyB0aGUgYWN0dWFsIHJlcXVlc3QuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnNcbiAgICogQGRlZmF1bHQgQ29ycy5ERUZBVUxUX0hFQURFUlNcbiAgICovXG4gIHJlYWRvbmx5IGFsbG93SGVhZGVycz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBUaGUgQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcyByZXNwb25zZSBoZWFkZXIgc3BlY2lmaWVzIHRoZSBtZXRob2Qgb3JcbiAgICogbWV0aG9kcyBhbGxvd2VkIHdoZW4gYWNjZXNzaW5nIHRoZSByZXNvdXJjZSBpbiByZXNwb25zZSB0byBhIHByZWZsaWdodCByZXF1ZXN0LlxuICAgKlxuICAgKiBJZiBgQU5ZYCBpcyBzcGVjaWZpZWQsIGl0IHdpbGwgYmUgZXhwYW5kZWQgdG8gYENvcnMuQUxMX01FVEhPRFNgLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXG4gICAqIEBkZWZhdWx0IENvcnMuQUxMX01FVEhPRFNcbiAgICovXG4gIHJlYWRvbmx5IGFsbG93TWV0aG9kcz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBUaGUgQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHMgcmVzcG9uc2UgaGVhZGVyIHRlbGxzIGJyb3dzZXJzIHdoZXRoZXJcbiAgICogdG8gZXhwb3NlIHRoZSByZXNwb25zZSB0byBmcm9udGVuZCBKYXZhU2NyaXB0IGNvZGUgd2hlbiB0aGUgcmVxdWVzdCdzXG4gICAqIGNyZWRlbnRpYWxzIG1vZGUgKFJlcXVlc3QuY3JlZGVudGlhbHMpIGlzIFwiaW5jbHVkZVwiLlxuICAgKlxuICAgKiBXaGVuIGEgcmVxdWVzdCdzIGNyZWRlbnRpYWxzIG1vZGUgKFJlcXVlc3QuY3JlZGVudGlhbHMpIGlzIFwiaW5jbHVkZVwiLFxuICAgKiBicm93c2VycyB3aWxsIG9ubHkgZXhwb3NlIHRoZSByZXNwb25zZSB0byBmcm9udGVuZCBKYXZhU2NyaXB0IGNvZGUgaWYgdGhlXG4gICAqIEFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzIHZhbHVlIGlzIHRydWUuXG4gICAqXG4gICAqIENyZWRlbnRpYWxzIGFyZSBjb29raWVzLCBhdXRob3JpemF0aW9uIGhlYWRlcnMgb3IgVExTIGNsaWVudCBjZXJ0aWZpY2F0ZXMuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBhbGxvd0NyZWRlbnRpYWxzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIEFjY2Vzcy1Db250cm9sLU1heC1BZ2UgcmVzcG9uc2UgaGVhZGVyIGluZGljYXRlcyBob3cgbG9uZyB0aGUgcmVzdWx0cyBvZlxuICAgKiBhIHByZWZsaWdodCByZXF1ZXN0ICh0aGF0IGlzIHRoZSBpbmZvcm1hdGlvbiBjb250YWluZWQgaW4gdGhlXG4gICAqIEFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMgYW5kIEFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMgaGVhZGVycylcbiAgICogY2FuIGJlIGNhY2hlZC5cbiAgICpcbiAgICogVG8gZGlzYWJsZSBjYWNoaW5nIGFsdG9ndGhlciB1c2UgYGRpc2FibGVDYWNoZTogdHJ1ZWAuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL0FjY2Vzcy1Db250cm9sLU1heC1BZ2VcbiAgICogQGRlZmF1bHQgLSBicm93c2VyLXNwZWNpZmljIChzZWUgcmVmZXJlbmNlKVxuICAgKi9cbiAgcmVhZG9ubHkgbWF4QWdlPzogRHVyYXRpb247XG5cbiAgLyoqXG4gICAqIFNldHMgQWNjZXNzLUNvbnRyb2wtTWF4LUFnZSB0byAtMSwgd2hpY2ggbWVhbnMgdGhhdCBjYWNoaW5nIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9wdGlvbiBjYW5ub3QgYmUgdXNlZCB3aXRoIGBtYXhBZ2VgLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGNhY2hlIGlzIGVuYWJsZWRcbiAgICovXG4gIHJlYWRvbmx5IGRpc2FibGVDYWNoZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBBY2Nlc3MtQ29udHJvbC1FeHBvc2UtSGVhZGVycyByZXNwb25zZSBoZWFkZXIgaW5kaWNhdGVzIHdoaWNoIGhlYWRlcnNcbiAgICogY2FuIGJlIGV4cG9zZWQgYXMgcGFydCBvZiB0aGUgcmVzcG9uc2UgYnkgbGlzdGluZyB0aGVpciBuYW1lcy5cbiAgICpcbiAgICogSWYgeW91IHdhbnQgY2xpZW50cyB0byBiZSBhYmxlIHRvIGFjY2VzcyBvdGhlciBoZWFkZXJzLCB5b3UgaGF2ZSB0byBsaXN0XG4gICAqIHRoZW0gdXNpbmcgdGhlIEFjY2Vzcy1Db250cm9sLUV4cG9zZS1IZWFkZXJzIGhlYWRlci5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnNcbiAgICpcbiAgICogQGRlZmF1bHQgLSBvbmx5IHRoZSA2IENPUlMtc2FmZWxpc3RlZCByZXNwb25zZSBoZWFkZXJzIGFyZSBleHBvc2VkOlxuICAgKiBDYWNoZS1Db250cm9sLCBDb250ZW50LUxhbmd1YWdlLCBDb250ZW50LVR5cGUsIEV4cGlyZXMsIExhc3QtTW9kaWZpZWQsXG4gICAqIFByYWdtYVxuICAgKi9cbiAgcmVhZG9ubHkgZXhwb3NlSGVhZGVycz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY2xhc3MgQ29ycyB7XG4gIC8qKlxuICAgKiBBbGwgSFRUUCBtZXRob2RzLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTExfTUVUSE9EUyA9IEFMTF9NRVRIT0RTO1xuXG4gIC8qKlxuICAgKiBBbGwgb3JpZ2lucy5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQUxMX09SSUdJTlMgPSBbJyonXTtcblxuICAvKipcbiAgICogVGhlIHNldCBvZiBkZWZhdWx0IGhlYWRlcnMgYWxsb3dlZCBmb3IgQ09SUyBhbmQgdXNlZnVsIGZvciBBUEkgR2F0ZXdheS5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgREVGQVVMVF9IRUFERVJTID0gWydDb250ZW50LVR5cGUnLCAnWC1BbXotRGF0ZScsICdBdXRob3JpemF0aW9uJywgJ1gtQXBpLUtleScsICdYLUFtei1TZWN1cml0eS1Ub2tlbicsICdYLUFtei1Vc2VyLUFnZW50J107XG5cbiAgLy8gdXRpbGl0eSBjbGFzc1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkgeyB9XG59XG4iXX0=