"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const assert_1 = require("@aws-cdk/assert");
const autoscaling = require("@aws-cdk/aws-autoscaling");
const ec2 = require("@aws-cdk/aws-ec2");
const kms = require("@aws-cdk/aws-kms");
const lambda = require("@aws-cdk/aws-lambda");
const sns = require("@aws-cdk/aws-sns");
const sqs = require("@aws-cdk/aws-sqs");
const core_1 = require("@aws-cdk/core");
const hooks = require("../lib");
describe('given an AutoScalingGroup', () => {
    let stack;
    let asg;
    beforeEach(() => {
        stack = new core_1.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        asg = new autoscaling.AutoScalingGroup(stack, 'ASG', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: new ec2.AmazonLinuxImage(),
        });
    });
    test('can use queue as hook target', () => {
        // GIVEN
        const queue = new sqs.Queue(stack, 'Queue');
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.QueueHook(queue),
        });
        // THEN
        expect(stack).toHaveResource('AWS::AutoScaling::LifecycleHook', { NotificationTargetARN: { 'Fn::GetAtt': ['Queue4A7E3555', 'Arn'] } });
    });
    test('can use topic as hook target', () => {
        // GIVEN
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.TopicHook(topic),
        });
        // THEN
        expect(stack).toHaveResource('AWS::AutoScaling::LifecycleHook', {
            NotificationTargetARN: { Ref: 'TopicBFC7AF6E' },
        });
    });
    test('can use Lambda function as hook target', () => {
        // GIVEN
        const fn = new lambda.Function(stack, 'Fn', {
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: 'index.index',
        });
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.FunctionHook(fn),
        });
        // THEN
        expect(stack).toHaveResource('AWS::AutoScaling::LifecycleHook', {
            NotificationTargetARN: { Ref: 'ASGLifecycleHookTransTopic9B0D4842' },
        });
        expect(stack).toHaveResource('AWS::SNS::Subscription', {
            Protocol: 'lambda',
            TopicArn: { Ref: 'ASGLifecycleHookTransTopic9B0D4842' },
            Endpoint: { 'Fn::GetAtt': ['Fn9270CBC0', 'Arn'] },
        });
    });
    test('can use Lambda function as hook target with encrypted SNS', () => {
        // GIVEN
        const key = new kms.Key(stack, 'key');
        const fn = new lambda.Function(stack, 'Fn', {
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: 'index.index',
        });
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.FunctionHook(fn, key),
        });
        // THEN
        expect(stack).toHaveResourceLike('AWS::SNS::Topic', {
            KmsMasterKeyId: {
                'Fn::GetAtt': [
                    'keyFEDD6EC0',
                    'Arn',
                ],
            },
        });
        expect(stack).toHaveResourceLike('AWS::IAM::Policy', {
            PolicyDocument: {
                Statement: assert_1.arrayWith({
                    Effect: 'Allow',
                    Action: [
                        'kms:Decrypt',
                        'kms:GenerateDataKey',
                    ],
                    Resource: {
                        'Fn::GetAtt': [
                            'keyFEDD6EC0',
                            'Arn',
                        ],
                    },
                }),
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,