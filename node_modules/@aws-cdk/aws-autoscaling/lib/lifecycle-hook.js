"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifecycleTransition = exports.DefaultResult = exports.LifecycleHook = void 0;
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const autoscaling_generated_1 = require("./autoscaling.generated");
/**
 * Define a life cycle hook
 */
class LifecycleHook extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.lifecycleHookName,
        });
        this.role = props.role || new iam.Role(this, 'Role', {
            assumedBy: new iam.ServicePrincipal('autoscaling.amazonaws.com'),
        });
        const targetProps = props.notificationTarget.bind(this, this);
        const resource = new autoscaling_generated_1.CfnLifecycleHook(this, 'Resource', {
            autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,
            defaultResult: props.defaultResult,
            heartbeatTimeout: props.heartbeatTimeout && props.heartbeatTimeout.toSeconds(),
            lifecycleHookName: this.physicalName,
            lifecycleTransition: props.lifecycleTransition,
            notificationMetadata: props.notificationMetadata,
            notificationTargetArn: targetProps.notificationTargetArn,
            roleArn: this.role.roleArn,
        });
        // A LifecycleHook resource is going to do a permissions test upon creation,
        // so we have to make sure the role has full permissions before creating the
        // lifecycle hook.
        resource.node.addDependency(this.role);
        this.lifecycleHookName = resource.ref;
    }
}
exports.LifecycleHook = LifecycleHook;
var DefaultResult;
(function (DefaultResult) {
    DefaultResult["CONTINUE"] = "CONTINUE";
    DefaultResult["ABANDON"] = "ABANDON";
})(DefaultResult = exports.DefaultResult || (exports.DefaultResult = {}));
/**
 * What instance transition to attach the hook to
 */
var LifecycleTransition;
(function (LifecycleTransition) {
    /**
     * Execute the hook when an instance is about to be added
     */
    LifecycleTransition["INSTANCE_LAUNCHING"] = "autoscaling:EC2_INSTANCE_LAUNCHING";
    /**
     * Execute the hook when an instance is about to be terminated
     */
    LifecycleTransition["INSTANCE_TERMINATING"] = "autoscaling:EC2_INSTANCE_TERMINATING";
})(LifecycleTransition = exports.LifecycleTransition || (exports.LifecycleTransition = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlLWhvb2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaWZlY3ljbGUtaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3Q0FBd0M7QUFDeEMsd0NBQXlFO0FBRXpFLG1FQUEyRDtBQTJFM0Q7O0dBRUc7QUFDSCxNQUFhLGFBQWMsU0FBUSxlQUFRO0lBWXpDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBeUI7UUFDakUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixZQUFZLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtTQUN0QyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7WUFDbkQsU0FBUyxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLDJCQUEyQixDQUFDO1NBQ2pFLENBQUMsQ0FBQztRQUVILE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTlELE1BQU0sUUFBUSxHQUFHLElBQUksd0NBQWdCLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUN0RCxvQkFBb0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CO1lBQ2pFLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRTtZQUM5RSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsWUFBWTtZQUNwQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsbUJBQW1CO1lBQzlDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQscUJBQXFCLEVBQUUsV0FBVyxDQUFDLHFCQUFxQjtZQUN4RCxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1NBQzNCLENBQUMsQ0FBQztRQUVILDRFQUE0RTtRQUM1RSw0RUFBNEU7UUFDNUUsa0JBQWtCO1FBQ2xCLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztJQUN4QyxDQUFDO0NBQ0Y7QUF6Q0Qsc0NBeUNDO0FBRUQsSUFBWSxhQUdYO0FBSEQsV0FBWSxhQUFhO0lBQ3ZCLHNDQUFxQixDQUFBO0lBQ3JCLG9DQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFIVyxhQUFhLEdBQWIscUJBQWEsS0FBYixxQkFBYSxRQUd4QjtBQUVEOztHQUVHO0FBQ0gsSUFBWSxtQkFVWDtBQVZELFdBQVksbUJBQW1CO0lBQzdCOztPQUVHO0lBQ0gsZ0ZBQXlELENBQUE7SUFFekQ7O09BRUc7SUFDSCxvRkFBNkQsQ0FBQTtBQUMvRCxDQUFDLEVBVlcsbUJBQW1CLEdBQW5CLDJCQUFtQixLQUFuQiwyQkFBbUIsUUFVOUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBpYW0gZnJvbSAnQGF3cy1jZGsvYXdzLWlhbSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QsIER1cmF0aW9uLCBJUmVzb3VyY2UsIFJlc291cmNlIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBJQXV0b1NjYWxpbmdHcm91cCB9IGZyb20gJy4vYXV0by1zY2FsaW5nLWdyb3VwJztcbmltcG9ydCB7IENmbkxpZmVjeWNsZUhvb2sgfSBmcm9tICcuL2F1dG9zY2FsaW5nLmdlbmVyYXRlZCc7XG5pbXBvcnQgeyBJTGlmZWN5Y2xlSG9va1RhcmdldCB9IGZyb20gJy4vbGlmZWN5Y2xlLWhvb2stdGFyZ2V0JztcblxuLyoqXG4gKiBCYXNpYyBwcm9wZXJ0aWVzIGZvciBhIGxpZmVjeWNsZSBob29rXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmFzaWNMaWZlY3ljbGVIb29rUHJvcHMge1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgbGlmZWN5Y2xlIGhvb2tcbiAgICpcbiAgICogQGRlZmF1bHQgLSBBdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBuYW1lLlxuICAgKi9cbiAgcmVhZG9ubHkgbGlmZWN5Y2xlSG9va05hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBhY3Rpb24gdGhlIEF1dG8gU2NhbGluZyBncm91cCB0YWtlcyB3aGVuIHRoZSBsaWZlY3ljbGUgaG9vayB0aW1lb3V0IGVsYXBzZXMgb3IgaWYgYW4gdW5leHBlY3RlZCBmYWlsdXJlIG9jY3Vycy5cbiAgICpcbiAgICogQGRlZmF1bHQgQ29udGludWVcbiAgICovXG4gIHJlYWRvbmx5IGRlZmF1bHRSZXN1bHQ/OiBEZWZhdWx0UmVzdWx0O1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHRpbWUgYmV0d2VlbiBjYWxscyB0byBSZWNvcmRMaWZlY3ljbGVBY3Rpb25IZWFydGJlYXQgZm9yIHRoZSBob29rXG4gICAqXG4gICAqIElmIHRoZSBsaWZlY3ljbGUgaG9vayB0aW1lcyBvdXQsIHBlcmZvcm0gdGhlIGFjdGlvbiBpbiBEZWZhdWx0UmVzdWx0LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIGhlYXJ0YmVhdCB0aW1lb3V0LlxuICAgKi9cbiAgcmVhZG9ubHkgaGVhcnRiZWF0VGltZW91dD86IER1cmF0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdGUgb2YgdGhlIEFtYXpvbiBFQzIgaW5zdGFuY2UgdG8gd2hpY2ggeW91IHdhbnQgdG8gYXR0YWNoIHRoZSBsaWZlY3ljbGUgaG9vay5cbiAgICovXG4gIHJlYWRvbmx5IGxpZmVjeWNsZVRyYW5zaXRpb246IExpZmVjeWNsZVRyYW5zaXRpb247XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgZGF0YSB0byBwYXNzIHRvIHRoZSBsaWZlY3ljbGUgaG9vayB0YXJnZXRcbiAgICpcbiAgICogQGRlZmF1bHQgLSBObyBtZXRhZGF0YS5cbiAgICovXG4gIHJlYWRvbmx5IG5vdGlmaWNhdGlvbk1ldGFkYXRhPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IG9mIHRoZSBsaWZlY3ljbGUgaG9va1xuICAgKi9cbiAgcmVhZG9ubHkgbm90aWZpY2F0aW9uVGFyZ2V0OiBJTGlmZWN5Y2xlSG9va1RhcmdldDtcblxuICAvKipcbiAgICogVGhlIHJvbGUgdGhhdCBhbGxvd3MgcHVibGlzaGluZyB0byB0aGUgbm90aWZpY2F0aW9uIHRhcmdldFxuICAgKlxuICAgKiBAZGVmYXVsdCAtIEEgcm9sZSBpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQuXG4gICAqL1xuICByZWFkb25seSByb2xlPzogaWFtLklSb2xlO1xufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGEgTGlmZWN5Y2xlIGhvb2tcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaWZlY3ljbGVIb29rUHJvcHMgZXh0ZW5kcyBCYXNpY0xpZmVjeWNsZUhvb2tQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgQXV0b1NjYWxpbmdHcm91cCB0byBhZGQgdGhlIGxpZmVjeWNsZSBob29rIHRvXG4gICAqL1xuICByZWFkb25seSBhdXRvU2NhbGluZ0dyb3VwOiBJQXV0b1NjYWxpbmdHcm91cDtcbn1cblxuLyoqXG4gKiBBIGJhc2ljIGxpZmVjeWNsZSBob29rIG9iamVjdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElMaWZlY3ljbGVIb29rIGV4dGVuZHMgSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFRoZSByb2xlIGZvciB0aGUgbGlmZWN5Y2xlIGhvb2sgdG8gZXhlY3V0ZVxuICAgKi9cbiAgcmVhZG9ubHkgcm9sZTogaWFtLklSb2xlO1xufVxuXG4vKipcbiAqIERlZmluZSBhIGxpZmUgY3ljbGUgaG9va1xuICovXG5leHBvcnQgY2xhc3MgTGlmZWN5Y2xlSG9vayBleHRlbmRzIFJlc291cmNlIGltcGxlbWVudHMgSUxpZmVjeWNsZUhvb2sge1xuICAvKipcbiAgICogVGhlIHJvbGUgdGhhdCBhbGxvd3MgdGhlIEFTRyB0byBwdWJsaXNoIHRvIHRoZSBub3RpZmljYXRpb24gdGFyZ2V0XG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgcm9sZTogaWFtLklSb2xlO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGlzIGxpZmVjeWNsZSBob29rXG4gICAqIEBhdHRyaWJ1dGVcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBsaWZlY3ljbGVIb29rTmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBMaWZlY3ljbGVIb29rUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHBoeXNpY2FsTmFtZTogcHJvcHMubGlmZWN5Y2xlSG9va05hbWUsXG4gICAgfSk7XG5cbiAgICB0aGlzLnJvbGUgPSBwcm9wcy5yb2xlIHx8IG5ldyBpYW0uUm9sZSh0aGlzLCAnUm9sZScsIHtcbiAgICAgIGFzc3VtZWRCeTogbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdhdXRvc2NhbGluZy5hbWF6b25hd3MuY29tJyksXG4gICAgfSk7XG5cbiAgICBjb25zdCB0YXJnZXRQcm9wcyA9IHByb3BzLm5vdGlmaWNhdGlvblRhcmdldC5iaW5kKHRoaXMsIHRoaXMpO1xuXG4gICAgY29uc3QgcmVzb3VyY2UgPSBuZXcgQ2ZuTGlmZWN5Y2xlSG9vayh0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICBhdXRvU2NhbGluZ0dyb3VwTmFtZTogcHJvcHMuYXV0b1NjYWxpbmdHcm91cC5hdXRvU2NhbGluZ0dyb3VwTmFtZSxcbiAgICAgIGRlZmF1bHRSZXN1bHQ6IHByb3BzLmRlZmF1bHRSZXN1bHQsXG4gICAgICBoZWFydGJlYXRUaW1lb3V0OiBwcm9wcy5oZWFydGJlYXRUaW1lb3V0ICYmIHByb3BzLmhlYXJ0YmVhdFRpbWVvdXQudG9TZWNvbmRzKCksXG4gICAgICBsaWZlY3ljbGVIb29rTmFtZTogdGhpcy5waHlzaWNhbE5hbWUsXG4gICAgICBsaWZlY3ljbGVUcmFuc2l0aW9uOiBwcm9wcy5saWZlY3ljbGVUcmFuc2l0aW9uLFxuICAgICAgbm90aWZpY2F0aW9uTWV0YWRhdGE6IHByb3BzLm5vdGlmaWNhdGlvbk1ldGFkYXRhLFxuICAgICAgbm90aWZpY2F0aW9uVGFyZ2V0QXJuOiB0YXJnZXRQcm9wcy5ub3RpZmljYXRpb25UYXJnZXRBcm4sXG4gICAgICByb2xlQXJuOiB0aGlzLnJvbGUucm9sZUFybixcbiAgICB9KTtcblxuICAgIC8vIEEgTGlmZWN5Y2xlSG9vayByZXNvdXJjZSBpcyBnb2luZyB0byBkbyBhIHBlcm1pc3Npb25zIHRlc3QgdXBvbiBjcmVhdGlvbixcbiAgICAvLyBzbyB3ZSBoYXZlIHRvIG1ha2Ugc3VyZSB0aGUgcm9sZSBoYXMgZnVsbCBwZXJtaXNzaW9ucyBiZWZvcmUgY3JlYXRpbmcgdGhlXG4gICAgLy8gbGlmZWN5Y2xlIGhvb2suXG4gICAgcmVzb3VyY2Uubm9kZS5hZGREZXBlbmRlbmN5KHRoaXMucm9sZSk7XG5cbiAgICB0aGlzLmxpZmVjeWNsZUhvb2tOYW1lID0gcmVzb3VyY2UucmVmO1xuICB9XG59XG5cbmV4cG9ydCBlbnVtIERlZmF1bHRSZXN1bHQge1xuICBDT05USU5VRSA9ICdDT05USU5VRScsXG4gIEFCQU5ET04gPSAnQUJBTkRPTicsXG59XG5cbi8qKlxuICogV2hhdCBpbnN0YW5jZSB0cmFuc2l0aW9uIHRvIGF0dGFjaCB0aGUgaG9vayB0b1xuICovXG5leHBvcnQgZW51bSBMaWZlY3ljbGVUcmFuc2l0aW9uIHtcbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIGhvb2sgd2hlbiBhbiBpbnN0YW5jZSBpcyBhYm91dCB0byBiZSBhZGRlZFxuICAgKi9cbiAgSU5TVEFOQ0VfTEFVTkNISU5HID0gJ2F1dG9zY2FsaW5nOkVDMl9JTlNUQU5DRV9MQVVOQ0hJTkcnLFxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIHRoZSBob29rIHdoZW4gYW4gaW5zdGFuY2UgaXMgYWJvdXQgdG8gYmUgdGVybWluYXRlZFxuICAgKi9cbiAgSU5TVEFOQ0VfVEVSTUlOQVRJTkcgPSAnYXV0b3NjYWxpbmc6RUMyX0lOU1RBTkNFX1RFUk1JTkFUSU5HJyxcbn1cbiJdfQ==