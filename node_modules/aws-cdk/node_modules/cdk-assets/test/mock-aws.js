"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockUpload = exports.mockedApiFailure = exports.mockedApiResult = exports.errorWithCode = exports.mockAws = void 0;
jest.mock('aws-sdk');
const AWS = require("aws-sdk");
function mockAws() {
    const mockEcr = new AWS.ECR();
    const mockS3 = new AWS.S3();
    // Sane defaults which can be overridden
    mockS3.getBucketLocation = mockedApiResult({});
    mockEcr.describeRepositories = mockedApiResult({
        repositories: [
            {
                repositoryUri: '12345.amazonaws.com/repo',
            },
        ],
    });
    return {
        mockEcr,
        mockS3,
        discoverCurrentAccount: jest.fn(() => Promise.resolve({ accountId: 'current_account', partition: 'swa' })),
        discoverDefaultRegion: jest.fn(() => Promise.resolve('current_region')),
        ecrClient: jest.fn(() => Promise.resolve(mockEcr)),
        s3Client: jest.fn(() => Promise.resolve(mockS3)),
    };
}
exports.mockAws = mockAws;
function errorWithCode(code, message) {
    const ret = new Error(message);
    ret.code = code;
    return ret;
}
exports.errorWithCode = errorWithCode;
function mockedApiResult(returnValue) {
    return jest.fn().mockReturnValue({
        promise: jest.fn().mockResolvedValue(returnValue),
    });
}
exports.mockedApiResult = mockedApiResult;
function mockedApiFailure(code, message) {
    return jest.fn().mockReturnValue({
        promise: jest.fn().mockRejectedValue(errorWithCode(code, message)),
    });
}
exports.mockedApiFailure = mockedApiFailure;
/**
 * Mock upload, draining the stream that we get before returning
 * so no race conditions happen with the uninstallation of mock-fs.
 */
function mockUpload(expectContent) {
    return jest.fn().mockImplementation(request => ({
        promise: () => new Promise((ok, ko) => {
            const didRead = new Array();
            const bodyStream = request.Body;
            bodyStream.on('data', (chunk) => { didRead.push(chunk.toString()); }); // This listener must exist
            bodyStream.on('error', ko);
            bodyStream.on('close', () => {
                const actualContent = didRead.join('');
                if (expectContent !== undefined && expectContent !== actualContent) {
                    throw new Error(`Expected to read '${expectContent}' but read: '${actualContent}'`);
                }
                ok();
            });
        }),
    }));
}
exports.mockUpload = mockUpload;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1hd3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtb2NrLWF3cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JCLCtCQUErQjtBQUUvQixTQUFnQixPQUFPO0lBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBRTVCLHdDQUF3QztJQUN4QyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxvQkFBb0IsR0FBRyxlQUFlLENBQUM7UUFDN0MsWUFBWSxFQUFFO1lBQ1o7Z0JBQ0UsYUFBYSxFQUFFLDBCQUEwQjthQUMxQztTQUNGO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTztRQUNMLE9BQU87UUFDUCxNQUFNO1FBQ04sc0JBQXNCLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzFHLHFCQUFxQixFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3ZFLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNqRCxDQUFDO0FBQ0osQ0FBQztBQXRCRCwwQkFzQkM7QUFFRCxTQUFnQixhQUFhLENBQUMsSUFBWSxFQUFFLE9BQWU7SUFDekQsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsR0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDekIsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBSkQsc0NBSUM7QUFFRCxTQUFnQixlQUFlLENBQUMsV0FBZ0I7SUFDOUMsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDO1FBQy9CLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDO0tBQ2xELENBQUMsQ0FBQztBQUNMLENBQUM7QUFKRCwwQ0FJQztBQUVELFNBQWdCLGdCQUFnQixDQUFDLElBQVksRUFBRSxPQUFlO0lBQzVELE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQztRQUMvQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDbkUsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUpELDRDQUlDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLGFBQXNCO0lBQy9DLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDcEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztZQUVwQyxNQUFNLFVBQVUsR0FBMEIsT0FBTyxDQUFDLElBQUksQ0FBQztZQUN2RCxVQUFVLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsMkJBQTJCO1lBQ2xHLFVBQVUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzNCLFVBQVUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDMUIsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLGFBQWEsS0FBSyxhQUFhLEVBQUU7b0JBQ2xFLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLGFBQWEsZ0JBQWdCLGFBQWEsR0FBRyxDQUFDLENBQUM7aUJBQ3JGO2dCQUNELEVBQUUsRUFBRSxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7S0FDSCxDQUFDLENBQUMsQ0FBQztBQUNOLENBQUM7QUFqQkQsZ0NBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiamVzdC5tb2NrKCdhd3Mtc2RrJyk7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrQXdzKCkge1xuICBjb25zdCBtb2NrRWNyID0gbmV3IEFXUy5FQ1IoKTtcbiAgY29uc3QgbW9ja1MzID0gbmV3IEFXUy5TMygpO1xuXG4gIC8vIFNhbmUgZGVmYXVsdHMgd2hpY2ggY2FuIGJlIG92ZXJyaWRkZW5cbiAgbW9ja1MzLmdldEJ1Y2tldExvY2F0aW9uID0gbW9ja2VkQXBpUmVzdWx0KHt9KTtcbiAgbW9ja0Vjci5kZXNjcmliZVJlcG9zaXRvcmllcyA9IG1vY2tlZEFwaVJlc3VsdCh7XG4gICAgcmVwb3NpdG9yaWVzOiBbXG4gICAgICB7XG4gICAgICAgIHJlcG9zaXRvcnlVcmk6ICcxMjM0NS5hbWF6b25hd3MuY29tL3JlcG8nLFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIG1vY2tFY3IsXG4gICAgbW9ja1MzLFxuICAgIGRpc2NvdmVyQ3VycmVudEFjY291bnQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgYWNjb3VudElkOiAnY3VycmVudF9hY2NvdW50JywgcGFydGl0aW9uOiAnc3dhJyB9KSksXG4gICAgZGlzY292ZXJEZWZhdWx0UmVnaW9uOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgnY3VycmVudF9yZWdpb24nKSksXG4gICAgZWNyQ2xpZW50OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShtb2NrRWNyKSksXG4gICAgczNDbGllbnQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG1vY2tTMykpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JXaXRoQ29kZShjb2RlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xuICBjb25zdCByZXQgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIChyZXQgYXMgYW55KS5jb2RlID0gY29kZTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tlZEFwaVJlc3VsdChyZXR1cm5WYWx1ZTogYW55KSB7XG4gIHJldHVybiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICBwcm9taXNlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUocmV0dXJuVmFsdWUpLFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tlZEFwaUZhaWx1cmUoY29kZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgIHByb21pc2U6IGplc3QuZm4oKS5tb2NrUmVqZWN0ZWRWYWx1ZShlcnJvcldpdGhDb2RlKGNvZGUsIG1lc3NhZ2UpKSxcbiAgfSk7XG59XG5cbi8qKlxuICogTW9jayB1cGxvYWQsIGRyYWluaW5nIHRoZSBzdHJlYW0gdGhhdCB3ZSBnZXQgYmVmb3JlIHJldHVybmluZ1xuICogc28gbm8gcmFjZSBjb25kaXRpb25zIGhhcHBlbiB3aXRoIHRoZSB1bmluc3RhbGxhdGlvbiBvZiBtb2NrLWZzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbW9ja1VwbG9hZChleHBlY3RDb250ZW50Pzogc3RyaW5nKSB7XG4gIHJldHVybiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKHJlcXVlc3QgPT4gKHtcbiAgICBwcm9taXNlOiAoKSA9PiBuZXcgUHJvbWlzZSgob2ssIGtvKSA9PiB7XG4gICAgICBjb25zdCBkaWRSZWFkID0gbmV3IEFycmF5PHN0cmluZz4oKTtcblxuICAgICAgY29uc3QgYm9keVN0cmVhbTogTm9kZUpTLlJlYWRhYmxlU3RyZWFtID0gcmVxdWVzdC5Cb2R5O1xuICAgICAgYm9keVN0cmVhbS5vbignZGF0YScsIChjaHVuaykgPT4geyBkaWRSZWFkLnB1c2goY2h1bmsudG9TdHJpbmcoKSk7IH0pOyAvLyBUaGlzIGxpc3RlbmVyIG11c3QgZXhpc3RcbiAgICAgIGJvZHlTdHJlYW0ub24oJ2Vycm9yJywga28pO1xuICAgICAgYm9keVN0cmVhbS5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdHVhbENvbnRlbnQgPSBkaWRSZWFkLmpvaW4oJycpO1xuICAgICAgICBpZiAoZXhwZWN0Q29udGVudCAhPT0gdW5kZWZpbmVkICYmIGV4cGVjdENvbnRlbnQgIT09IGFjdHVhbENvbnRlbnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHRvIHJlYWQgJyR7ZXhwZWN0Q29udGVudH0nIGJ1dCByZWFkOiAnJHthY3R1YWxDb250ZW50fSdgKTtcbiAgICAgICAgfVxuICAgICAgICBvaygpO1xuICAgICAgfSk7XG4gICAgfSksXG4gIH0pKTtcbn0iXX0=