"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const awscli_compatible_1 = require("../../lib/api/aws-auth/awscli-compatible");
const util_1 = require("../util");
beforeEach(() => {
    // Set to paths that don't exist so the SDK doesn't accidentally load this config
    process.env.AWS_CONFIG_FILE = '/home/dummydummy/.bxt/config';
    process.env.AWS_SHARED_CREDENTIALS_FILE = '/home/dummydummy/.bxt/credentials';
    // Scrub some environment variables that might be set if we're running on CodeBuild which will interfere with the tests.
    delete process.env.AWS_REGION;
    delete process.env.AWS_DEFAULT_REGION;
    delete process.env.AWS_ACCESS_KEY_ID;
    delete process.env.AWS_SECRET_ACCESS_KEY;
    delete process.env.AWS_SESSION_TOKEN;
});
test('on an EC2 instance, region lookup queries IMDS', async () => {
    return util_1.withMockedClassSingleton(AWS, 'MetadataService', async (mdService) => {
        mdService.request
            // First call for a token
            .mockImplementationOnce((_1, _2, cb) => { cb(undefined, 'token'); })
            // Second call for the region
            .mockImplementationOnce((_1, _2, cb) => { cb(undefined, JSON.stringify({ region: 'some-region' })); });
        const region = await awscli_compatible_1.AwsCliCompatible.region({ ec2instance: true });
        expect(region).toEqual('some-region');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzY2xpLWNvbXBhdGlibGUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF3c2NsaS1jb21wYXRpYmxlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFDL0IsZ0ZBQTRFO0FBQzVFLGtDQUFtRDtBQUVuRCxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsaUZBQWlGO0lBQ2pGLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxHQUFHLDhCQUE4QixDQUFDO0lBQzdELE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEdBQUcsbUNBQW1DLENBQUM7SUFDOUUsd0hBQXdIO0lBQ3hILE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7SUFDOUIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDO0lBQ3RDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQztJQUNyQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUM7SUFDekMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDO0FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdEQUFnRCxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ2hFLE9BQU8sK0JBQXdCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRTtRQUMxRSxTQUFTLENBQUMsT0FBTztZQUNmLHlCQUF5QjthQUN4QixzQkFBc0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRSw2QkFBNkI7YUFDNUIsc0JBQXNCLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVoSCxNQUFNLE1BQU0sR0FBRyxNQUFNLG9DQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcbmltcG9ydCB7IEF3c0NsaUNvbXBhdGlibGUgfSBmcm9tICcuLi8uLi9saWIvYXBpL2F3cy1hdXRoL2F3c2NsaS1jb21wYXRpYmxlJztcbmltcG9ydCB7IHdpdGhNb2NrZWRDbGFzc1NpbmdsZXRvbiB9IGZyb20gJy4uL3V0aWwnO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgLy8gU2V0IHRvIHBhdGhzIHRoYXQgZG9uJ3QgZXhpc3Qgc28gdGhlIFNESyBkb2Vzbid0IGFjY2lkZW50YWxseSBsb2FkIHRoaXMgY29uZmlnXG4gIHByb2Nlc3MuZW52LkFXU19DT05GSUdfRklMRSA9ICcvaG9tZS9kdW1teWR1bW15Ly5ieHQvY29uZmlnJztcbiAgcHJvY2Vzcy5lbnYuQVdTX1NIQVJFRF9DUkVERU5USUFMU19GSUxFID0gJy9ob21lL2R1bW15ZHVtbXkvLmJ4dC9jcmVkZW50aWFscyc7XG4gIC8vIFNjcnViIHNvbWUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRoYXQgbWlnaHQgYmUgc2V0IGlmIHdlJ3JlIHJ1bm5pbmcgb24gQ29kZUJ1aWxkIHdoaWNoIHdpbGwgaW50ZXJmZXJlIHdpdGggdGhlIHRlc3RzLlxuICBkZWxldGUgcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTjtcbiAgZGVsZXRlIHByb2Nlc3MuZW52LkFXU19ERUZBVUxUX1JFR0lPTjtcbiAgZGVsZXRlIHByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lEO1xuICBkZWxldGUgcHJvY2Vzcy5lbnYuQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZO1xuICBkZWxldGUgcHJvY2Vzcy5lbnYuQVdTX1NFU1NJT05fVE9LRU47XG59KTtcblxudGVzdCgnb24gYW4gRUMyIGluc3RhbmNlLCByZWdpb24gbG9va3VwIHF1ZXJpZXMgSU1EUycsIGFzeW5jICgpID0+IHtcbiAgcmV0dXJuIHdpdGhNb2NrZWRDbGFzc1NpbmdsZXRvbihBV1MsICdNZXRhZGF0YVNlcnZpY2UnLCBhc3luYyAobWRTZXJ2aWNlKSA9PiB7XG4gICAgbWRTZXJ2aWNlLnJlcXVlc3RcbiAgICAgIC8vIEZpcnN0IGNhbGwgZm9yIGEgdG9rZW5cbiAgICAgIC5tb2NrSW1wbGVtZW50YXRpb25PbmNlKChfMSwgXzIsIGNiKSA9PiB7IGNiKHVuZGVmaW5lZCBhcyBhbnksICd0b2tlbicpOyB9KVxuICAgICAgLy8gU2Vjb25kIGNhbGwgZm9yIHRoZSByZWdpb25cbiAgICAgIC5tb2NrSW1wbGVtZW50YXRpb25PbmNlKChfMSwgXzIsIGNiKSA9PiB7IGNiKHVuZGVmaW5lZCBhcyBhbnksIEpTT04uc3RyaW5naWZ5KHsgcmVnaW9uOiAnc29tZS1yZWdpb24nIH0pKTsgfSk7XG5cbiAgICBjb25zdCByZWdpb24gPSBhd2FpdCBBd3NDbGlDb21wYXRpYmxlLnJlZ2lvbih7IGVjMmluc3RhbmNlOiB0cnVlIH0pO1xuICAgIGV4cGVjdChyZWdpb24pLnRvRXF1YWwoJ3NvbWUtcmVnaW9uJyk7XG4gIH0pO1xufSk7XG5cbiJdfQ==