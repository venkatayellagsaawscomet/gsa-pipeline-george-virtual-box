"use strict";
/**
 * Routines for corking stdout and stderr
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.flushCorkedOutput = exports.uncorkShellOutput = exports.writeOutput = exports.corkShellOutput = void 0;
let _corkShellOutput = false;
const _corked = {
    stdout: new Array(),
    stderr: new Array(),
};
function cleanStreams() {
    _corked.stdout.splice(0, _corked.stdout.length);
    _corked.stderr.splice(0, _corked.stderr.length);
}
function corkShellOutput() {
    _corkShellOutput = true;
    cleanStreams();
}
exports.corkShellOutput = corkShellOutput;
function writeOutput(stream, content) {
    if (_corkShellOutput) {
        _corked[stream].push(content);
    }
    else {
        process[stream].write(content);
    }
}
exports.writeOutput = writeOutput;
async function writeAndFlush(stream, content) {
    const flushed = process[stream].write(content);
    if (!flushed) {
        return new Promise(ok => process[stream].once('drain', ok));
    }
}
function uncorkShellOutput() {
    _corkShellOutput = false;
}
exports.uncorkShellOutput = uncorkShellOutput;
async function flushCorkedOutput() {
    await writeAndFlush('stdout', Buffer.concat(_corked.stdout));
    await writeAndFlush('stderr', Buffer.concat(_corked.stderr));
    cleanStreams();
}
exports.flushCorkedOutput = flushCorkedOutput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ya2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmtpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7QUFFSCxJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQztBQUM3QixNQUFNLE9BQU8sR0FBRztJQUNkLE1BQU0sRUFBRSxJQUFJLEtBQUssRUFBVTtJQUMzQixNQUFNLEVBQUUsSUFBSSxLQUFLLEVBQVU7Q0FDNUIsQ0FBQztBQUVGLFNBQVMsWUFBWTtJQUNuQixPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRCxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsU0FBZ0IsZUFBZTtJQUM3QixnQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFDeEIsWUFBWSxFQUFFLENBQUM7QUFDakIsQ0FBQztBQUhELDBDQUdDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLE1BQTJCLEVBQUUsT0FBZTtJQUN0RSxJQUFJLGdCQUFnQixFQUFFO1FBQ3BCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDL0I7U0FBTTtRQUNMLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDaEM7QUFDSCxDQUFDO0FBTkQsa0NBTUM7QUFFRCxLQUFLLFVBQVUsYUFBYSxDQUFDLE1BQTJCLEVBQUUsT0FBZTtJQUN2RSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9DLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUM3RDtBQUNILENBQUM7QUFFRCxTQUFnQixpQkFBaUI7SUFDL0IsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0FBQzNCLENBQUM7QUFGRCw4Q0FFQztBQUVNLEtBQUssVUFBVSxpQkFBaUI7SUFDckMsTUFBTSxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDN0QsTUFBTSxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDN0QsWUFBWSxFQUFFLENBQUM7QUFDakIsQ0FBQztBQUpELDhDQUlDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSb3V0aW5lcyBmb3IgY29ya2luZyBzdGRvdXQgYW5kIHN0ZGVyclxuICovXG5cbmxldCBfY29ya1NoZWxsT3V0cHV0ID0gZmFsc2U7XG5jb25zdCBfY29ya2VkID0ge1xuICBzdGRvdXQ6IG5ldyBBcnJheTxCdWZmZXI+KCksXG4gIHN0ZGVycjogbmV3IEFycmF5PEJ1ZmZlcj4oKSxcbn07XG5cbmZ1bmN0aW9uIGNsZWFuU3RyZWFtcygpIHtcbiAgX2NvcmtlZC5zdGRvdXQuc3BsaWNlKDAsIF9jb3JrZWQuc3Rkb3V0Lmxlbmd0aCk7XG4gIF9jb3JrZWQuc3RkZXJyLnNwbGljZSgwLCBfY29ya2VkLnN0ZGVyci5sZW5ndGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29ya1NoZWxsT3V0cHV0KCkge1xuICBfY29ya1NoZWxsT3V0cHV0ID0gdHJ1ZTtcbiAgY2xlYW5TdHJlYW1zKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZU91dHB1dChzdHJlYW06ICdzdGRvdXQnIHwgJ3N0ZGVycicsIGNvbnRlbnQ6IEJ1ZmZlcikge1xuICBpZiAoX2NvcmtTaGVsbE91dHB1dCkge1xuICAgIF9jb3JrZWRbc3RyZWFtXS5wdXNoKGNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIHByb2Nlc3Nbc3RyZWFtXS53cml0ZShjb250ZW50KTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiB3cml0ZUFuZEZsdXNoKHN0cmVhbTogJ3N0ZG91dCcgfCAnc3RkZXJyJywgY29udGVudDogQnVmZmVyKSB7XG4gIGNvbnN0IGZsdXNoZWQgPSBwcm9jZXNzW3N0cmVhbV0ud3JpdGUoY29udGVudCk7XG4gIGlmICghZmx1c2hlZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShvayA9PiBwcm9jZXNzW3N0cmVhbV0ub25jZSgnZHJhaW4nLCBvaykpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bmNvcmtTaGVsbE91dHB1dCgpIHtcbiAgX2NvcmtTaGVsbE91dHB1dCA9IGZhbHNlO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmx1c2hDb3JrZWRPdXRwdXQoKSB7XG4gIGF3YWl0IHdyaXRlQW5kRmx1c2goJ3N0ZG91dCcsIEJ1ZmZlci5jb25jYXQoX2NvcmtlZC5zdGRvdXQpKTtcbiAgYXdhaXQgd3JpdGVBbmRGbHVzaCgnc3RkZXJyJywgQnVmZmVyLmNvbmNhdChfY29ya2VkLnN0ZGVycikpO1xuICBjbGVhblN0cmVhbXMoKTtcbn1cblxuIl19