"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.outputFromStack = exports.deleteBucket = exports.deleteImageRepository = exports.emptyBucket = exports.sleep = exports.retry = exports.isBucketMissingError = exports.isStackMissingError = exports.stackStatus = exports.deleteStacks = exports.sts = exports.lambda = exports.iam = exports.sns = exports.ecr = exports.s3 = exports.cloudFormation = exports.testEnv = void 0;
const AWS = require("aws-sdk");
const cdk_helpers_1 = require("./cdk-helpers");
exports.testEnv = async () => {
    var _a, _b;
    const response = await new AWS.STS().getCallerIdentity().promise();
    const ret = {
        account: response.Account,
        region: (_b = (_a = process.env.AWS_REGION) !== null && _a !== void 0 ? _a : process.env.AWS_DEFAULT_REGION) !== null && _b !== void 0 ? _b : 'us-east-1',
    };
    exports.testEnv = () => Promise.resolve(ret);
    return ret;
};
exports.cloudFormation = makeAwsCaller(AWS.CloudFormation);
exports.s3 = makeAwsCaller(AWS.S3);
exports.ecr = makeAwsCaller(AWS.ECR);
exports.sns = makeAwsCaller(AWS.SNS);
exports.iam = makeAwsCaller(AWS.IAM);
exports.lambda = makeAwsCaller(AWS.Lambda);
exports.sts = makeAwsCaller(AWS.STS);
/**
 * Perform an AWS call from nothing
 *
 * Create the correct client, do the call and resole the promise().
 */
async function awsCall(ctor, call, request) {
    const env = await exports.testEnv();
    const cfn = new ctor({ region: env.region, maxRetries: 6, retryDelayOptions: { base: 500 } });
    const response = cfn[call](request);
    try {
        return await response.promise();
    }
    catch (e) {
        const newErr = new Error(`${call}(${JSON.stringify(request)}): ${e.message}`);
        newErr.code = e.code;
        throw newErr;
    }
}
/**
 * Factory function to invoke 'awsCall' for specific services.
 *
 * Not strictly necessary but calling this replaces a whole bunch of annoying generics you otherwise have to type:
 *
 * ```ts
 * export function cloudFormation<
 *   C extends keyof ServiceCalls<AWS.CloudFormation>,
 * >(call: C, request: First<ServiceCalls<AWS.CloudFormation>[C]>): Promise<Second<ServiceCalls<AWS.CloudFormation>[C]>> {
 *   return awsCall(AWS.CloudFormation, call, request);
 * }
 * ```
 */
function makeAwsCaller(ctor) {
    return (call, request) => {
        return awsCall(ctor, call, request);
    };
}
async function deleteStacks(...stackNames) {
    if (stackNames.length === 0) {
        return;
    }
    for (const stackName of stackNames) {
        await exports.cloudFormation('updateTerminationProtection', {
            EnableTerminationProtection: false,
            StackName: stackName,
        });
        await exports.cloudFormation('deleteStack', {
            StackName: stackName,
        });
    }
    await retry(`Deleting ${stackNames}`, retry.forSeconds(600), async () => {
        for (const stackName of stackNames) {
            const status = await stackStatus(stackName);
            if (status !== undefined && status.endsWith('_FAILED')) {
                throw retry.abort(new Error(`'${stackName}' is in state '${status}'`));
            }
            if (status !== undefined) {
                throw new Error(`Delete of '${stackName}' not complete yet`);
            }
        }
    });
}
exports.deleteStacks = deleteStacks;
async function stackStatus(stackName) {
    var _a;
    try {
        return (_a = (await exports.cloudFormation('describeStacks', { StackName: stackName })).Stacks) === null || _a === void 0 ? void 0 : _a[0].StackStatus;
    }
    catch (e) {
        if (isStackMissingError(e)) {
            return undefined;
        }
        throw e;
    }
}
exports.stackStatus = stackStatus;
function isStackMissingError(e) {
    return e.message.indexOf('does not exist') > -1;
}
exports.isStackMissingError = isStackMissingError;
function isBucketMissingError(e) {
    return e.message.indexOf('does not exist') > -1;
}
exports.isBucketMissingError = isBucketMissingError;
/**
 * Retry an async operation until a deadline is hit.
 *
 * Use `retry.forSeconds()` to construct a deadline relative to right now.
 *
 * Exceptions will cause the operation to retry. Use `retry.abort` to annotate an exception
 * to stop the retry and end in a failure.
 */
async function retry(operation, deadline, block) {
    let i = 0;
    cdk_helpers_1.log(`💈 ${operation}`);
    while (true) {
        try {
            i++;
            const ret = await block();
            cdk_helpers_1.log(`💈 ${operation}: succeeded after ${i} attempts`);
            return ret;
        }
        catch (e) {
            if (e.abort || Date.now() > deadline.getTime()) {
                throw new Error(`${operation}: did not succeed after ${i} attempts: ${e}`);
            }
            cdk_helpers_1.log(`⏳ ${operation} (${e.message})`);
            await sleep(5000);
        }
    }
}
exports.retry = retry;
/**
 * Make a deadline for the `retry` function relative to the current time.
 */
retry.forSeconds = (seconds) => {
    return new Date(Date.now() + seconds * 1000);
};
/**
 * Annotate an error to stop the retrying
 */
retry.abort = (e) => {
    e.abort = true;
    return e;
};
async function sleep(ms) {
    return new Promise(ok => setTimeout(ok, ms));
}
exports.sleep = sleep;
async function emptyBucket(bucketName) {
    const objects = await exports.s3('listObjects', { Bucket: bucketName });
    const deletes = (objects.Contents || []).map(obj => obj.Key || '').filter(d => !!d);
    if (deletes.length === 0) {
        return Promise.resolve();
    }
    return exports.s3('deleteObjects', {
        Bucket: bucketName,
        Delete: {
            Objects: deletes.map(d => ({ Key: d })),
            Quiet: false,
        },
    });
}
exports.emptyBucket = emptyBucket;
async function deleteImageRepository(repositoryName) {
    await exports.ecr('deleteRepository', { repositoryName, force: true });
}
exports.deleteImageRepository = deleteImageRepository;
async function deleteBucket(bucketName) {
    try {
        await emptyBucket(bucketName);
        await exports.s3('deleteBucket', {
            Bucket: bucketName,
        });
    }
    catch (e) {
        if (isBucketMissingError(e)) {
            return;
        }
        throw e;
    }
}
exports.deleteBucket = deleteBucket;
function outputFromStack(key, stack) {
    var _a, _b;
    return (_b = ((_a = stack.Outputs) !== null && _a !== void 0 ? _a : []).find(o => o.OutputKey === key)) === null || _b === void 0 ? void 0 : _b.OutputValue;
}
exports.outputFromStack = outputFromStack;
//# sourceMappingURL=data:application/json;base64,