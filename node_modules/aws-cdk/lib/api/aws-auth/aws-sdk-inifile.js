"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchedSharedIniFileCredentials = void 0;
const AWS = require("aws-sdk");
/**
 * Hack-fix
 *
 * There are a number of issues in the upstream version of SharedIniFileCredentials
 * that need fixing:
 *
 *  1. The upstream aws-sdk contains an incorrect instantiation of an `AWS.STS`
 *     client, which *should* have taken the region from the requested profile
 *     but doesn't. It will use the region from the default profile, which
 *     may not exist, defaulting to `us-east-1` (since we switched to
 *     AWS_STS_REGIONAL_ENDPOINTS=regional, that default is not even allowed anymore
 *     and the absence of a default region will lead to an error).
 *
 *  2. The simple fix is to get the region from the `config` file. profiles
 *     are made up of a combination of `credentials` and `config`, and the region is
 *     generally in `config` with the rest in `credentials`. However, a bug in
 *     `getProfilesFromSharedConfig` overwrites ALL `config` data with `credentials`
 *     data, so we also need to do extra work to fish the `region` out of the config.
 *
 * See https://github.com/aws/aws-sdk-js/issues/3418 for all the gory details.
 */
class PatchedSharedIniFileCredentials extends AWS.SharedIniFileCredentials {
    loadRoleProfile(creds, roleProfile, callback) {
        // Need to duplicate the whole implementation here -- the function is long and has been written in
        // such a way that there are no small monkey patches possible.
        var _a, _b, _c, _d;
        if (this.disableAssumeRole) {
            throw AWS.util.error(new Error('Role assumption profiles are disabled. ' +
                'Failed to load profile ' + this.profile +
                ' from ' + creds.filename), { code: 'SharedIniFileCredentialsProviderFailure' });
        }
        var self = this;
        var roleArn = roleProfile.role_arn;
        var roleSessionName = roleProfile.role_session_name;
        var externalId = roleProfile.external_id;
        var mfaSerial = roleProfile.mfa_serial;
        var sourceProfileName = roleProfile.source_profile;
        if (!sourceProfileName) {
            throw AWS.util.error(new Error('source_profile is not set using profile ' + this.profile), { code: 'SharedIniFileCredentialsProviderFailure' });
        }
        var sourceProfileExistanceTest = creds[sourceProfileName];
        if (typeof sourceProfileExistanceTest !== 'object') {
            throw AWS.util.error(new Error('source_profile ' + sourceProfileName + ' using profile '
                + this.profile + ' does not exist'), { code: 'SharedIniFileCredentialsProviderFailure' });
        }
        var sourceCredentials = new AWS.SharedIniFileCredentials(AWS.util.merge(this.options || {}, {
            profile: sourceProfileName,
            preferStaticCredentials: true,
        }));
        // --------- THIS IS NEW ----------------------
        const profiles = loadProfilesProper(this.filename);
        const region = (_d = (_b = (_a = profiles[this.profile]) === null || _a === void 0 ? void 0 : _a.region) !== null && _b !== void 0 ? _b : (_c = profiles.default) === null || _c === void 0 ? void 0 : _c.region) !== null && _d !== void 0 ? _d : 'us-east-1';
        // --------- /THIS IS NEW ----------------------
        this.roleArn = roleArn;
        var sts = new AWS.STS({
            credentials: sourceCredentials,
            region,
            httpOptions: this.httpOptions,
        });
        var roleParams = {
            RoleArn: roleArn,
            RoleSessionName: roleSessionName || 'aws-sdk-js-' + Date.now(),
        };
        if (externalId) {
            roleParams.ExternalId = externalId;
        }
        if (mfaSerial && self.tokenCodeFn) {
            roleParams.SerialNumber = mfaSerial;
            self.tokenCodeFn(mfaSerial, function (err, token) {
                if (err) {
                    var message;
                    if (err instanceof Error) {
                        message = err.message;
                    }
                    else {
                        message = err;
                    }
                    callback(AWS.util.error(new Error('Error fetching MFA token: ' + message), { code: 'SharedIniFileCredentialsProviderFailure' }));
                    return;
                }
                roleParams.TokenCode = token;
                sts.assumeRole(roleParams, callback);
            });
            return;
        }
        sts.assumeRole(roleParams, callback);
    }
}
exports.PatchedSharedIniFileCredentials = PatchedSharedIniFileCredentials;
/**
 * A function to load profiles from disk that MERGES credentials and config instead of overwriting
 *
 * @see https://github.com/aws/aws-sdk-js/blob/5ae5a7d7d24d1000dbc089cc15f8ed2c7b06c542/lib/util.js#L956
 */
function loadProfilesProper(filename) {
    const util = AWS.util; // Does exists even though there aren't any typings for it
    const iniLoader = util.iniLoader;
    const profiles = {};
    let profilesFromConfig = {};
    if (process.env[util.configOptInEnv]) {
        profilesFromConfig = iniLoader.loadFrom({
            isConfig: true,
            filename: process.env[util.sharedConfigFileEnv],
        });
    }
    var profilesFromCreds = iniLoader.loadFrom({
        filename: filename ||
            (process.env[util.configOptInEnv] && process.env[util.sharedCredentialsFileEnv]),
    });
    for (const [name, profile] of Object.entries(profilesFromConfig)) {
        profiles[name] = profile;
    }
    for (const [name, profile] of Object.entries(profilesFromCreds)) {
        profiles[name] = {
            ...profiles[name],
            ...profile,
        };
    }
    return profiles;
}
//# sourceMappingURL=data:application/json;base64,